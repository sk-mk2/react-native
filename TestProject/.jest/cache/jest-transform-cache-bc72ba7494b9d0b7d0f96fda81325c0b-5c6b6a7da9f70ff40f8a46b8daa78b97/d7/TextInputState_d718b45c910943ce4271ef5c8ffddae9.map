{"version":3,"sources":["TextInputState.js"],"names":["Platform","require","UIManager","TextInputState","_currentlyFocusedID","currentlyFocusedField","focusTextInput","textFieldID","OS","focus","dispatchViewManagerCommand","AndroidTextInput","Commands","blurTextInput","blur","module","exports"],"mappings":"AAaA,aAEA,GAAMA,UAAWC,OAAX,YAAN,CACA,GAAMC,WAAYD,OAAZ,aAAN,CAEA,GAAME,gBAAiB,CAIrBC,oBAAsB,IAJD,CAUrBC,sBAAuB,gCAAoB,CACzC,MAAO,MAAKD,mBAAZ,CACD,CAZoB,CAmBrBE,eAAgB,wBAASC,WAAT,CAA+B,CAC7C,GAAI,KAAKH,mBAAL,GAA6BG,WAA7B,EAA4CA,cAAgB,IAAhE,CAAsE,CACpE,KAAKH,mBAAL,CAA2BG,WAA3B,CACA,GAAIP,SAASQ,EAAT,GAAgB,KAApB,CAA2B,CACzBN,UAAUO,KAAV,CAAgBF,WAAhB,EACD,CAFD,IAEO,IAAIP,SAASQ,EAAT,GAAgB,SAApB,CAA+B,CACpCN,UAAUQ,0BAAV,CACEH,WADF,CAEEL,UAAUS,gBAAV,CAA2BC,QAA3B,CAAoCN,cAFtC,CAGE,IAHF,EAKD,CACF,CACF,CAhCoB,CAuCrBO,cAAe,uBAASN,WAAT,CAA+B,CAC5C,GAAI,KAAKH,mBAAL,GAA6BG,WAA7B,EAA4CA,cAAgB,IAAhE,CAAsE,CACpE,KAAKH,mBAAL,CAA2B,IAA3B,CACA,GAAIJ,SAASQ,EAAT,GAAgB,KAApB,CAA2B,CACzBN,UAAUY,IAAV,CAAeP,WAAf,EACD,CAFD,IAEO,IAAIP,SAASQ,EAAT,GAAgB,SAApB,CAA+B,CACpCN,UAAUQ,0BAAV,CACEH,WADF,CAEEL,UAAUS,gBAAV,CAA2BC,QAA3B,CAAoCC,aAFtC,CAGE,IAHF,EAKD,CACF,CACF,CApDoB,CAAvB,CAuDAE,OAAOC,OAAP,CAAiBb,cAAjB","file":"TextInputState.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule TextInputState\n * @flow\n *\n * This class is responsible for coordinating the \"focused\"\n * state for TextInputs. All calls relating to the keyboard\n * should be funneled through here\n */\n'use strict';\n\nconst Platform = require('Platform');\nconst UIManager = require('UIManager');\n\nconst TextInputState = {\n   /**\n   * Internal state\n   */\n  _currentlyFocusedID: (null: ?number),\n\n  /**\n   * Returns the ID of the currently focused text field, if one exists\n   * If no text field is focused it returns null\n   */\n  currentlyFocusedField: function(): ?number {\n    return this._currentlyFocusedID;\n  },\n\n  /**\n   * @param {number} TextInputID id of the text field to focus\n   * Focuses the specified text field\n   * noop if the text field was already focused\n   */\n  focusTextInput: function(textFieldID: ?number) {\n    if (this._currentlyFocusedID !== textFieldID && textFieldID !== null) {\n      this._currentlyFocusedID = textFieldID;\n      if (Platform.OS === 'ios') {\n        UIManager.focus(textFieldID);\n      } else if (Platform.OS === 'android') {\n        UIManager.dispatchViewManagerCommand(\n          textFieldID,\n          UIManager.AndroidTextInput.Commands.focusTextInput,\n          null\n        );\n      }\n    }\n  },\n\n  /**\n   * @param {number} textFieldID id of the text field to unfocus\n   * Unfocuses the specified text field\n   * noop if it wasn't focused\n   */\n  blurTextInput: function(textFieldID: ?number) {\n    if (this._currentlyFocusedID === textFieldID && textFieldID !== null) {\n      this._currentlyFocusedID = null;\n      if (Platform.OS === 'ios') {\n        UIManager.blur(textFieldID);\n      } else if (Platform.OS === 'android') {\n        UIManager.dispatchViewManagerCommand(\n          textFieldID,\n          UIManager.AndroidTextInput.Commands.blurTextInput,\n          null\n        );\n      }\n    }\n  }\n};\n\nmodule.exports = TextInputState;\n"]}