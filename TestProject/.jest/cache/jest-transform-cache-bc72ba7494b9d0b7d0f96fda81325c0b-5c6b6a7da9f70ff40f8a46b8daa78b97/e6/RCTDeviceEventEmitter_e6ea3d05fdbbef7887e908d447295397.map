{"version":3,"sources":["RCTDeviceEventEmitter.js"],"names":["EventEmitter","require","EventSubscriptionVendor","checkNativeEventModule","eventType","lastIndexOf","Error","RCTDeviceEventEmitter","sharedSubscriber","listener","context","__DEV__","subscription","emitter","removeSubscription","module","exports"],"mappings":"AASA,a,4tDAEA,GAAMA,cAAeC,OAAf,gBAAN,CACA,GAAMC,yBAA0BD,OAA1B,2BAAN,CAIA,QAASE,uBAAT,CAAgCC,SAAhC,CAAoD,CAClD,GAAIA,SAAJ,CAAe,CACb,GAAIA,UAAUC,WAAV,CAAsB,WAAtB,CAAmC,CAAnC,IAA0C,CAA9C,CAAiD,CAC/C,KAAM,IAAIC,MAAJ,CAAU,IAAMF,SAAN,CAAkB,0DAA5B,CAAN,CACD,CACD,GAAIA,UAAUC,WAAV,CAAsB,UAAtB,CAAkC,CAAlC,IAAyC,CAA7C,CAAgD,CAC9C,KAAM,IAAIC,MAAJ,CAAU,IAAMF,SAAN,CAAkB,sDAA5B,CAAN,CACD,CACD,GAAIA,YAAc,mBAAd,EAAqCA,YAAc,eAAvD,CAAwE,CACtE,KAAM,IAAIE,MAAJ,CAAU,IAAMF,SAAN,CAAkB,sDAA5B,CAAN,CACD,CACF,CACF,C,GAMKG,sB,wEAIJ,gCAAc,6CACZ,GAAMC,kBAAmB,GAAIN,wBAAJ,EAAzB,CADY,oIAENM,gBAFM,GAGZ,MAAKA,gBAAL,CAAwBA,gBAAxB,CAHY,aAIb,C,kFAGWJ,S,CAAmBK,Q,CAAoBC,O,CAAuC,CACxF,GAAIC,OAAJ,CAAa,CACXR,uBAAuBC,SAAvB,EACD,CACD,4IAAyBA,SAAzB,CAAoCK,QAApC,CAA8CC,OAA9C,EACD,C,8DAEkBN,S,CAAoB,CACrC,GAAIO,OAAJ,CAAa,CACXR,uBAAuBC,SAAvB,EACD,CACD,4IAAyBA,SAAzB,EACD,C,8DAEkBQ,Y,CAAmC,CACpD,GAAIA,aAAaC,OAAb,GAAyB,IAA7B,CAAmC,CACjCD,aAAaC,OAAb,CAAqBC,kBAArB,CAAwCF,YAAxC,EACD,CAFD,IAEO,CACL,4IAAyBA,YAAzB,EACD,CACF,C,mCA/BiCZ,Y,EAkCpCe,OAAOC,OAAP,CAAiB,GAAIT,sBAAJ,EAAjB","file":"RCTDeviceEventEmitter.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule RCTDeviceEventEmitter\n * @flow\n */\n'use strict';\n\nconst EventEmitter = require('EventEmitter');\nconst EventSubscriptionVendor = require('EventSubscriptionVendor');\n\nimport type EmitterSubscription from 'EmitterSubscription';\n\nfunction checkNativeEventModule(eventType: ?string) {\n  if (eventType) {\n    if (eventType.lastIndexOf('statusBar', 0) === 0) {\n      throw new Error('`' + eventType + '` event should be registered via the StatusBarIOS module');\n    }\n    if (eventType.lastIndexOf('keyboard', 0) === 0) {\n      throw new Error('`' + eventType + '` event should be registered via the Keyboard module');\n    }\n    if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {\n      throw new Error('`' + eventType + '` event should be registered via the AppState module');\n    }\n  }\n}\n\n/**\n * Deprecated - subclass NativeEventEmitter to create granular event modules instead of\n * adding all event listeners directly to RCTDeviceEventEmitter.\n */\nclass RCTDeviceEventEmitter extends EventEmitter {\n\n  sharedSubscriber: EventSubscriptionVendor;\n\n  constructor() {\n    const sharedSubscriber = new EventSubscriptionVendor();\n    super(sharedSubscriber);\n    this.sharedSubscriber = sharedSubscriber;\n  }\n\n\n  addListener(eventType: string, listener: Function, context: ?Object): EmitterSubscription {\n    if (__DEV__) {\n      checkNativeEventModule(eventType);\n    }\n    return super.addListener(eventType, listener, context);\n  }\n\n  removeAllListeners(eventType: ?string) {\n    if (__DEV__) {\n      checkNativeEventModule(eventType);\n    }\n    super.removeAllListeners(eventType);\n  }\n\n  removeSubscription(subscription: EmitterSubscription) {\n    if (subscription.emitter !== this) {\n      subscription.emitter.removeSubscription(subscription);\n    } else {\n      super.removeSubscription(subscription);\n    }\n  }\n}\n\nmodule.exports = new RCTDeviceEventEmitter();\n"]}