{"version":3,"sources":["processTransform.js"],"names":["MatrixMath","require","Platform","invariant","stringifySafe","processTransform","transform","__DEV__","_validateTransforms","OS","result","createIdentityMatrix","forEach","key","Object","keys","transformation","value","multiplyInto","_multiplyTransform","reusePerspectiveCommand","reuseRotateXCommand","_convertToRadians","reuseRotateYCommand","reuseRotateZCommand","reuseScaleCommand","reuseScaleXCommand","reuseScaleYCommand","reuseTranslate3dCommand","reuseTranslate2dCommand","reuseSkewXCommand","reuseSkewYCommand","Error","matrixMathFunction","args","matrixToApply","argsWithIdentity","concat","apply","floatValue","parseFloat","indexOf","Math","PI","length","_validateTransform","getValue","multivalueTransforms","Array","isArray","module","exports"],"mappings":"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","file":"processTransform.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule processTransform\n * @flow\n */\n'use strict';\n\nvar MatrixMath = require('MatrixMath');\nvar Platform = require('Platform');\n\nvar invariant = require('fbjs/lib/invariant');\nvar stringifySafe = require('stringifySafe');\n\n/**\n * Generate a transform matrix based on the provided transforms, and use that\n * within the style object instead.\n *\n * This allows us to provide an API that is similar to CSS, where transforms may\n * be applied in an arbitrary order, and yet have a universal, singular\n * interface to native code.\n */\nfunction processTransform(transform: Array<Object>): Array<Object> | Array<number> {\n  if (__DEV__) {\n    _validateTransforms(transform);\n  }\n\n  // Android & iOS implementations of transform property accept the list of\n  // transform properties as opposed to a transform Matrix. This is necessary\n  // to control transform property updates completely on the native thread.\n  if (Platform.OS === 'android' || Platform.OS === 'ios') {\n    return transform;\n  }\n\n  var result = MatrixMath.createIdentityMatrix();\n\n  transform.forEach(transformation => {\n    var key = Object.keys(transformation)[0];\n    var value = transformation[key];\n\n    switch (key) {\n      case 'matrix':\n        MatrixMath.multiplyInto(result, result, value);\n        break;\n      case 'perspective':\n        _multiplyTransform(result, MatrixMath.reusePerspectiveCommand, [value]);\n        break;\n      case 'rotateX':\n        _multiplyTransform(result, MatrixMath.reuseRotateXCommand, [_convertToRadians(value)]);\n        break;\n      case 'rotateY':\n        _multiplyTransform(result, MatrixMath.reuseRotateYCommand, [_convertToRadians(value)]);\n        break;\n      case 'rotate':\n      case 'rotateZ':\n        _multiplyTransform(result, MatrixMath.reuseRotateZCommand, [_convertToRadians(value)]);\n        break;\n      case 'scale':\n        _multiplyTransform(result, MatrixMath.reuseScaleCommand, [value]);\n        break;\n      case 'scaleX':\n        _multiplyTransform(result, MatrixMath.reuseScaleXCommand, [value]);\n        break;\n      case 'scaleY':\n        _multiplyTransform(result, MatrixMath.reuseScaleYCommand, [value]);\n        break;\n      case 'translate':\n        _multiplyTransform(result, MatrixMath.reuseTranslate3dCommand, [value[0], value[1], value[2] || 0]);\n        break;\n      case 'translateX':\n        _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [value, 0]);\n        break;\n      case 'translateY':\n        _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [0, value]);\n        break;\n      case 'skewX':\n        _multiplyTransform(result, MatrixMath.reuseSkewXCommand, [_convertToRadians(value)]);\n        break;\n      case 'skewY':\n        _multiplyTransform(result, MatrixMath.reuseSkewYCommand, [_convertToRadians(value)]);\n        break;\n      default:\n        throw new Error('Invalid transform name: ' + key);\n    }\n  });\n\n  return result;\n}\n\n/**\n * Performs a destructive operation on a transform matrix.\n */\nfunction _multiplyTransform(\n  result: Array<number>,\n  matrixMathFunction: Function,\n  args: Array<number>\n): void {\n  var matrixToApply = MatrixMath.createIdentityMatrix();\n  var argsWithIdentity = [matrixToApply].concat(args);\n  matrixMathFunction.apply(this, argsWithIdentity);\n  MatrixMath.multiplyInto(result, result, matrixToApply);\n}\n\n/**\n * Parses a string like '0.5rad' or '60deg' into radians expressed in a float.\n * Note that validation on the string is done in `_validateTransform()`.\n */\nfunction _convertToRadians(value: string): number {\n  var floatValue = parseFloat(value);\n  return value.indexOf('rad') > -1 ? floatValue : floatValue * Math.PI / 180;\n}\n\nfunction _validateTransforms(transform: Array<Object>): void {\n  transform.forEach(transformation => {\n    var keys = Object.keys(transformation);\n    invariant(\n      keys.length === 1,\n      'You must specify exactly one property per transform object. Passed properties: %s',\n      stringifySafe(transformation),\n    );\n    var key = keys[0];\n    var value = transformation[key];\n    _validateTransform(key, value, transformation);\n  });\n}\n\nfunction _validateTransform(key, value, transformation) {\n  invariant(\n    !value.getValue,\n    'You passed an Animated.Value to a normal component. ' +\n    'You need to wrap that component in an Animated. For example, ' +\n    'replace <View /> by <Animated.View />.'\n  );\n\n  var multivalueTransforms = [\n    'matrix',\n    'translate',\n  ];\n  if (multivalueTransforms.indexOf(key) !== -1) {\n    invariant(\n      Array.isArray(value),\n      'Transform with key of %s must have an array as the value: %s',\n      key,\n      stringifySafe(transformation),\n    );\n  }\n  switch (key) {\n    case 'matrix':\n      invariant(\n        value.length === 9 || value.length === 16,\n        'Matrix transform must have a length of 9 (2d) or 16 (3d). ' +\n          'Provided matrix has a length of %s: %s',\n        value.length,\n        stringifySafe(transformation),\n      );\n      break;\n    case 'translate':\n      invariant(\n        value.length === 2 || value.length === 3,\n        'Transform with key translate must be an array of length 2 or 3, found %s: %s',\n        value.length,\n        stringifySafe(transformation),\n      );\n      break;\n    case 'rotateX':\n    case 'rotateY':\n    case 'rotateZ':\n    case 'rotate':\n    case 'skewX':\n    case 'skewY':\n      invariant(\n        typeof value === 'string',\n        'Transform with key of \"%s\" must be a string: %s',\n        key,\n        stringifySafe(transformation),\n      );\n      invariant(\n        value.indexOf('deg') > -1 || value.indexOf('rad') > -1,\n        'Rotate transform must be expressed in degrees (deg) or radians ' +\n          '(rad): %s',\n        stringifySafe(transformation),\n      );\n      break;\n    case 'perspective':\n      invariant(\n        typeof value === 'number',\n        'Transform with key of \"%s\" must be a number: %s',\n        key,\n        stringifySafe(transformation),\n      );\n      invariant(\n        value !== 0,\n        'Transform with key of \"%s\" cannot be zero: %s',\n        key,\n        stringifySafe(transformation),\n      );\n      break;\n    case 'translateX':\n    case 'translateY':\n    case 'scale':\n    case 'scaleX':\n    case 'scaleY':\n      invariant(\n        typeof value === 'number',\n        'Transform with key of \"%s\" must be a number: %s',\n        key,\n        stringifySafe(transformation),\n      );\n      break;\n    default:\n      invariant(false, 'Invalid transform %s: %s', key, stringifySafe(transformation));\n  }\n}\n\nmodule.exports = processTransform;\n"]}