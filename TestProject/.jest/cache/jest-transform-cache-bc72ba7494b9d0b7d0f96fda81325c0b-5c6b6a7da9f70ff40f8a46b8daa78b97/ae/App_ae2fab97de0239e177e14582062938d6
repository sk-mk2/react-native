ce76217205c853bfb2f6e15d2be97c93
"use strict";

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result["default"] = mod;
  return result;
};

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const react_1 = __importStar(require("react")); //これらはそれぞれreact-nativeが提供しているコンポーネント


const react_native_1 = require("react-native"); //native-base
//UI用フレームワークbootstrap的な
//typescriptにしたら動かんぞ


const native_base_1 = require("native-base");

const Nelu_1 = __importDefault(require("./components/Nelu"));

const Random_js_1 = __importDefault(require("./components/Random.js"));

const react_navigation_1 = require("react-navigation");

const Style_1 = __importDefault(require("./components/Style")); //名前付きexportはimportする際その名前でしかimportできない
//default export は好きな名前でimportできる


const componentsList = [{
  key: 'Nelu',
  title: 'ねる画像'
}, {
  key: 'Random',
  title: '乱数取得アプリ'
}];

class Lists extends react_1.Component {
  render() {
    return react_1.default.createElement(native_base_1.Container, null, react_1.default.createElement(native_base_1.Header, null, react_1.default.createElement(native_base_1.Body, null, react_1.default.createElement(native_base_1.H2, null, "React-Native Tutrial"))), react_1.default.createElement(native_base_1.Content, null, react_1.default.createElement(native_base_1.List, {
      dataArray: componentsList,
      renderRow: item => react_1.default.createElement(native_base_1.ListItem, null, react_1.default.createElement(native_base_1.Left, null, react_1.default.createElement(react_native_1.TouchableOpacity, {
        onPress: () => this.props.navigation.navigate(item.key)
      }, react_1.default.createElement(native_base_1.Text, {
        style: Style_1.default.textUp
      }, item.title))), react_1.default.createElement(native_base_1.Right, null, react_1.default.createElement(react_native_1.TouchableOpacity, {
        onPress: () => this.props.navigation.navigate(item.key)
      }, react_1.default.createElement(native_base_1.Icon, {
        type: 'Entypo',
        name: 'chevron-right'
      }))))
    })));
  }

}

const RootStack = react_navigation_1.createStackNavigator({
  Nelu: {
    screen: Nelu_1.default
  },
  Lists: {
    screen: Lists
  },
  Random: {
    screen: Random_js_1.default
  }
}, {
  initialRouteName: 'Lists'
}); //他にも各種ボタン、リスト表示とか用のコンポーネントもある
//httpRequestはfetchAPIを使うのが一般的？axiosとかでも
//react-native自体にその機能はないっぽい
//WebSocketも使える,これもwebAPI使ってアクセスするっぽい
//react-navigatorというので画面遷移は簡単にできる

class App extends react_1.Component {
  render() {
    return react_1.default.createElement(RootStack, null);
  }

}

exports.default = App; //# sourceMappingURL=App.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TTtBQUNGLFdBQ0ksUUFBQSxPQUFBLENBQUEsYUFBQSxDQUFDLFNBQUQsRUFBVSxJQUFWLENBREo7QUFHSDs7QUFMcUM7O0FBQTFDLFFBQUEsT0FBQSxHQUFBLEdBQUEsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG4vL+OBk+OCjOOCieOBr+OBneOCjOOBnuOCjHJlYWN0LW5hdGl2ZeOBjOaPkOS+m+OBl+OBpuOBhOOCi+OCs+ODs+ODneODvOODjeODs+ODiFxuaW1wb3J0IHsgVG91Y2hhYmxlT3BhY2l0eSAsIEZsYXRMaXN0LCBWaWV3fSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuLy9uYXRpdmUtYmFzZVxuLy9VSeeUqOODleODrOODvOODoOODr+ODvOOCr2Jvb3RzdHJhcOeahOOBqlxuLy90eXBlc2NyaXB044Gr44GX44Gf44KJ5YuV44GL44KT44GeXG5pbXBvcnQge1xuICAgIENvbnRhaW5lcixcbiAgICBIZWFkZXIsXG4gICAgVGl0bGUsXG4gICAgQ29udGVudCxcbiAgICBGb290ZXIsXG4gICAgQnV0dG9uLFxuICAgIExlZnQsXG4gICAgUmlnaHQsXG4gICAgQm9keSxcbiAgICBJY29uLFxuICAgIExpc3QsXG4gICAgTGlzdEl0ZW0sXG4gICAgSDIsXG4gICAgVGV4dFxufSBmcm9tICduYXRpdmUtYmFzZSc7XG5pbXBvcnQgTmVsdSBmcm9tICcuL2NvbXBvbmVudHMvTmVsdSc7XG5pbXBvcnQgUmFuZG9tIGZyb20gJy4vY29tcG9uZW50cy9SYW5kb20uanMnO1xuaW1wb3J0IHsgY3JlYXRlU3RhY2tOYXZpZ2F0b3IgfSBmcm9tICdyZWFjdC1uYXZpZ2F0aW9uJztcbmltcG9ydCBTdHlsZSBmcm9tICcuL2NvbXBvbmVudHMvU3R5bGUnO1xuXG4vL+WQjeWJjeS7mOOBjWV4cG9ydOOBr2ltcG9ydOOBmeOCi+mam+OBneOBruWQjeWJjeOBp+OBl+OBi2ltcG9ydOOBp+OBjeOBquOBhFxuLy9kZWZhdWx0IGV4cG9ydCDjga/lpb3jgY3jgarlkI3liY3jgadpbXBvcnTjgafjgY3jgotcbmNvbnN0IGNvbXBvbmVudHNMaXN0ID0gW1xuICAgIHsga2V5OiAnTmVsdScgLFxuICAgICAgdGl0bGU6ICfjga3jgovnlLvlg48nfSxcbiAgICB7IGtleTogJ1JhbmRvbScgLFxuICAgICAgdGl0bGU6ICfkubHmlbDlj5blvpfjgqLjg5fjg6onfSxcbl07XG5cbi8vcHJvcHPjga7opoHntKDjgavli5XnmoTjgatuYXZpZ2F0ZeOCkui/veWKoOOBl+OBpuOBhOOCi+OBi+OCiVRT44Gu5aC05ZCIXG4vL+S6i+WJjeOBq+eUqOaEj+OBl+OBquOBhOOBqOOBhOOBkeOBquOBhO+8n1xuaW50ZXJmYWNlIFByb3BzIHtcbiAgICBuYXZpZ2F0aW9uOiB7XG4gICAgICAgIG5hdmlnYXRlOmFueVxuICAgIH1cbn1cblxuY2xhc3MgTGlzdHMgZXh0ZW5kcyBDb21wb25lbnQ8UHJvcHM+e1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxDb250YWluZXI+XG4gICAgICAgICAgICAgICAgPEhlYWRlcj5cbiAgICAgICAgICAgICAgICA8Qm9keT5cbiAgICAgICAgICAgICAgICA8SDI+XG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LU5hdGl2ZSBUdXRyaWFsXG4gICAgICAgICAgICAgICAgPC9IMj5cbiAgICAgICAgICAgICAgICA8L0JvZHk+XG4gICAgICAgICAgICAgICAgPC9IZWFkZXI+XG5cbiAgICAgICAgICAgICAgPENvbnRlbnQ+ICBcbiAgICAgICAgICAgICAgICA8TGlzdFxuICAgICAgICAgICAgICAgICAgICBkYXRhQXJyYXkgPXtjb21wb25lbnRzTGlzdH1cbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyUm93PXsoaXRlbSkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPExpc3RJdGVtPlxuICAgICAgICAgICAgICAgICAgICAgICAgPExlZnQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUb3VjaGFibGVPcGFjaXR5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzPXsoKSA9PiB0aGlzLnByb3BzLm5hdmlnYXRpb24ubmF2aWdhdGUoaXRlbS5rZXkpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dCBzdHlsZT17U3R5bGUudGV4dFVwfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aXRlbS50aXRsZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvTGVmdD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UmlnaHQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUb3VjaGFibGVPcGFjaXR5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzPXsoKSA9PiB0aGlzLnByb3BzLm5hdmlnYXRpb24ubmF2aWdhdGUoaXRlbS5rZXkpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SWNvbiB0eXBlPSdFbnR5cG8nIG5hbWU9J2NoZXZyb24tcmlnaHQnIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9SaWdodD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTGlzdEl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDwvTGlzdD5cbiAgICAgICAgICAgICAgICA8L0NvbnRlbnQ+XG4gICAgICAgICAgICA8L0NvbnRhaW5lcj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmNvbnN0IFJvb3RTdGFjayA9IGNyZWF0ZVN0YWNrTmF2aWdhdG9yKHtcbiAgICBOZWx1OiB7XG4gICAgICAgIHNjcmVlbjogTmVsdSxcbiAgICB9LFxuICAgIExpc3RzOiB7XG4gICAgICAgIHNjcmVlbjogTGlzdHNcbiAgICB9LFxuICAgIFJhbmRvbToge1xuICAgICAgICBzY3JlZW46IFJhbmRvbVxuICAgIH0sXG59LCB7XG4gICAgaW5pdGlhbFJvdXRlTmFtZTogJ0xpc3RzJ1xufSk7XG5cbi8v5LuW44Gr44KC5ZCE56iu44Oc44K/44Oz44CB44Oq44K544OI6KGo56S644Go44GL55So44Gu44Kz44Oz44Od44O844ON44Oz44OI44KC44GC44KLXG4vL2h0dHBSZXF1ZXN044GvZmV0Y2hBUEnjgpLkvb/jgYbjga7jgYzkuIDoiKznmoTvvJ9heGlvc+OBqOOBi+OBp+OCglxuLy9yZWFjdC1uYXRpdmXoh6rkvZPjgavjgZ3jga7mqZ/og73jga/jgarjgYTjgaPjgb3jgYRcbi8vV2ViU29ja2V044KC5L2/44GI44KLLOOBk+OCjOOCgndlYkFQSeS9v+OBo+OBpuOCouOCr+OCu+OCueOBmeOCi+OBo+OBveOBhFxuLy9yZWFjdC1uYXZpZ2F0b3LjgajjgYTjgYbjga7jgafnlLvpnaLpgbfnp7vjga/nsKHljZjjgavjgafjgY3jgotcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBwIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Um9vdFN0YWNrIC8+XG4gICAgICAgICk7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==