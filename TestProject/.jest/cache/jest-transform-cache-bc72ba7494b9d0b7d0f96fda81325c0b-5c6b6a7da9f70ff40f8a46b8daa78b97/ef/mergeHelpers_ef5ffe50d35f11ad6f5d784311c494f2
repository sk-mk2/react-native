eb4231881d610e5bb145cb0a41faa94d
'use strict';var invariant=require('fbjs/lib/invariant');var MAX_MERGE_DEPTH=36;var isTerminal=function isTerminal(o){return typeof o!=='object'||o instanceof Date||o===null;};var mergeHelpers={MAX_MERGE_DEPTH:MAX_MERGE_DEPTH,isTerminal:isTerminal,normalizeMergeArg:function normalizeMergeArg(arg){return arg===undefined||arg===null?{}:arg;},checkMergeArrayArgs:function checkMergeArrayArgs(one,two){invariant(Array.isArray(one)&&Array.isArray(two),'Tried to merge arrays, instead got %s and %s.',one,two);},checkMergeObjectArgs:function checkMergeObjectArgs(one,two){mergeHelpers.checkMergeObjectArg(one);mergeHelpers.checkMergeObjectArg(two);},checkMergeObjectArg:function checkMergeObjectArg(arg){invariant(!isTerminal(arg)&&!Array.isArray(arg),'Tried to merge an object, instead got %s.',arg);},checkMergeIntoObjectArg:function checkMergeIntoObjectArg(arg){invariant((!isTerminal(arg)||typeof arg==='function')&&!Array.isArray(arg),'Tried to merge into an object, instead got %s.',arg);},checkMergeLevel:function checkMergeLevel(level){invariant(level<MAX_MERGE_DEPTH,'Maximum deep merge depth exceeded. You may be attempting to merge '+'circular structures in an unsupported way.');},checkArrayStrategy:function checkArrayStrategy(strategy){invariant(strategy===undefined||strategy in mergeHelpers.ArrayStrategies,'You must provide an array strategy to deep merge functions to '+'instruct the deep merge how to resolve merging two arrays.');},ArrayStrategies:{Clobber:'Clobber',Concat:'Concat',IndexByIndex:'IndexByIndex'}};module.exports=mergeHelpers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lcmdlSGVscGVycy5qcyJdLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJyZXF1aXJlIiwiTUFYX01FUkdFX0RFUFRIIiwiaXNUZXJtaW5hbCIsIm8iLCJEYXRlIiwibWVyZ2VIZWxwZXJzIiwibm9ybWFsaXplTWVyZ2VBcmciLCJhcmciLCJ1bmRlZmluZWQiLCJjaGVja01lcmdlQXJyYXlBcmdzIiwib25lIiwidHdvIiwiQXJyYXkiLCJpc0FycmF5IiwiY2hlY2tNZXJnZU9iamVjdEFyZ3MiLCJjaGVja01lcmdlT2JqZWN0QXJnIiwiY2hlY2tNZXJnZUludG9PYmplY3RBcmciLCJjaGVja01lcmdlTGV2ZWwiLCJsZXZlbCIsImNoZWNrQXJyYXlTdHJhdGVneSIsInN0cmF0ZWd5IiwiQXJyYXlTdHJhdGVnaWVzIiwiQ2xvYmJlciIsIkNvbmNhdCIsIkluZGV4QnlJbmRleCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVdBLGFBRUEsR0FBSUEsV0FBWUMsT0FBWixzQkFBSixDQU1BLEdBQUlDLGlCQUFrQixFQUF0QixDQVFBLEdBQUlDLFlBQWEsUUFBYkEsV0FBYSxDQUFTQyxDQUFULENBQVksQ0FDM0IsTUFBTyxPQUFPQSxFQUFQLEdBQWEsUUFBYixFQUF5QkEsWUFBYUMsS0FBdEMsRUFBOENELElBQU0sSUFBM0QsQ0FDRCxDQUZELENBSUEsR0FBSUUsY0FBZSxDQUVqQkosZ0JBQWlCQSxlQUZBLENBSWpCQyxXQUFZQSxVQUpLLENBWWpCSSxrQkFBbUIsMkJBQVNDLEdBQVQsQ0FBYyxDQUMvQixNQUFPQSxPQUFRQyxTQUFSLEVBQXFCRCxNQUFRLElBQTdCLENBQW9DLEVBQXBDLENBQXlDQSxHQUFoRCxDQUNELENBZGdCLENBd0JqQkUsb0JBQXFCLDZCQUFTQyxHQUFULENBQWNDLEdBQWQsQ0FBbUIsQ0FDdENaLFVBQ0VhLE1BQU1DLE9BQU4sQ0FBY0gsR0FBZCxHQUFzQkUsTUFBTUMsT0FBTixDQUFjRixHQUFkLENBRHhCLENBRUUsK0NBRkYsQ0FHRUQsR0FIRixDQUlFQyxHQUpGLEVBTUQsQ0EvQmdCLENBcUNqQkcscUJBQXNCLDhCQUFTSixHQUFULENBQWNDLEdBQWQsQ0FBbUIsQ0FDdkNOLGFBQWFVLG1CQUFiLENBQWlDTCxHQUFqQyxFQUNBTCxhQUFhVSxtQkFBYixDQUFpQ0osR0FBakMsRUFDRCxDQXhDZ0IsQ0E2Q2pCSSxvQkFBcUIsNkJBQVNSLEdBQVQsQ0FBYyxDQUNqQ1IsVUFDRSxDQUFDRyxXQUFXSyxHQUFYLENBQUQsRUFBb0IsQ0FBQ0ssTUFBTUMsT0FBTixDQUFjTixHQUFkLENBRHZCLENBRUUsMkNBRkYsQ0FHRUEsR0FIRixFQUtELENBbkRnQixDQXdEakJTLHdCQUF5QixpQ0FBU1QsR0FBVCxDQUFjLENBQ3JDUixVQUNFLENBQUMsQ0FBQ0csV0FBV0ssR0FBWCxDQUFELEVBQW9CLE1BQU9BLElBQVAsR0FBZSxVQUFwQyxHQUFtRCxDQUFDSyxNQUFNQyxPQUFOLENBQWNOLEdBQWQsQ0FEdEQsQ0FFRSxnREFGRixDQUdFQSxHQUhGLEVBS0QsQ0E5RGdCLENBc0VqQlUsZ0JBQWlCLHlCQUFTQyxLQUFULENBQWdCLENBQy9CbkIsVUFDRW1CLE1BQVFqQixlQURWLENBRUUscUVBQ0EsNENBSEYsRUFLRCxDQTVFZ0IsQ0FtRmpCa0IsbUJBQW9CLDRCQUFTQyxRQUFULENBQW1CLENBQ3JDckIsVUFDRXFCLFdBQWFaLFNBQWIsRUFBMEJZLFdBQVlmLGNBQWFnQixlQURyRCxDQUVFLGlFQUNBLDREQUhGLEVBS0QsQ0F6RmdCLENBa0dqQkEsZ0JBQWlCLENBQ2ZDLFFBQVMsU0FETSxDQUVmQyxPQUFRLFFBRk8sQ0FHZkMsYUFBYyxjQUhDLENBbEdBLENBQW5CLENBMEdBQyxPQUFPQyxPQUFQLENBQWlCckIsWUFBakIiLCJmaWxlIjoibWVyZ2VIZWxwZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgbWVyZ2VIZWxwZXJzXG4gKlxuICogcmVxdWlyZXNQb2x5ZmlsbHM6IEFycmF5LmlzQXJyYXlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBNYXhpbXVtIG51bWJlciBvZiBsZXZlbHMgdG8gdHJhdmVyc2UuIFdpbGwgY2F0Y2ggY2lyY3VsYXIgc3RydWN0dXJlcy5cbiAqIEBjb25zdFxuICovXG52YXIgTUFYX01FUkdFX0RFUFRIID0gMzY7XG5cbi8qKlxuICogV2Ugd29uJ3Qgd29ycnkgYWJvdXQgZWRnZSBjYXNlcyBsaWtlIG5ldyBTdHJpbmcoJ3gnKSBvciBuZXcgQm9vbGVhbih0cnVlKS5cbiAqIEZ1bmN0aW9ucyBhbmQgRGF0ZXMgYXJlIGNvbnNpZGVyZWQgdGVybWluYWxzLCBhbmQgYXJyYXlzIGFyZSBub3QuXG4gKiBAcGFyYW0geyp9IG8gVGhlIGl0ZW0vb2JqZWN0L3ZhbHVlIHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmZiB0aGUgYXJndW1lbnQgaXMgYSB0ZXJtaW5hbC5cbiAqL1xudmFyIGlzVGVybWluYWwgPSBmdW5jdGlvbihvKSB7XG4gIHJldHVybiB0eXBlb2YgbyAhPT0gJ29iamVjdCcgfHwgbyBpbnN0YW5jZW9mIERhdGUgfHwgbyA9PT0gbnVsbDtcbn07XG5cbnZhciBtZXJnZUhlbHBlcnMgPSB7XG5cbiAgTUFYX01FUkdFX0RFUFRIOiBNQVhfTUVSR0VfREVQVEgsXG5cbiAgaXNUZXJtaW5hbDogaXNUZXJtaW5hbCxcblxuICAvKipcbiAgICogQ29udmVydHMgbnVsbC91bmRlZmluZWQgdmFsdWVzIGludG8gZW1wdHkgb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0gez9PYmplY3Q9fSBhcmcgQXJndW1lbnQgdG8gYmUgbm9ybWFsaXplZCAobnVsbGFibGUgb3B0aW9uYWwpXG4gICAqIEByZXR1cm4geyFPYmplY3R9XG4gICAqL1xuICBub3JtYWxpemVNZXJnZUFyZzogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyA9PT0gdW5kZWZpbmVkIHx8IGFyZyA9PT0gbnVsbCA/IHt9IDogYXJnO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJZiBtZXJnaW5nIEFycmF5cywgYSBtZXJnZSBzdHJhdGVneSAqbXVzdCogYmUgc3VwcGxpZWQuIElmIG5vdCwgaXQgaXNcbiAgICogbGlrZWx5IHRoZSBjYWxsZXIncyBmYXVsdC4gSWYgdGhpcyBmdW5jdGlvbiBpcyBldmVyIGNhbGxlZCB3aXRoIGFueXRoaW5nXG4gICAqIGJ1dCBgb25lYCBhbmQgYHR3b2AgYmVpbmcgYEFycmF5YHMsIGl0IGlzIHRoZSBmYXVsdCBvZiB0aGUgbWVyZ2UgdXRpbGl0aWVzLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IG9uZSBBcnJheSB0byBtZXJnZSBpbnRvLlxuICAgKiBAcGFyYW0geyp9IHR3byBBcnJheSB0byBtZXJnZSBmcm9tLlxuICAgKi9cbiAgY2hlY2tNZXJnZUFycmF5QXJnczogZnVuY3Rpb24ob25lLCB0d28pIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBBcnJheS5pc0FycmF5KG9uZSkgJiYgQXJyYXkuaXNBcnJheSh0d28pLFxuICAgICAgJ1RyaWVkIHRvIG1lcmdlIGFycmF5cywgaW5zdGVhZCBnb3QgJXMgYW5kICVzLicsXG4gICAgICBvbmUsXG4gICAgICB0d29cbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyp9IG9uZSBPYmplY3QgdG8gbWVyZ2UgaW50by5cbiAgICogQHBhcmFtIHsqfSB0d28gT2JqZWN0IHRvIG1lcmdlIGZyb20uXG4gICAqL1xuICBjaGVja01lcmdlT2JqZWN0QXJnczogZnVuY3Rpb24ob25lLCB0d28pIHtcbiAgICBtZXJnZUhlbHBlcnMuY2hlY2tNZXJnZU9iamVjdEFyZyhvbmUpO1xuICAgIG1lcmdlSGVscGVycy5jaGVja01lcmdlT2JqZWN0QXJnKHR3byk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Kn0gYXJnXG4gICAqL1xuICBjaGVja01lcmdlT2JqZWN0QXJnOiBmdW5jdGlvbihhcmcpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICAhaXNUZXJtaW5hbChhcmcpICYmICFBcnJheS5pc0FycmF5KGFyZyksXG4gICAgICAnVHJpZWQgdG8gbWVyZ2UgYW4gb2JqZWN0LCBpbnN0ZWFkIGdvdCAlcy4nLFxuICAgICAgYXJnXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHsqfSBhcmdcbiAgICovXG4gIGNoZWNrTWVyZ2VJbnRvT2JqZWN0QXJnOiBmdW5jdGlvbihhcmcpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICAoIWlzVGVybWluYWwoYXJnKSB8fCB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nKSAmJiAhQXJyYXkuaXNBcnJheShhcmcpLFxuICAgICAgJ1RyaWVkIHRvIG1lcmdlIGludG8gYW4gb2JqZWN0LCBpbnN0ZWFkIGdvdCAlcy4nLFxuICAgICAgYXJnXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2tzIHRoYXQgYSBtZXJnZSB3YXMgbm90IGdpdmVuIGEgY2lyY3VsYXIgb2JqZWN0IG9yIGFuIG9iamVjdCB0aGF0IGhhZFxuICAgKiB0b28gZ3JlYXQgb2YgZGVwdGguXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBMZXZlbCBvZiByZWN1cnNpb24gdG8gdmFsaWRhdGUgYWdhaW5zdCBtYXhpbXVtLlxuICAgKi9cbiAgY2hlY2tNZXJnZUxldmVsOiBmdW5jdGlvbihsZXZlbCkge1xuICAgIGludmFyaWFudChcbiAgICAgIGxldmVsIDwgTUFYX01FUkdFX0RFUFRILFxuICAgICAgJ01heGltdW0gZGVlcCBtZXJnZSBkZXB0aCBleGNlZWRlZC4gWW91IG1heSBiZSBhdHRlbXB0aW5nIHRvIG1lcmdlICcgK1xuICAgICAgJ2NpcmN1bGFyIHN0cnVjdHVyZXMgaW4gYW4gdW5zdXBwb3J0ZWQgd2F5LidcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhhdCB0aGUgc3VwcGxpZWQgbWVyZ2Ugc3RyYXRlZ3kgaXMgdmFsaWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBBcnJheSBtZXJnZSBzdHJhdGVneS5cbiAgICovXG4gIGNoZWNrQXJyYXlTdHJhdGVneTogZnVuY3Rpb24oc3RyYXRlZ3kpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBzdHJhdGVneSA9PT0gdW5kZWZpbmVkIHx8IHN0cmF0ZWd5IGluIG1lcmdlSGVscGVycy5BcnJheVN0cmF0ZWdpZXMsXG4gICAgICAnWW91IG11c3QgcHJvdmlkZSBhbiBhcnJheSBzdHJhdGVneSB0byBkZWVwIG1lcmdlIGZ1bmN0aW9ucyB0byAnICtcbiAgICAgICdpbnN0cnVjdCB0aGUgZGVlcCBtZXJnZSBob3cgdG8gcmVzb2x2ZSBtZXJnaW5nIHR3byBhcnJheXMuJ1xuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldCBvZiBwb3NzaWJsZSBiZWhhdmlvcnMgb2YgbWVyZ2UgYWxnb3JpdGhtcyB3aGVuIGVuY291bnRlcmluZyB0d28gQXJyYXlzXG4gICAqIHRoYXQgbXVzdCBiZSBtZXJnZWQgdG9nZXRoZXIuXG4gICAqIC0gYGNsb2JiZXJgOiBUaGUgbGVmdCBgQXJyYXlgIGlzIGlnbm9yZWQuXG4gICAqIC0gYGluZGV4QnlJbmRleGA6IFRoZSByZXN1bHQgaXMgYWNoaWV2ZWQgYnkgcmVjdXJzaXZlbHkgZGVlcCBtZXJnaW5nIGF0XG4gICAqICAgZWFjaCBpbmRleC4gKG5vdCB5ZXQgc3VwcG9ydGVkLilcbiAgICovXG4gIEFycmF5U3RyYXRlZ2llczoge1xuICAgIENsb2JiZXI6ICdDbG9iYmVyJyxcbiAgICBDb25jYXQ6ICdDb25jYXQnLFxuICAgIEluZGV4QnlJbmRleDogJ0luZGV4QnlJbmRleCcsXG4gIH0sXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbWVyZ2VIZWxwZXJzO1xuIl19