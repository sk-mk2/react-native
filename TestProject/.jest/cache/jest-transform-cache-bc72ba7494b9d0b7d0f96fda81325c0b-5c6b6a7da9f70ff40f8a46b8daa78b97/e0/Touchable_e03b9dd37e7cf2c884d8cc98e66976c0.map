{"version":3,"sources":["Touchable.js"],"names":["BoundingDimensions","require","Platform","Position","React","ReactNative","TVEventHandler","TouchEventUtils","UIManager","View","keyMirror","normalizeColor","States","NOT_RESPONDER","RESPONDER_INACTIVE_PRESS_IN","RESPONDER_INACTIVE_PRESS_OUT","RESPONDER_ACTIVE_PRESS_IN","RESPONDER_ACTIVE_PRESS_OUT","RESPONDER_ACTIVE_LONG_PRESS_IN","RESPONDER_ACTIVE_LONG_PRESS_OUT","ERROR","IsActive","IsPressingIn","IsLongPressingIn","Signals","DELAY","RESPONDER_GRANT","RESPONDER_RELEASE","RESPONDER_TERMINATED","ENTER_PRESS_RECT","LEAVE_PRESS_RECT","LONG_PRESS_DETECTED","Transitions","error","HIGHLIGHT_DELAY_MS","PRESS_EXPAND_PX","LONG_PRESS_THRESHOLD","LONG_PRESS_DELAY_MS","LONG_PRESS_ALLOWED_MOVEMENT","TouchableMixin","componentDidMount","isTV","_tvEventHandler","enable","cmp","evt","myTag","findNodeHandle","dispatchConfig","tag","eventType","touchableHandleActivePressIn","touchableHandleActivePressOut","touchableHandlePress","props","disabled","componentWillUnmount","disable","touchableDelayTimeout","clearTimeout","longPressDelayTimeout","pressOutDelayTimeout","touchableGetInitialState","touchable","touchState","undefined","responderID","touchableHandleResponderTerminationRequest","rejectResponderTermination","touchableHandleStartShouldSetResponder","touchableLongPressCancelsPress","touchableHandleResponderGrant","e","dispatchID","currentTarget","persist","state","_receiveSignal","delayMS","touchableGetHighlightDelayMS","Math","max","isNaN","setTimeout","_handleDelay","bind","longDelayMS","touchableGetLongPressDelayMS","_handleLongDelay","touchableHandleResponderRelease","touchableHandleResponderTerminate","touchableHandleResponderMove","positionOnActivate","dimensionsOnActivate","pressRectOffset","touchableGetPressRectOffset","left","right","top","bottom","pressExpandLeft","pressExpandTop","pressExpandRight","pressExpandBottom","hitSlop","touchableGetHitSlop","touch","extractSingleTouch","nativeEvent","pageX","pageY","pressInLocation","movedDistance","_getDistanceBetweenPoints","_cancelLongPressDelayTimeout","isTouchWithinActive","width","height","curState","_remeasureMetricsOnActivation","measure","_handleQueryLayout","l","t","w","h","globalX","globalY","release","getPooled","console","signal","nextState","Error","_performSideEffectsForTransition","_isHighlight","_savePressInLocation","locationX","locationY","aX","aY","bX","bY","deltaX","deltaY","sqrt","curIsHighlight","newIsHighlight","isFinalSignal","touchableHandleLongPress","_startHighlight","_endHighlight","hasLongPressHandler","onLongPress","pressIsLongButStillCallOnPress","shouldInvokePress","touchableGetPressOutDelayMS","Touchable","Mixin","TOUCH_TARGET_DEBUG","renderDebugView","color","__DEV__","debugHitSlopStyle","key","hexColor","toString","substr","position","borderColor","slice","borderWidth","borderStyle","backgroundColor","module","exports"],"mappings":"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","file":"Touchable.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule Touchable\n */\n\n'use strict';\n\nconst BoundingDimensions = require('BoundingDimensions');\nconst Platform = require('Platform');\nconst Position = require('Position');\nconst React = require('React');\nconst ReactNative = require('ReactNative');\nconst TVEventHandler = require('TVEventHandler');\nconst TouchEventUtils = require('fbjs/lib/TouchEventUtils');\nconst UIManager = require('UIManager');\nconst View = require('View');\n\nconst keyMirror = require('fbjs/lib/keyMirror');\nconst normalizeColor = require('normalizeColor');\n\n/**\n * `Touchable`: Taps done right.\n *\n * You hook your `ResponderEventPlugin` events into `Touchable`. `Touchable`\n * will measure time/geometry and tells you when to give feedback to the user.\n *\n * ====================== Touchable Tutorial ===============================\n * The `Touchable` mixin helps you handle the \"press\" interaction. It analyzes\n * the geometry of elements, and observes when another responder (scroll view\n * etc) has stolen the touch lock. It notifies your component when it should\n * give feedback to the user. (bouncing/highlighting/unhighlighting).\n *\n * - When a touch was activated (typically you highlight)\n * - When a touch was deactivated (typically you unhighlight)\n * - When a touch was \"pressed\" - a touch ended while still within the geometry\n *   of the element, and no other element (like scroller) has \"stolen\" touch\n *   lock (\"responder\") (Typically you bounce the element).\n *\n * A good tap interaction isn't as simple as you might think. There should be a\n * slight delay before showing a highlight when starting a touch. If a\n * subsequent touch move exceeds the boundary of the element, it should\n * unhighlight, but if that same touch is brought back within the boundary, it\n * should rehighlight again. A touch can move in and out of that boundary\n * several times, each time toggling highlighting, but a \"press\" is only\n * triggered if that touch ends while within the element's boundary and no\n * scroller (or anything else) has stolen the lock on touches.\n *\n * To create a new type of component that handles interaction using the\n * `Touchable` mixin, do the following:\n *\n * - Initialize the `Touchable` state.\n *\n *   getInitialState: function() {\n *     return merge(this.touchableGetInitialState(), yourComponentState);\n *   }\n *\n * - Choose the rendered component who's touches should start the interactive\n *   sequence. On that rendered node, forward all `Touchable` responder\n *   handlers. You can choose any rendered node you like. Choose a node whose\n *   hit target you'd like to instigate the interaction sequence:\n *\n *   // In render function:\n *   return (\n *     <View\n *       onStartShouldSetResponder={this.touchableHandleStartShouldSetResponder}\n *       onResponderTerminationRequest={this.touchableHandleResponderTerminationRequest}\n *       onResponderGrant={this.touchableHandleResponderGrant}\n *       onResponderMove={this.touchableHandleResponderMove}\n *       onResponderRelease={this.touchableHandleResponderRelease}\n *       onResponderTerminate={this.touchableHandleResponderTerminate}>\n *       <View>\n *         Even though the hit detection/interactions are triggered by the\n *         wrapping (typically larger) node, we usually end up implementing\n *         custom logic that highlights this inner one.\n *       </View>\n *     </View>\n *   );\n *\n * - You may set up your own handlers for each of these events, so long as you\n *   also invoke the `touchable*` handlers inside of your custom handler.\n *\n * - Implement the handlers on your component class in order to provide\n *   feedback to the user. See documentation for each of these class methods\n *   that you should implement.\n *\n *   touchableHandlePress: function() {\n *      this.performBounceAnimation();  // or whatever you want to do.\n *   },\n *   touchableHandleActivePressIn: function() {\n *     this.beginHighlighting(...);  // Whatever you like to convey activation\n *   },\n *   touchableHandleActivePressOut: function() {\n *     this.endHighlighting(...);  // Whatever you like to convey deactivation\n *   },\n *\n * - There are more advanced methods you can implement (see documentation below):\n *   touchableGetHighlightDelayMS: function() {\n *     return 20;\n *   }\n *   // In practice, *always* use a predeclared constant (conserve memory).\n *   touchableGetPressRectOffset: function() {\n *     return {top: 20, left: 20, right: 20, bottom: 100};\n *   }\n */\n\n/**\n * Touchable states.\n */\nconst States = keyMirror({\n  NOT_RESPONDER: null,                   // Not the responder\n  RESPONDER_INACTIVE_PRESS_IN: null,     // Responder, inactive, in the `PressRect`\n  RESPONDER_INACTIVE_PRESS_OUT: null,    // Responder, inactive, out of `PressRect`\n  RESPONDER_ACTIVE_PRESS_IN: null,       // Responder, active, in the `PressRect`\n  RESPONDER_ACTIVE_PRESS_OUT: null,      // Responder, active, out of `PressRect`\n  RESPONDER_ACTIVE_LONG_PRESS_IN: null,  // Responder, active, in the `PressRect`, after long press threshold\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: null, // Responder, active, out of `PressRect`, after long press threshold\n  ERROR: null\n});\n\n/**\n * Quick lookup map for states that are considered to be \"active\"\n */\nconst IsActive = {\n  RESPONDER_ACTIVE_PRESS_OUT: true,\n  RESPONDER_ACTIVE_PRESS_IN: true\n};\n\n/**\n * Quick lookup for states that are considered to be \"pressing\" and are\n * therefore eligible to result in a \"selection\" if the press stops.\n */\nconst IsPressingIn = {\n  RESPONDER_INACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true,\n};\n\nconst IsLongPressingIn = {\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true,\n};\n\n/**\n * Inputs to the state machine.\n */\nconst Signals = keyMirror({\n  DELAY: null,\n  RESPONDER_GRANT: null,\n  RESPONDER_RELEASE: null,\n  RESPONDER_TERMINATED: null,\n  ENTER_PRESS_RECT: null,\n  LEAVE_PRESS_RECT: null,\n  LONG_PRESS_DETECTED: null,\n});\n\n/**\n * Mapping from States x Signals => States\n */\nconst Transitions = {\n  NOT_RESPONDER: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.ERROR,\n    RESPONDER_TERMINATED: States.ERROR,\n    ENTER_PRESS_RECT: States.ERROR,\n    LEAVE_PRESS_RECT: States.ERROR,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_INACTIVE_PRESS_IN: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_INACTIVE_PRESS_OUT: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_ACTIVE_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n  },\n  RESPONDER_ACTIVE_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  error: {\n    DELAY: States.NOT_RESPONDER,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.NOT_RESPONDER,\n    LEAVE_PRESS_RECT: States.NOT_RESPONDER,\n    LONG_PRESS_DETECTED: States.NOT_RESPONDER,\n  }\n};\n\n// ==== Typical Constants for integrating into UI components ====\n// var HIT_EXPAND_PX = 20;\n// var HIT_VERT_OFFSET_PX = 10;\nconst HIGHLIGHT_DELAY_MS = 130;\n\nconst PRESS_EXPAND_PX = 20;\n\nconst LONG_PRESS_THRESHOLD = 500;\n\nconst LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;\n\nconst LONG_PRESS_ALLOWED_MOVEMENT = 10;\n\n// Default amount \"active\" region protrudes beyond box\n\n/**\n * By convention, methods prefixed with underscores are meant to be @private,\n * and not @protected. Mixers shouldn't access them - not even to provide them\n * as callback handlers.\n *\n *\n * ========== Geometry =========\n * `Touchable` only assumes that there exists a `HitRect` node. The `PressRect`\n * is an abstract box that is extended beyond the `HitRect`.\n *\n *  +--------------------------+\n *  |                          | - \"Start\" events in `HitRect` cause `HitRect`\n *  |  +--------------------+  |   to become the responder.\n *  |  |  +--------------+  |  | - `HitRect` is typically expanded around\n *  |  |  |              |  |  |   the `VisualRect`, but shifted downward.\n *  |  |  |  VisualRect  |  |  | - After pressing down, after some delay,\n *  |  |  |              |  |  |   and before letting up, the Visual React\n *  |  |  +--------------+  |  |   will become \"active\". This makes it eligible\n *  |  |     HitRect        |  |   for being highlighted (so long as the\n *  |  +--------------------+  |   press remains in the `PressRect`).\n *  |        PressRect     o   |\n *  +----------------------|---+\n *           Out Region    |\n *                         +-----+ This gap between the `HitRect` and\n *                                 `PressRect` allows a touch to move far away\n *                                 from the original hit rect, and remain\n *                                 highlighted, and eligible for a \"Press\".\n *                                 Customize this via\n *                                 `touchableGetPressRectOffset()`.\n *\n *\n *\n * ======= State Machine =======\n *\n * +-------------+ <---+ RESPONDER_RELEASE\n * |NOT_RESPONDER|\n * +-------------+ <---+ RESPONDER_TERMINATED\n *     +\n *     | RESPONDER_GRANT (HitRect)\n *     v\n * +---------------------------+  DELAY   +-------------------------+  T + DELAY     +------------------------------+\n * |RESPONDER_INACTIVE_PRESS_IN|+-------->|RESPONDER_ACTIVE_PRESS_IN| +------------> |RESPONDER_ACTIVE_LONG_PRESS_IN|\n * +---------------------------+          +-------------------------+                +------------------------------+\n *     +            ^                         +           ^                                 +           ^\n *     |LEAVE_      |ENTER_                   |LEAVE_     |ENTER_                           |LEAVE_     |ENTER_\n *     |PRESS_RECT  |PRESS_RECT               |PRESS_RECT |PRESS_RECT                       |PRESS_RECT |PRESS_RECT\n *     |            |                         |           |                                 |           |\n *     v            +                         v           +                                 v           +\n * +----------------------------+  DELAY  +--------------------------+               +-------------------------------+\n * |RESPONDER_INACTIVE_PRESS_OUT|+------->|RESPONDER_ACTIVE_PRESS_OUT|               |RESPONDER_ACTIVE_LONG_PRESS_OUT|\n * +----------------------------+         +--------------------------+               +-------------------------------+\n *\n * T + DELAY => LONG_PRESS_DELAY_MS + DELAY\n *\n * Not drawn are the side effects of each transition. The most important side\n * effect is the `touchableHandlePress` abstract method invocation that occurs\n * when a responder is released while in either of the \"Press\" states.\n *\n * The other important side effects are the highlight abstract method\n * invocations (internal callbacks) to be implemented by the mixer.\n *\n *\n * @lends Touchable.prototype\n */\nconst TouchableMixin = {\n  componentDidMount: function() {\n    if (!Platform.isTV) {\n      return;\n    }\n\n    this._tvEventHandler = new TVEventHandler();\n    this._tvEventHandler.enable(this, function(cmp, evt) {\n      const myTag = ReactNative.findNodeHandle(cmp);\n      evt.dispatchConfig = {};\n      if (myTag === evt.tag) {\n        if (evt.eventType === 'focus') {\n          cmp.touchableHandleActivePressIn && cmp.touchableHandleActivePressIn(evt);\n        } else if (evt.eventType === 'blur') {\n          cmp.touchableHandleActivePressOut && cmp.touchableHandleActivePressOut(evt);\n        } else if (evt.eventType === 'select') {\n          cmp.touchableHandlePress && !cmp.props.disabled && cmp.touchableHandlePress(evt);\n        }\n      }\n    });\n  },\n\n  /**\n   * Clear all timeouts on unmount\n   */\n  componentWillUnmount: function() {\n    if (this._tvEventHandler) {\n      this._tvEventHandler.disable();\n      delete this._tvEventHandler;\n    }\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n  },\n\n  /**\n   * It's prefer that mixins determine state in this way, having the class\n   * explicitly mix the state in the one and only `getInitialState` method.\n   *\n   * @return {object} State object to be placed inside of\n   * `this.state.touchable`.\n   */\n  touchableGetInitialState: function() {\n    return {\n      touchable: {touchState: undefined, responderID: null}\n    };\n  },\n\n  // ==== Hooks to Gesture Responder system ====\n  /**\n   * Must return true if embedded in a native platform scroll view.\n   */\n  touchableHandleResponderTerminationRequest: function() {\n    return !this.props.rejectResponderTermination;\n  },\n\n  /**\n   * Must return true to start the process of `Touchable`.\n   */\n  touchableHandleStartShouldSetResponder: function() {\n    return !this.props.disabled;\n  },\n\n  /**\n   * Return true to cancel press on long press.\n   */\n  touchableLongPressCancelsPress: function () {\n    return true;\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderGrant` event.\n   * @param {SyntheticEvent} e Synthetic event from event system.\n   *\n   */\n  touchableHandleResponderGrant: function(e) {\n    const dispatchID = e.currentTarget;\n    // Since e is used in a callback invoked on another event loop\n    // (as in setTimeout etc), we need to call e.persist() on the\n    // event to make sure it doesn't get reused in the event object pool.\n    e.persist();\n\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n    this.pressOutDelayTimeout = null;\n\n    this.state.touchable.touchState = States.NOT_RESPONDER;\n    this.state.touchable.responderID = dispatchID;\n    this._receiveSignal(Signals.RESPONDER_GRANT, e);\n    let delayMS =\n      this.touchableGetHighlightDelayMS !== undefined ?\n      Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;\n    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;\n    if (delayMS !== 0) {\n      this.touchableDelayTimeout = setTimeout(\n        this._handleDelay.bind(this, e),\n        delayMS\n      );\n    } else {\n      this._handleDelay(e);\n    }\n\n    let longDelayMS =\n      this.touchableGetLongPressDelayMS !== undefined ?\n      Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;\n    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;\n    this.longPressDelayTimeout = setTimeout(\n      this._handleLongDelay.bind(this, e),\n      longDelayMS + delayMS\n    );\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderRelease` event.\n   */\n  touchableHandleResponderRelease: function(e) {\n    this._receiveSignal(Signals.RESPONDER_RELEASE, e);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderTerminate` event.\n   */\n  touchableHandleResponderTerminate: function(e) {\n    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderMove` event.\n   */\n  touchableHandleResponderMove: function(e) {\n    // Not enough time elapsed yet, wait for highlight -\n    // this is just a perf optimization.\n    if (this.state.touchable.touchState === States.RESPONDER_INACTIVE_PRESS_IN) {\n      return;\n    }\n\n    // Measurement may not have returned yet.\n    if (!this.state.touchable.positionOnActivate) {\n      return;\n    }\n\n    const positionOnActivate = this.state.touchable.positionOnActivate;\n    const dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;\n    const pressRectOffset = this.touchableGetPressRectOffset ?\n      this.touchableGetPressRectOffset() : {\n        left: PRESS_EXPAND_PX,\n        right: PRESS_EXPAND_PX,\n        top: PRESS_EXPAND_PX,\n        bottom: PRESS_EXPAND_PX\n      };\n\n    let pressExpandLeft = pressRectOffset.left;\n    let pressExpandTop = pressRectOffset.top;\n    let pressExpandRight = pressRectOffset.right;\n    let pressExpandBottom = pressRectOffset.bottom;\n\n    const hitSlop = this.touchableGetHitSlop ?\n      this.touchableGetHitSlop() : null;\n\n    if (hitSlop) {\n      pressExpandLeft += hitSlop.left;\n      pressExpandTop += hitSlop.top;\n      pressExpandRight += hitSlop.right;\n      pressExpandBottom += hitSlop.bottom;\n    }\n\n    const touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);\n    const pageX = touch && touch.pageX;\n    const pageY = touch && touch.pageY;\n\n    if (this.pressInLocation) {\n      const movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);\n      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {\n        this._cancelLongPressDelayTimeout();\n      }\n    }\n\n    const isTouchWithinActive =\n        pageX > positionOnActivate.left - pressExpandLeft &&\n        pageY > positionOnActivate.top - pressExpandTop &&\n        pageX <\n          positionOnActivate.left +\n          dimensionsOnActivate.width +\n          pressExpandRight &&\n        pageY <\n          positionOnActivate.top +\n          dimensionsOnActivate.height +\n          pressExpandBottom;\n    if (isTouchWithinActive) {\n      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);\n      const curState = this.state.touchable.touchState;\n      if (curState === States.RESPONDER_INACTIVE_PRESS_IN) {\n        // fix for t7967420\n        this._cancelLongPressDelayTimeout();\n      }\n    } else {\n      this._cancelLongPressDelayTimeout();\n      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);\n    }\n  },\n\n  // ==== Abstract Application Callbacks ====\n\n  /**\n   * Invoked when the item should be highlighted. Mixers should implement this\n   * to visually distinguish the `VisualRect` so that the user knows that\n   * releasing a touch will result in a \"selection\" (analog to click).\n   *\n   * @abstract\n   * touchableHandleActivePressIn: function,\n   */\n\n  /**\n   * Invoked when the item is \"active\" (in that it is still eligible to become\n   * a \"select\") but the touch has left the `PressRect`. Usually the mixer will\n   * want to unhighlight the `VisualRect`. If the user (while pressing) moves\n   * back into the `PressRect` `touchableHandleActivePressIn` will be invoked\n   * again and the mixer should probably highlight the `VisualRect` again. This\n   * event will not fire on an `touchEnd/mouseUp` event, only move events while\n   * the user is depressing the mouse/touch.\n   *\n   * @abstract\n   * touchableHandleActivePressOut: function\n   */\n\n  /**\n   * Invoked when the item is \"selected\" - meaning the interaction ended by\n   * letting up while the item was either in the state\n   * `RESPONDER_ACTIVE_PRESS_IN` or `RESPONDER_INACTIVE_PRESS_IN`.\n   *\n   * @abstract\n   * touchableHandlePress: function\n   */\n\n  /**\n   * Invoked when the item is long pressed - meaning the interaction ended by\n   * letting up while the item was in `RESPONDER_ACTIVE_LONG_PRESS_IN`. If\n   * `touchableHandleLongPress` is *not* provided, `touchableHandlePress` will\n   * be called as it normally is. If `touchableHandleLongPress` is provided, by\n   * default any `touchableHandlePress` callback will not be invoked. To\n   * override this default behavior, override `touchableLongPressCancelsPress`\n   * to return false. As a result, `touchableHandlePress` will be called when\n   * lifting up, even if `touchableHandleLongPress` has also been called.\n   *\n   * @abstract\n   * touchableHandleLongPress: function\n   */\n\n  /**\n   * Returns the number of millis to wait before triggering a highlight.\n   *\n   * @abstract\n   * touchableGetHighlightDelayMS: function\n   */\n\n  /**\n   * Returns the amount to extend the `HitRect` into the `PressRect`. Positive\n   * numbers mean the size expands outwards.\n   *\n   * @abstract\n   * touchableGetPressRectOffset: function\n   */\n\n\n\n  // ==== Internal Logic ====\n\n  /**\n   * Measures the `HitRect` node on activation. The Bounding rectangle is with\n   * respect to viewport - not page, so adding the `pageXOffset/pageYOffset`\n   * should result in points that are in the same coordinate system as an\n   * event's `globalX/globalY` data values.\n   *\n   * - Consider caching this for the lifetime of the component, or possibly\n   *   being able to share this cache between any `ScrollMap` view.\n   *\n   * @sideeffects\n   * @private\n   */\n  _remeasureMetricsOnActivation: function() {\n    const tag = this.state.touchable.responderID;\n    if (tag == null) {\n      return;\n    }\n\n    UIManager.measure(tag, this._handleQueryLayout);\n  },\n\n  _handleQueryLayout: function(l, t, w, h, globalX, globalY) {\n    //don't do anything UIManager failed to measure node\n    if (!l && !t && !w && !h && !globalX && !globalY) {\n      return;\n    }\n    this.state.touchable.positionOnActivate &&\n      Position.release(this.state.touchable.positionOnActivate);\n    this.state.touchable.dimensionsOnActivate &&\n      BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);\n    this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY);\n    this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(w, h);\n  },\n\n  _handleDelay: function(e) {\n    this.touchableDelayTimeout = null;\n    this._receiveSignal(Signals.DELAY, e);\n  },\n\n  _handleLongDelay: function(e) {\n    this.longPressDelayTimeout = null;\n    const curState = this.state.touchable.touchState;\n    if (curState !== States.RESPONDER_ACTIVE_PRESS_IN &&\n        curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {\n      console.error('Attempted to transition from state `' + curState + '` to `' +\n        States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' +\n        'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');\n    } else {\n      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);\n    }\n  },\n\n  /**\n   * Receives a state machine signal, performs side effects of the transition\n   * and stores the new state. Validates the transition as well.\n   *\n   * @param {Signals} signal State machine signal.\n   * @throws Error if invalid state transition or unrecognized signal.\n   * @sideeffects\n   */\n  _receiveSignal: function(signal, e) {\n    const responderID = this.state.touchable.responderID;\n    const curState = this.state.touchable.touchState;\n    const nextState = Transitions[curState] && Transitions[curState][signal];\n    if (!responderID && signal === Signals.RESPONDER_RELEASE) {\n      return;\n    }\n    if (!nextState) {\n      throw new Error(\n        'Unrecognized signal `' + signal + '` or state `' + curState +\n        '` for Touchable responder `' + responderID + '`'\n      );\n    }\n    if (nextState === States.ERROR) {\n      throw new Error(\n        'Touchable cannot transition from `' + curState + '` to `' + signal +\n        '` for responder `' + responderID + '`'\n      );\n    }\n    if (curState !== nextState) {\n      this._performSideEffectsForTransition(curState, nextState, signal, e);\n      this.state.touchable.touchState = nextState;\n    }\n  },\n\n  _cancelLongPressDelayTimeout: function () {\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.longPressDelayTimeout = null;\n  },\n\n  _isHighlight: function (state) {\n    return state === States.RESPONDER_ACTIVE_PRESS_IN ||\n           state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;\n  },\n\n  _savePressInLocation: function(e) {\n    const touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);\n    const pageX = touch && touch.pageX;\n    const pageY = touch && touch.pageY;\n    const locationX = touch && touch.locationX;\n    const locationY = touch && touch.locationY;\n    this.pressInLocation = {pageX, pageY, locationX, locationY};\n  },\n\n  _getDistanceBetweenPoints: function (aX, aY, bX, bY) {\n    const deltaX = aX - bX;\n    const deltaY = aY - bY;\n    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  },\n\n  /**\n   * Will perform a transition between touchable states, and identify any\n   * highlighting or unhighlighting that must be performed for this particular\n   * transition.\n   *\n   * @param {States} curState Current Touchable state.\n   * @param {States} nextState Next Touchable state.\n   * @param {Signal} signal Signal that triggered the transition.\n   * @param {Event} e Native event.\n   * @sideeffects\n   */\n  _performSideEffectsForTransition: function(curState, nextState, signal, e) {\n    const curIsHighlight = this._isHighlight(curState);\n    const newIsHighlight = this._isHighlight(nextState);\n\n    const isFinalSignal =\n      signal === Signals.RESPONDER_TERMINATED ||\n      signal === Signals.RESPONDER_RELEASE;\n\n    if (isFinalSignal) {\n      this._cancelLongPressDelayTimeout();\n    }\n\n    if (!IsActive[curState] && IsActive[nextState]) {\n      this._remeasureMetricsOnActivation();\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {\n      this.touchableHandleLongPress && this.touchableHandleLongPress(e);\n    }\n\n    if (newIsHighlight && !curIsHighlight) {\n      this._startHighlight(e);\n    } else if (!newIsHighlight && curIsHighlight) {\n      this._endHighlight(e);\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {\n      const hasLongPressHandler = !!this.props.onLongPress;\n      const pressIsLongButStillCallOnPress =\n        IsLongPressingIn[curState] && (    // We *are* long pressing..\n          (// But either has no long handler\n          !hasLongPressHandler || !this.touchableLongPressCancelsPress()) // or we're told to ignore it.\n        );\n\n      const shouldInvokePress =  !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;\n      if (shouldInvokePress && this.touchableHandlePress) {\n        if (!newIsHighlight && !curIsHighlight) {\n          // we never highlighted because of delay, but we should highlight now\n          this._startHighlight(e);\n          this._endHighlight(e);\n        }\n        this.touchableHandlePress(e);\n      }\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.touchableDelayTimeout = null;\n  },\n\n  _startHighlight: function(e) {\n    this._savePressInLocation(e);\n    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);\n  },\n\n  _endHighlight: function(e) {\n    if (this.touchableHandleActivePressOut) {\n      if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {\n        this.pressOutDelayTimeout = setTimeout(() => {\n          this.touchableHandleActivePressOut(e);\n        }, this.touchableGetPressOutDelayMS());\n      } else {\n        this.touchableHandleActivePressOut(e);\n      }\n    }\n  },\n\n};\n\nconst Touchable = {\n  Mixin: TouchableMixin,\n  TOUCH_TARGET_DEBUG: false, // Highlights all touchable targets. Toggle with Inspector.\n  /**\n   * Renders a debugging overlay to visualize touch target with hitSlop (might not work on Android).\n   */\n  renderDebugView: ({color, hitSlop}) => {\n    if (!Touchable.TOUCH_TARGET_DEBUG) {\n      return null;\n    }\n    if (!__DEV__) {\n      throw Error('Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!');\n    }\n    const debugHitSlopStyle = {};\n    hitSlop = hitSlop || {top: 0, bottom: 0, left: 0, right: 0};\n    for (const key in hitSlop) {\n      debugHitSlopStyle[key] = -hitSlop[key];\n    }\n    const hexColor = '#' + ('00000000' + normalizeColor(color).toString(16)).substr(-8);\n    return (\n      <View\n        pointerEvents=\"none\"\n        style={{\n          position: 'absolute',\n          borderColor: hexColor.slice(0, -2) + '55', // More opaque\n          borderWidth: 1,\n          borderStyle: 'dashed',\n          backgroundColor: hexColor.slice(0, -2) + '0F', // Less opaque\n          ...debugHitSlopStyle\n        }}\n      />\n    );\n  }\n};\n\nmodule.exports = Touchable;\n"]}