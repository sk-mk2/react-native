6c676ca52e38978b07449aac612b0c50
'use strict';var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var BoundingDimensions=require('BoundingDimensions');var Platform=require('Platform');var Position=require('Position');var React=require('React');var ReactNative=require('ReactNative');var TVEventHandler=require('TVEventHandler');var TouchEventUtils=require('fbjs/lib/TouchEventUtils');var UIManager=require('UIManager');var View=require('View');var keyMirror=require('fbjs/lib/keyMirror');var normalizeColor=require('normalizeColor');var States=keyMirror({NOT_RESPONDER:null,RESPONDER_INACTIVE_PRESS_IN:null,RESPONDER_INACTIVE_PRESS_OUT:null,RESPONDER_ACTIVE_PRESS_IN:null,RESPONDER_ACTIVE_PRESS_OUT:null,RESPONDER_ACTIVE_LONG_PRESS_IN:null,RESPONDER_ACTIVE_LONG_PRESS_OUT:null,ERROR:null});var IsActive={RESPONDER_ACTIVE_PRESS_OUT:true,RESPONDER_ACTIVE_PRESS_IN:true};var IsPressingIn={RESPONDER_INACTIVE_PRESS_IN:true,RESPONDER_ACTIVE_PRESS_IN:true,RESPONDER_ACTIVE_LONG_PRESS_IN:true};var IsLongPressingIn={RESPONDER_ACTIVE_LONG_PRESS_IN:true};var Signals=keyMirror({DELAY:null,RESPONDER_GRANT:null,RESPONDER_RELEASE:null,RESPONDER_TERMINATED:null,ENTER_PRESS_RECT:null,LEAVE_PRESS_RECT:null,LONG_PRESS_DETECTED:null});var Transitions={NOT_RESPONDER:{DELAY:States.ERROR,RESPONDER_GRANT:States.RESPONDER_INACTIVE_PRESS_IN,RESPONDER_RELEASE:States.ERROR,RESPONDER_TERMINATED:States.ERROR,ENTER_PRESS_RECT:States.ERROR,LEAVE_PRESS_RECT:States.ERROR,LONG_PRESS_DETECTED:States.ERROR},RESPONDER_INACTIVE_PRESS_IN:{DELAY:States.RESPONDER_ACTIVE_PRESS_IN,RESPONDER_GRANT:States.ERROR,RESPONDER_RELEASE:States.NOT_RESPONDER,RESPONDER_TERMINATED:States.NOT_RESPONDER,ENTER_PRESS_RECT:States.RESPONDER_INACTIVE_PRESS_IN,LEAVE_PRESS_RECT:States.RESPONDER_INACTIVE_PRESS_OUT,LONG_PRESS_DETECTED:States.ERROR},RESPONDER_INACTIVE_PRESS_OUT:{DELAY:States.RESPONDER_ACTIVE_PRESS_OUT,RESPONDER_GRANT:States.ERROR,RESPONDER_RELEASE:States.NOT_RESPONDER,RESPONDER_TERMINATED:States.NOT_RESPONDER,ENTER_PRESS_RECT:States.RESPONDER_INACTIVE_PRESS_IN,LEAVE_PRESS_RECT:States.RESPONDER_INACTIVE_PRESS_OUT,LONG_PRESS_DETECTED:States.ERROR},RESPONDER_ACTIVE_PRESS_IN:{DELAY:States.ERROR,RESPONDER_GRANT:States.ERROR,RESPONDER_RELEASE:States.NOT_RESPONDER,RESPONDER_TERMINATED:States.NOT_RESPONDER,ENTER_PRESS_RECT:States.RESPONDER_ACTIVE_PRESS_IN,LEAVE_PRESS_RECT:States.RESPONDER_ACTIVE_PRESS_OUT,LONG_PRESS_DETECTED:States.RESPONDER_ACTIVE_LONG_PRESS_IN},RESPONDER_ACTIVE_PRESS_OUT:{DELAY:States.ERROR,RESPONDER_GRANT:States.ERROR,RESPONDER_RELEASE:States.NOT_RESPONDER,RESPONDER_TERMINATED:States.NOT_RESPONDER,ENTER_PRESS_RECT:States.RESPONDER_ACTIVE_PRESS_IN,LEAVE_PRESS_RECT:States.RESPONDER_ACTIVE_PRESS_OUT,LONG_PRESS_DETECTED:States.ERROR},RESPONDER_ACTIVE_LONG_PRESS_IN:{DELAY:States.ERROR,RESPONDER_GRANT:States.ERROR,RESPONDER_RELEASE:States.NOT_RESPONDER,RESPONDER_TERMINATED:States.NOT_RESPONDER,ENTER_PRESS_RECT:States.RESPONDER_ACTIVE_LONG_PRESS_IN,LEAVE_PRESS_RECT:States.RESPONDER_ACTIVE_LONG_PRESS_OUT,LONG_PRESS_DETECTED:States.RESPONDER_ACTIVE_LONG_PRESS_IN},RESPONDER_ACTIVE_LONG_PRESS_OUT:{DELAY:States.ERROR,RESPONDER_GRANT:States.ERROR,RESPONDER_RELEASE:States.NOT_RESPONDER,RESPONDER_TERMINATED:States.NOT_RESPONDER,ENTER_PRESS_RECT:States.RESPONDER_ACTIVE_LONG_PRESS_IN,LEAVE_PRESS_RECT:States.RESPONDER_ACTIVE_LONG_PRESS_OUT,LONG_PRESS_DETECTED:States.ERROR},error:{DELAY:States.NOT_RESPONDER,RESPONDER_GRANT:States.RESPONDER_INACTIVE_PRESS_IN,RESPONDER_RELEASE:States.NOT_RESPONDER,RESPONDER_TERMINATED:States.NOT_RESPONDER,ENTER_PRESS_RECT:States.NOT_RESPONDER,LEAVE_PRESS_RECT:States.NOT_RESPONDER,LONG_PRESS_DETECTED:States.NOT_RESPONDER}};var HIGHLIGHT_DELAY_MS=130;var PRESS_EXPAND_PX=20;var LONG_PRESS_THRESHOLD=500;var LONG_PRESS_DELAY_MS=LONG_PRESS_THRESHOLD-HIGHLIGHT_DELAY_MS;var LONG_PRESS_ALLOWED_MOVEMENT=10;var TouchableMixin={componentDidMount:function componentDidMount(){if(!Platform.isTV){return;}this._tvEventHandler=new TVEventHandler();this._tvEventHandler.enable(this,function(cmp,evt){var myTag=ReactNative.findNodeHandle(cmp);evt.dispatchConfig={};if(myTag===evt.tag){if(evt.eventType==='focus'){cmp.touchableHandleActivePressIn&&cmp.touchableHandleActivePressIn(evt);}else if(evt.eventType==='blur'){cmp.touchableHandleActivePressOut&&cmp.touchableHandleActivePressOut(evt);}else if(evt.eventType==='select'){cmp.touchableHandlePress&&!cmp.props.disabled&&cmp.touchableHandlePress(evt);}}});},componentWillUnmount:function componentWillUnmount(){if(this._tvEventHandler){this._tvEventHandler.disable();delete this._tvEventHandler;}this.touchableDelayTimeout&&clearTimeout(this.touchableDelayTimeout);this.longPressDelayTimeout&&clearTimeout(this.longPressDelayTimeout);this.pressOutDelayTimeout&&clearTimeout(this.pressOutDelayTimeout);},touchableGetInitialState:function touchableGetInitialState(){return{touchable:{touchState:undefined,responderID:null}};},touchableHandleResponderTerminationRequest:function touchableHandleResponderTerminationRequest(){return!this.props.rejectResponderTermination;},touchableHandleStartShouldSetResponder:function touchableHandleStartShouldSetResponder(){return!this.props.disabled;},touchableLongPressCancelsPress:function touchableLongPressCancelsPress(){return true;},touchableHandleResponderGrant:function touchableHandleResponderGrant(e){var dispatchID=e.currentTarget;e.persist();this.pressOutDelayTimeout&&clearTimeout(this.pressOutDelayTimeout);this.pressOutDelayTimeout=null;this.state.touchable.touchState=States.NOT_RESPONDER;this.state.touchable.responderID=dispatchID;this._receiveSignal(Signals.RESPONDER_GRANT,e);var delayMS=this.touchableGetHighlightDelayMS!==undefined?Math.max(this.touchableGetHighlightDelayMS(),0):HIGHLIGHT_DELAY_MS;delayMS=isNaN(delayMS)?HIGHLIGHT_DELAY_MS:delayMS;if(delayMS!==0){this.touchableDelayTimeout=setTimeout(this._handleDelay.bind(this,e),delayMS);}else{this._handleDelay(e);}var longDelayMS=this.touchableGetLongPressDelayMS!==undefined?Math.max(this.touchableGetLongPressDelayMS(),10):LONG_PRESS_DELAY_MS;longDelayMS=isNaN(longDelayMS)?LONG_PRESS_DELAY_MS:longDelayMS;this.longPressDelayTimeout=setTimeout(this._handleLongDelay.bind(this,e),longDelayMS+delayMS);},touchableHandleResponderRelease:function touchableHandleResponderRelease(e){this._receiveSignal(Signals.RESPONDER_RELEASE,e);},touchableHandleResponderTerminate:function touchableHandleResponderTerminate(e){this._receiveSignal(Signals.RESPONDER_TERMINATED,e);},touchableHandleResponderMove:function touchableHandleResponderMove(e){if(this.state.touchable.touchState===States.RESPONDER_INACTIVE_PRESS_IN){return;}if(!this.state.touchable.positionOnActivate){return;}var positionOnActivate=this.state.touchable.positionOnActivate;var dimensionsOnActivate=this.state.touchable.dimensionsOnActivate;var pressRectOffset=this.touchableGetPressRectOffset?this.touchableGetPressRectOffset():{left:PRESS_EXPAND_PX,right:PRESS_EXPAND_PX,top:PRESS_EXPAND_PX,bottom:PRESS_EXPAND_PX};var pressExpandLeft=pressRectOffset.left;var pressExpandTop=pressRectOffset.top;var pressExpandRight=pressRectOffset.right;var pressExpandBottom=pressRectOffset.bottom;var hitSlop=this.touchableGetHitSlop?this.touchableGetHitSlop():null;if(hitSlop){pressExpandLeft+=hitSlop.left;pressExpandTop+=hitSlop.top;pressExpandRight+=hitSlop.right;pressExpandBottom+=hitSlop.bottom;}var touch=TouchEventUtils.extractSingleTouch(e.nativeEvent);var pageX=touch&&touch.pageX;var pageY=touch&&touch.pageY;if(this.pressInLocation){var movedDistance=this._getDistanceBetweenPoints(pageX,pageY,this.pressInLocation.pageX,this.pressInLocation.pageY);if(movedDistance>LONG_PRESS_ALLOWED_MOVEMENT){this._cancelLongPressDelayTimeout();}}var isTouchWithinActive=pageX>positionOnActivate.left-pressExpandLeft&&pageY>positionOnActivate.top-pressExpandTop&&pageX<positionOnActivate.left+dimensionsOnActivate.width+pressExpandRight&&pageY<positionOnActivate.top+dimensionsOnActivate.height+pressExpandBottom;if(isTouchWithinActive){this._receiveSignal(Signals.ENTER_PRESS_RECT,e);var curState=this.state.touchable.touchState;if(curState===States.RESPONDER_INACTIVE_PRESS_IN){this._cancelLongPressDelayTimeout();}}else{this._cancelLongPressDelayTimeout();this._receiveSignal(Signals.LEAVE_PRESS_RECT,e);}},_remeasureMetricsOnActivation:function _remeasureMetricsOnActivation(){var tag=this.state.touchable.responderID;if(tag==null){return;}UIManager.measure(tag,this._handleQueryLayout);},_handleQueryLayout:function _handleQueryLayout(l,t,w,h,globalX,globalY){if(!l&&!t&&!w&&!h&&!globalX&&!globalY){return;}this.state.touchable.positionOnActivate&&Position.release(this.state.touchable.positionOnActivate);this.state.touchable.dimensionsOnActivate&&BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);this.state.touchable.positionOnActivate=Position.getPooled(globalX,globalY);this.state.touchable.dimensionsOnActivate=BoundingDimensions.getPooled(w,h);},_handleDelay:function _handleDelay(e){this.touchableDelayTimeout=null;this._receiveSignal(Signals.DELAY,e);},_handleLongDelay:function _handleLongDelay(e){this.longPressDelayTimeout=null;var curState=this.state.touchable.touchState;if(curState!==States.RESPONDER_ACTIVE_PRESS_IN&&curState!==States.RESPONDER_ACTIVE_LONG_PRESS_IN){console.error('Attempted to transition from state `'+curState+'` to `'+States.RESPONDER_ACTIVE_LONG_PRESS_IN+'`, which is not supported. This is '+'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');}else{this._receiveSignal(Signals.LONG_PRESS_DETECTED,e);}},_receiveSignal:function _receiveSignal(signal,e){var responderID=this.state.touchable.responderID;var curState=this.state.touchable.touchState;var nextState=Transitions[curState]&&Transitions[curState][signal];if(!responderID&&signal===Signals.RESPONDER_RELEASE){return;}if(!nextState){throw new Error('Unrecognized signal `'+signal+'` or state `'+curState+'` for Touchable responder `'+responderID+'`');}if(nextState===States.ERROR){throw new Error('Touchable cannot transition from `'+curState+'` to `'+signal+'` for responder `'+responderID+'`');}if(curState!==nextState){this._performSideEffectsForTransition(curState,nextState,signal,e);this.state.touchable.touchState=nextState;}},_cancelLongPressDelayTimeout:function _cancelLongPressDelayTimeout(){this.longPressDelayTimeout&&clearTimeout(this.longPressDelayTimeout);this.longPressDelayTimeout=null;},_isHighlight:function _isHighlight(state){return state===States.RESPONDER_ACTIVE_PRESS_IN||state===States.RESPONDER_ACTIVE_LONG_PRESS_IN;},_savePressInLocation:function _savePressInLocation(e){var touch=TouchEventUtils.extractSingleTouch(e.nativeEvent);var pageX=touch&&touch.pageX;var pageY=touch&&touch.pageY;var locationX=touch&&touch.locationX;var locationY=touch&&touch.locationY;this.pressInLocation={pageX:pageX,pageY:pageY,locationX:locationX,locationY:locationY};},_getDistanceBetweenPoints:function _getDistanceBetweenPoints(aX,aY,bX,bY){var deltaX=aX-bX;var deltaY=aY-bY;return Math.sqrt(deltaX*deltaX+deltaY*deltaY);},_performSideEffectsForTransition:function _performSideEffectsForTransition(curState,nextState,signal,e){var curIsHighlight=this._isHighlight(curState);var newIsHighlight=this._isHighlight(nextState);var isFinalSignal=signal===Signals.RESPONDER_TERMINATED||signal===Signals.RESPONDER_RELEASE;if(isFinalSignal){this._cancelLongPressDelayTimeout();}if(!IsActive[curState]&&IsActive[nextState]){this._remeasureMetricsOnActivation();}if(IsPressingIn[curState]&&signal===Signals.LONG_PRESS_DETECTED){this.touchableHandleLongPress&&this.touchableHandleLongPress(e);}if(newIsHighlight&&!curIsHighlight){this._startHighlight(e);}else if(!newIsHighlight&&curIsHighlight){this._endHighlight(e);}if(IsPressingIn[curState]&&signal===Signals.RESPONDER_RELEASE){var hasLongPressHandler=!!this.props.onLongPress;var pressIsLongButStillCallOnPress=IsLongPressingIn[curState]&&(!hasLongPressHandler||!this.touchableLongPressCancelsPress());var shouldInvokePress=!IsLongPressingIn[curState]||pressIsLongButStillCallOnPress;if(shouldInvokePress&&this.touchableHandlePress){if(!newIsHighlight&&!curIsHighlight){this._startHighlight(e);this._endHighlight(e);}this.touchableHandlePress(e);}}this.touchableDelayTimeout&&clearTimeout(this.touchableDelayTimeout);this.touchableDelayTimeout=null;},_startHighlight:function _startHighlight(e){this._savePressInLocation(e);this.touchableHandleActivePressIn&&this.touchableHandleActivePressIn(e);},_endHighlight:function _endHighlight(e){var _this=this;if(this.touchableHandleActivePressOut){if(this.touchableGetPressOutDelayMS&&this.touchableGetPressOutDelayMS()){this.pressOutDelayTimeout=setTimeout(function(){_this.touchableHandleActivePressOut(e);},this.touchableGetPressOutDelayMS());}else{this.touchableHandleActivePressOut(e);}}}};var Touchable={Mixin:TouchableMixin,TOUCH_TARGET_DEBUG:false,renderDebugView:function renderDebugView(_ref){var color=_ref.color,hitSlop=_ref.hitSlop;if(!Touchable.TOUCH_TARGET_DEBUG){return null;}if(!__DEV__){throw Error('Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!');}var debugHitSlopStyle={};hitSlop=hitSlop||{top:0,bottom:0,left:0,right:0};for(var key in hitSlop){debugHitSlopStyle[key]=-hitSlop[key];}var hexColor='#'+('00000000'+normalizeColor(color).toString(16)).substr(-8);return React.createElement(View,{pointerEvents:'none',style:_extends({position:'absolute',borderColor:hexColor.slice(0,-2)+'55',borderWidth:1,borderStyle:'dashed',backgroundColor:hexColor.slice(0,-2)+'0F'},debugHitSlopStyle)});}};module.exports=Touchable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRvdWNoYWJsZS5qcyJdLCJuYW1lcyI6WyJCb3VuZGluZ0RpbWVuc2lvbnMiLCJyZXF1aXJlIiwiUGxhdGZvcm0iLCJQb3NpdGlvbiIsIlJlYWN0IiwiUmVhY3ROYXRpdmUiLCJUVkV2ZW50SGFuZGxlciIsIlRvdWNoRXZlbnRVdGlscyIsIlVJTWFuYWdlciIsIlZpZXciLCJrZXlNaXJyb3IiLCJub3JtYWxpemVDb2xvciIsIlN0YXRlcyIsIk5PVF9SRVNQT05ERVIiLCJSRVNQT05ERVJfSU5BQ1RJVkVfUFJFU1NfSU4iLCJSRVNQT05ERVJfSU5BQ1RJVkVfUFJFU1NfT1VUIiwiUkVTUE9OREVSX0FDVElWRV9QUkVTU19JTiIsIlJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfT1VUIiwiUkVTUE9OREVSX0FDVElWRV9MT05HX1BSRVNTX0lOIiwiUkVTUE9OREVSX0FDVElWRV9MT05HX1BSRVNTX09VVCIsIkVSUk9SIiwiSXNBY3RpdmUiLCJJc1ByZXNzaW5nSW4iLCJJc0xvbmdQcmVzc2luZ0luIiwiU2lnbmFscyIsIkRFTEFZIiwiUkVTUE9OREVSX0dSQU5UIiwiUkVTUE9OREVSX1JFTEVBU0UiLCJSRVNQT05ERVJfVEVSTUlOQVRFRCIsIkVOVEVSX1BSRVNTX1JFQ1QiLCJMRUFWRV9QUkVTU19SRUNUIiwiTE9OR19QUkVTU19ERVRFQ1RFRCIsIlRyYW5zaXRpb25zIiwiZXJyb3IiLCJISUdITElHSFRfREVMQVlfTVMiLCJQUkVTU19FWFBBTkRfUFgiLCJMT05HX1BSRVNTX1RIUkVTSE9MRCIsIkxPTkdfUFJFU1NfREVMQVlfTVMiLCJMT05HX1BSRVNTX0FMTE9XRURfTU9WRU1FTlQiLCJUb3VjaGFibGVNaXhpbiIsImNvbXBvbmVudERpZE1vdW50IiwiaXNUViIsIl90dkV2ZW50SGFuZGxlciIsImVuYWJsZSIsImNtcCIsImV2dCIsIm15VGFnIiwiZmluZE5vZGVIYW5kbGUiLCJkaXNwYXRjaENvbmZpZyIsInRhZyIsImV2ZW50VHlwZSIsInRvdWNoYWJsZUhhbmRsZUFjdGl2ZVByZXNzSW4iLCJ0b3VjaGFibGVIYW5kbGVBY3RpdmVQcmVzc091dCIsInRvdWNoYWJsZUhhbmRsZVByZXNzIiwicHJvcHMiLCJkaXNhYmxlZCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiZGlzYWJsZSIsInRvdWNoYWJsZURlbGF5VGltZW91dCIsImNsZWFyVGltZW91dCIsImxvbmdQcmVzc0RlbGF5VGltZW91dCIsInByZXNzT3V0RGVsYXlUaW1lb3V0IiwidG91Y2hhYmxlR2V0SW5pdGlhbFN0YXRlIiwidG91Y2hhYmxlIiwidG91Y2hTdGF0ZSIsInVuZGVmaW5lZCIsInJlc3BvbmRlcklEIiwidG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0IiwicmVqZWN0UmVzcG9uZGVyVGVybWluYXRpb24iLCJ0b3VjaGFibGVIYW5kbGVTdGFydFNob3VsZFNldFJlc3BvbmRlciIsInRvdWNoYWJsZUxvbmdQcmVzc0NhbmNlbHNQcmVzcyIsInRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlckdyYW50IiwiZSIsImRpc3BhdGNoSUQiLCJjdXJyZW50VGFyZ2V0IiwicGVyc2lzdCIsInN0YXRlIiwiX3JlY2VpdmVTaWduYWwiLCJkZWxheU1TIiwidG91Y2hhYmxlR2V0SGlnaGxpZ2h0RGVsYXlNUyIsIk1hdGgiLCJtYXgiLCJpc05hTiIsInNldFRpbWVvdXQiLCJfaGFuZGxlRGVsYXkiLCJiaW5kIiwibG9uZ0RlbGF5TVMiLCJ0b3VjaGFibGVHZXRMb25nUHJlc3NEZWxheU1TIiwiX2hhbmRsZUxvbmdEZWxheSIsInRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlclJlbGVhc2UiLCJ0b3VjaGFibGVIYW5kbGVSZXNwb25kZXJUZXJtaW5hdGUiLCJ0b3VjaGFibGVIYW5kbGVSZXNwb25kZXJNb3ZlIiwicG9zaXRpb25PbkFjdGl2YXRlIiwiZGltZW5zaW9uc09uQWN0aXZhdGUiLCJwcmVzc1JlY3RPZmZzZXQiLCJ0b3VjaGFibGVHZXRQcmVzc1JlY3RPZmZzZXQiLCJsZWZ0IiwicmlnaHQiLCJ0b3AiLCJib3R0b20iLCJwcmVzc0V4cGFuZExlZnQiLCJwcmVzc0V4cGFuZFRvcCIsInByZXNzRXhwYW5kUmlnaHQiLCJwcmVzc0V4cGFuZEJvdHRvbSIsImhpdFNsb3AiLCJ0b3VjaGFibGVHZXRIaXRTbG9wIiwidG91Y2giLCJleHRyYWN0U2luZ2xlVG91Y2giLCJuYXRpdmVFdmVudCIsInBhZ2VYIiwicGFnZVkiLCJwcmVzc0luTG9jYXRpb24iLCJtb3ZlZERpc3RhbmNlIiwiX2dldERpc3RhbmNlQmV0d2VlblBvaW50cyIsIl9jYW5jZWxMb25nUHJlc3NEZWxheVRpbWVvdXQiLCJpc1RvdWNoV2l0aGluQWN0aXZlIiwid2lkdGgiLCJoZWlnaHQiLCJjdXJTdGF0ZSIsIl9yZW1lYXN1cmVNZXRyaWNzT25BY3RpdmF0aW9uIiwibWVhc3VyZSIsIl9oYW5kbGVRdWVyeUxheW91dCIsImwiLCJ0IiwidyIsImgiLCJnbG9iYWxYIiwiZ2xvYmFsWSIsInJlbGVhc2UiLCJnZXRQb29sZWQiLCJjb25zb2xlIiwic2lnbmFsIiwibmV4dFN0YXRlIiwiRXJyb3IiLCJfcGVyZm9ybVNpZGVFZmZlY3RzRm9yVHJhbnNpdGlvbiIsIl9pc0hpZ2hsaWdodCIsIl9zYXZlUHJlc3NJbkxvY2F0aW9uIiwibG9jYXRpb25YIiwibG9jYXRpb25ZIiwiYVgiLCJhWSIsImJYIiwiYlkiLCJkZWx0YVgiLCJkZWx0YVkiLCJzcXJ0IiwiY3VySXNIaWdobGlnaHQiLCJuZXdJc0hpZ2hsaWdodCIsImlzRmluYWxTaWduYWwiLCJ0b3VjaGFibGVIYW5kbGVMb25nUHJlc3MiLCJfc3RhcnRIaWdobGlnaHQiLCJfZW5kSGlnaGxpZ2h0IiwiaGFzTG9uZ1ByZXNzSGFuZGxlciIsIm9uTG9uZ1ByZXNzIiwicHJlc3NJc0xvbmdCdXRTdGlsbENhbGxPblByZXNzIiwic2hvdWxkSW52b2tlUHJlc3MiLCJ0b3VjaGFibGVHZXRQcmVzc091dERlbGF5TVMiLCJUb3VjaGFibGUiLCJNaXhpbiIsIlRPVUNIX1RBUkdFVF9ERUJVRyIsInJlbmRlckRlYnVnVmlldyIsImNvbG9yIiwiX19ERVZfXyIsImRlYnVnSGl0U2xvcFN0eWxlIiwia2V5IiwiaGV4Q29sb3IiLCJ0b1N0cmluZyIsInN1YnN0ciIsInBvc2l0aW9uIiwiYm9yZGVyQ29sb3IiLCJzbGljZSIsImJvcmRlcldpZHRoIiwiYm9yZGVyU3R5bGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFTQSxhLGdPQUVBLEdBQU1BLG9CQUFxQkMsT0FBckIsc0JBQU4sQ0FDQSxHQUFNQyxVQUFXRCxPQUFYLFlBQU4sQ0FDQSxHQUFNRSxVQUFXRixPQUFYLFlBQU4sQ0FDQSxHQUFNRyxPQUFRSCxPQUFSLFNBQU4sQ0FDQSxHQUFNSSxhQUFjSixPQUFkLGVBQU4sQ0FDQSxHQUFNSyxnQkFBaUJMLE9BQWpCLGtCQUFOLENBQ0EsR0FBTU0saUJBQWtCTixPQUFsQiw0QkFBTixDQUNBLEdBQU1PLFdBQVlQLE9BQVosYUFBTixDQUNBLEdBQU1RLE1BQU9SLE9BQVAsUUFBTixDQUVBLEdBQU1TLFdBQVlULE9BQVosc0JBQU4sQ0FDQSxHQUFNVSxnQkFBaUJWLE9BQWpCLGtCQUFOLENBMEZBLEdBQU1XLFFBQVNGLFVBQVUsQ0FDdkJHLGNBQWUsSUFEUSxDQUV2QkMsNEJBQTZCLElBRk4sQ0FHdkJDLDZCQUE4QixJQUhQLENBSXZCQywwQkFBMkIsSUFKSixDQUt2QkMsMkJBQTRCLElBTEwsQ0FNdkJDLCtCQUFnQyxJQU5ULENBT3ZCQyxnQ0FBaUMsSUFQVixDQVF2QkMsTUFBTyxJQVJnQixDQUFWLENBQWYsQ0FjQSxHQUFNQyxVQUFXLENBQ2ZKLDJCQUE0QixJQURiLENBRWZELDBCQUEyQixJQUZaLENBQWpCLENBU0EsR0FBTU0sY0FBZSxDQUNuQlIsNEJBQTZCLElBRFYsQ0FFbkJFLDBCQUEyQixJQUZSLENBR25CRSwrQkFBZ0MsSUFIYixDQUFyQixDQU1BLEdBQU1LLGtCQUFtQixDQUN2QkwsK0JBQWdDLElBRFQsQ0FBekIsQ0FPQSxHQUFN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QXJCLENBQ0EsSUFBSyxHQUFNbUUsSUFBWCxHQUFrQjVELFFBQWxCLENBQTJCLENBQ3pCMkQsa0JBQWtCQyxHQUFsQixFQUF5QixDQUFDNUQsUUFBUTRELEdBQVIsQ0FBMUIsQ0FDRCxDQUNELEdBQU1DLFVBQVcsSUFBTSxDQUFDLFdBQWExSixlQUFlc0osS0FBZixFQUFzQkssUUFBdEIsQ0FBK0IsRUFBL0IsQ0FBZCxFQUFrREMsTUFBbEQsQ0FBeUQsQ0FBQyxDQUExRCxDQUF2QixDQUNBLE1BQ0UscUJBQUMsSUFBRCxFQUNFLGNBQWMsTUFEaEIsQ0FFRSxnQkFDRUMsU0FBVSxVQURaLENBRUVDLFlBQWFKLFNBQVNLLEtBQVQsQ0FBZSxDQUFmLENBQWtCLENBQUMsQ0FBbkIsRUFBd0IsSUFGdkMsQ0FHRUMsWUFBYSxDQUhmLENBSUVDLFlBQWEsUUFKZixDQUtFQyxnQkFBaUJSLFNBQVNLLEtBQVQsQ0FBZSxDQUFmLENBQWtCLENBQUMsQ0FBbkIsRUFBd0IsSUFMM0MsRUFNS1AsaUJBTkwsQ0FGRixFQURGLENBYUQsQ0FoQ2UsQ0FBbEIsQ0FtQ0FXLE9BQU9DLE9BQVAsQ0FBaUJsQixTQUFqQiIsImZpbGUiOiJUb3VjaGFibGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBUb3VjaGFibGVcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEJvdW5kaW5nRGltZW5zaW9ucyA9IHJlcXVpcmUoJ0JvdW5kaW5nRGltZW5zaW9ucycpO1xuY29uc3QgUGxhdGZvcm0gPSByZXF1aXJlKCdQbGF0Zm9ybScpO1xuY29uc3QgUG9zaXRpb24gPSByZXF1aXJlKCdQb3NpdGlvbicpO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdSZWFjdCcpO1xuY29uc3QgUmVhY3ROYXRpdmUgPSByZXF1aXJlKCdSZWFjdE5hdGl2ZScpO1xuY29uc3QgVFZFdmVudEhhbmRsZXIgPSByZXF1aXJlKCdUVkV2ZW50SGFuZGxlcicpO1xuY29uc3QgVG91Y2hFdmVudFV0aWxzID0gcmVxdWlyZSgnZmJqcy9saWIvVG91Y2hFdmVudFV0aWxzJyk7XG5jb25zdCBVSU1hbmFnZXIgPSByZXF1aXJlKCdVSU1hbmFnZXInKTtcbmNvbnN0IFZpZXcgPSByZXF1aXJlKCdWaWV3Jyk7XG5cbmNvbnN0IGtleU1pcnJvciA9IHJlcXVpcmUoJ2ZianMvbGliL2tleU1pcnJvcicpO1xuY29uc3Qgbm9ybWFsaXplQ29sb3IgPSByZXF1aXJlKCdub3JtYWxpemVDb2xvcicpO1xuXG4vKipcbiAqIGBUb3VjaGFibGVgOiBUYXBzIGRvbmUgcmlnaHQuXG4gKlxuICogWW91IGhvb2sgeW91ciBgUmVzcG9uZGVyRXZlbnRQbHVnaW5gIGV2ZW50cyBpbnRvIGBUb3VjaGFibGVgLiBgVG91Y2hhYmxlYFxuICogd2lsbCBtZWFzdXJlIHRpbWUvZ2VvbWV0cnkgYW5kIHRlbGxzIHlvdSB3aGVuIHRvIGdpdmUgZmVlZGJhY2sgdG8gdGhlIHVzZXIuXG4gKlxuICogPT09PT09PT09PT09PT09PT09PT09PSBUb3VjaGFibGUgVHV0b3JpYWwgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogVGhlIGBUb3VjaGFibGVgIG1peGluIGhlbHBzIHlvdSBoYW5kbGUgdGhlIFwicHJlc3NcIiBpbnRlcmFjdGlvbi4gSXQgYW5hbHl6ZXNcbiAqIHRoZSBnZW9tZXRyeSBvZiBlbGVtZW50cywgYW5kIG9ic2VydmVzIHdoZW4gYW5vdGhlciByZXNwb25kZXIgKHNjcm9sbCB2aWV3XG4gKiBldGMpIGhhcyBzdG9sZW4gdGhlIHRvdWNoIGxvY2suIEl0IG5vdGlmaWVzIHlvdXIgY29tcG9uZW50IHdoZW4gaXQgc2hvdWxkXG4gKiBnaXZlIGZlZWRiYWNrIHRvIHRoZSB1c2VyLiAoYm91bmNpbmcvaGlnaGxpZ2h0aW5nL3VuaGlnaGxpZ2h0aW5nKS5cbiAqXG4gKiAtIFdoZW4gYSB0b3VjaCB3YXMgYWN0aXZhdGVkICh0eXBpY2FsbHkgeW91IGhpZ2hsaWdodClcbiAqIC0gV2hlbiBhIHRvdWNoIHdhcyBkZWFjdGl2YXRlZCAodHlwaWNhbGx5IHlvdSB1bmhpZ2hsaWdodClcbiAqIC0gV2hlbiBhIHRvdWNoIHdhcyBcInByZXNzZWRcIiAtIGEgdG91Y2ggZW5kZWQgd2hpbGUgc3RpbGwgd2l0aGluIHRoZSBnZW9tZXRyeVxuICogICBvZiB0aGUgZWxlbWVudCwgYW5kIG5vIG90aGVyIGVsZW1lbnQgKGxpa2Ugc2Nyb2xsZXIpIGhhcyBcInN0b2xlblwiIHRvdWNoXG4gKiAgIGxvY2sgKFwicmVzcG9uZGVyXCIpIChUeXBpY2FsbHkgeW91IGJvdW5jZSB0aGUgZWxlbWVudCkuXG4gKlxuICogQSBnb29kIHRhcCBpbnRlcmFjdGlvbiBpc24ndCBhcyBzaW1wbGUgYXMgeW91IG1pZ2h0IHRoaW5rLiBUaGVyZSBzaG91bGQgYmUgYVxuICogc2xpZ2h0IGRlbGF5IGJlZm9yZSBzaG93aW5nIGEgaGlnaGxpZ2h0IHdoZW4gc3RhcnRpbmcgYSB0b3VjaC4gSWYgYVxuICogc3Vic2VxdWVudCB0b3VjaCBtb3ZlIGV4Y2VlZHMgdGhlIGJvdW5kYXJ5IG9mIHRoZSBlbGVtZW50LCBpdCBzaG91bGRcbiAqIHVuaGlnaGxpZ2h0LCBidXQgaWYgdGhhdCBzYW1lIHRvdWNoIGlzIGJyb3VnaHQgYmFjayB3aXRoaW4gdGhlIGJvdW5kYXJ5LCBpdFxuICogc2hvdWxkIHJlaGlnaGxpZ2h0IGFnYWluLiBBIHRvdWNoIGNhbiBtb3ZlIGluIGFuZCBvdXQgb2YgdGhhdCBib3VuZGFyeVxuICogc2V2ZXJhbCB0aW1lcywgZWFjaCB0aW1lIHRvZ2dsaW5nIGhpZ2hsaWdodGluZywgYnV0IGEgXCJwcmVzc1wiIGlzIG9ubHlcbiAqIHRyaWdnZXJlZCBpZiB0aGF0IHRvdWNoIGVuZHMgd2hpbGUgd2l0aGluIHRoZSBlbGVtZW50J3MgYm91bmRhcnkgYW5kIG5vXG4gKiBzY3JvbGxlciAob3IgYW55dGhpbmcgZWxzZSkgaGFzIHN0b2xlbiB0aGUgbG9jayBvbiB0b3VjaGVzLlxuICpcbiAqIFRvIGNyZWF0ZSBhIG5ldyB0eXBlIG9mIGNvbXBvbmVudCB0aGF0IGhhbmRsZXMgaW50ZXJhY3Rpb24gdXNpbmcgdGhlXG4gKiBgVG91Y2hhYmxlYCBtaXhpbiwgZG8gdGhlIGZvbGxvd2luZzpcbiAqXG4gKiAtIEluaXRpYWxpemUgdGhlIGBUb3VjaGFibGVgIHN0YXRlLlxuICpcbiAqICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAqICAgICByZXR1cm4gbWVyZ2UodGhpcy50b3VjaGFibGVHZXRJbml0aWFsU3RhdGUoKSwgeW91ckNvbXBvbmVudFN0YXRlKTtcbiAqICAgfVxuICpcbiAqIC0gQ2hvb3NlIHRoZSByZW5kZXJlZCBjb21wb25lbnQgd2hvJ3MgdG91Y2hlcyBzaG91bGQgc3RhcnQgdGhlIGludGVyYWN0aXZlXG4gKiAgIHNlcXVlbmNlLiBPbiB0aGF0IHJlbmRlcmVkIG5vZGUsIGZvcndhcmQgYWxsIGBUb3VjaGFibGVgIHJlc3BvbmRlclxuICogICBoYW5kbGVycy4gWW91IGNhbiBjaG9vc2UgYW55IHJlbmRlcmVkIG5vZGUgeW91IGxpa2UuIENob29zZSBhIG5vZGUgd2hvc2VcbiAqICAgaGl0IHRhcmdldCB5b3UnZCBsaWtlIHRvIGluc3RpZ2F0ZSB0aGUgaW50ZXJhY3Rpb24gc2VxdWVuY2U6XG4gKlxuICogICAvLyBJbiByZW5kZXIgZnVuY3Rpb246XG4gKiAgIHJldHVybiAoXG4gKiAgICAgPFZpZXdcbiAqICAgICAgIG9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXI9e3RoaXMudG91Y2hhYmxlSGFuZGxlU3RhcnRTaG91bGRTZXRSZXNwb25kZXJ9XG4gKiAgICAgICBvblJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdD17dGhpcy50b3VjaGFibGVIYW5kbGVSZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3R9XG4gKiAgICAgICBvblJlc3BvbmRlckdyYW50PXt0aGlzLnRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlckdyYW50fVxuICogICAgICAgb25SZXNwb25kZXJNb3ZlPXt0aGlzLnRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlck1vdmV9XG4gKiAgICAgICBvblJlc3BvbmRlclJlbGVhc2U9e3RoaXMudG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyUmVsZWFzZX1cbiAqICAgICAgIG9uUmVzcG9uZGVyVGVybWluYXRlPXt0aGlzLnRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlclRlcm1pbmF0ZX0+XG4gKiAgICAgICA8Vmlldz5cbiAqICAgICAgICAgRXZlbiB0aG91Z2ggdGhlIGhpdCBkZXRlY3Rpb24vaW50ZXJhY3Rpb25zIGFyZSB0cmlnZ2VyZWQgYnkgdGhlXG4gKiAgICAgICAgIHdyYXBwaW5nICh0eXBpY2FsbHkgbGFyZ2VyKSBub2RlLCB3ZSB1c3VhbGx5IGVuZCB1cCBpbXBsZW1lbnRpbmdcbiAqICAgICAgICAgY3VzdG9tIGxvZ2ljIHRoYXQgaGlnaGxpZ2h0cyB0aGlzIGlubmVyIG9uZS5cbiAqICAgICAgIDwvVmlldz5cbiAqICAgICA8L1ZpZXc+XG4gKiAgICk7XG4gKlxuICogLSBZb3UgbWF5IHNldCB1cCB5b3VyIG93biBoYW5kbGVycyBmb3IgZWFjaCBvZiB0aGVzZSBldmVudHMsIHNvIGxvbmcgYXMgeW91XG4gKiAgIGFsc28gaW52b2tlIHRoZSBgdG91Y2hhYmxlKmAgaGFuZGxlcnMgaW5zaWRlIG9mIHlvdXIgY3VzdG9tIGhhbmRsZXIuXG4gKlxuICogLSBJbXBsZW1lbnQgdGhlIGhhbmRsZXJzIG9uIHlvdXIgY29tcG9uZW50IGNsYXNzIGluIG9yZGVyIHRvIHByb3ZpZGVcbiAqICAgZmVlZGJhY2sgdG8gdGhlIHVzZXIuIFNlZSBkb2N1bWVudGF0aW9uIGZvciBlYWNoIG9mIHRoZXNlIGNsYXNzIG1ldGhvZHNcbiAqICAgdGhhdCB5b3Ugc2hvdWxkIGltcGxlbWVudC5cbiAqXG4gKiAgIHRvdWNoYWJsZUhhbmRsZVByZXNzOiBmdW5jdGlvbigpIHtcbiAqICAgICAgdGhpcy5wZXJmb3JtQm91bmNlQW5pbWF0aW9uKCk7ICAvLyBvciB3aGF0ZXZlciB5b3Ugd2FudCB0byBkby5cbiAqICAgfSxcbiAqICAgdG91Y2hhYmxlSGFuZGxlQWN0aXZlUHJlc3NJbjogZnVuY3Rpb24oKSB7XG4gKiAgICAgdGhpcy5iZWdpbkhpZ2hsaWdodGluZyguLi4pOyAgLy8gV2hhdGV2ZXIgeW91IGxpa2UgdG8gY29udmV5IGFjdGl2YXRpb25cbiAqICAgfSxcbiAqICAgdG91Y2hhYmxlSGFuZGxlQWN0aXZlUHJlc3NPdXQ6IGZ1bmN0aW9uKCkge1xuICogICAgIHRoaXMuZW5kSGlnaGxpZ2h0aW5nKC4uLik7ICAvLyBXaGF0ZXZlciB5b3UgbGlrZSB0byBjb252ZXkgZGVhY3RpdmF0aW9uXG4gKiAgIH0sXG4gKlxuICogLSBUaGVyZSBhcmUgbW9yZSBhZHZhbmNlZCBtZXRob2RzIHlvdSBjYW4gaW1wbGVtZW50IChzZWUgZG9jdW1lbnRhdGlvbiBiZWxvdyk6XG4gKiAgIHRvdWNoYWJsZUdldEhpZ2hsaWdodERlbGF5TVM6IGZ1bmN0aW9uKCkge1xuICogICAgIHJldHVybiAyMDtcbiAqICAgfVxuICogICAvLyBJbiBwcmFjdGljZSwgKmFsd2F5cyogdXNlIGEgcHJlZGVjbGFyZWQgY29uc3RhbnQgKGNvbnNlcnZlIG1lbW9yeSkuXG4gKiAgIHRvdWNoYWJsZUdldFByZXNzUmVjdE9mZnNldDogZnVuY3Rpb24oKSB7XG4gKiAgICAgcmV0dXJuIHt0b3A6IDIwLCBsZWZ0OiAyMCwgcmlnaHQ6IDIwLCBib3R0b206IDEwMH07XG4gKiAgIH1cbiAqL1xuXG4vKipcbiAqIFRvdWNoYWJsZSBzdGF0ZXMuXG4gKi9cbmNvbnN0IFN0YXRlcyA9IGtleU1pcnJvcih7XG4gIE5PVF9SRVNQT05ERVI6IG51bGwsICAgICAgICAgICAgICAgICAgIC8vIE5vdCB0aGUgcmVzcG9uZGVyXG4gIFJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19JTjogbnVsbCwgICAgIC8vIFJlc3BvbmRlciwgaW5hY3RpdmUsIGluIHRoZSBgUHJlc3NSZWN0YFxuICBSRVNQT05ERVJfSU5BQ1RJVkVfUFJFU1NfT1VUOiBudWxsLCAgICAvLyBSZXNwb25kZXIsIGluYWN0aXZlLCBvdXQgb2YgYFByZXNzUmVjdGBcbiAgUkVTUE9OREVSX0FDVElWRV9QUkVTU19JTjogbnVsbCwgICAgICAgLy8gUmVzcG9uZGVyLCBhY3RpdmUsIGluIHRoZSBgUHJlc3NSZWN0YFxuICBSRVNQT05ERVJfQUNUSVZFX1BSRVNTX09VVDogbnVsbCwgICAgICAvLyBSZXNwb25kZXIsIGFjdGl2ZSwgb3V0IG9mIGBQcmVzc1JlY3RgXG4gIFJFU1BPTkRFUl9BQ1RJVkVfTE9OR19QUkVTU19JTjogbnVsbCwgIC8vIFJlc3BvbmRlciwgYWN0aXZlLCBpbiB0aGUgYFByZXNzUmVjdGAsIGFmdGVyIGxvbmcgcHJlc3MgdGhyZXNob2xkXG4gIFJFU1BPTkRFUl9BQ1RJVkVfTE9OR19QUkVTU19PVVQ6IG51bGwsIC8vIFJlc3BvbmRlciwgYWN0aXZlLCBvdXQgb2YgYFByZXNzUmVjdGAsIGFmdGVyIGxvbmcgcHJlc3MgdGhyZXNob2xkXG4gIEVSUk9SOiBudWxsXG59KTtcblxuLyoqXG4gKiBRdWljayBsb29rdXAgbWFwIGZvciBzdGF0ZXMgdGhhdCBhcmUgY29uc2lkZXJlZCB0byBiZSBcImFjdGl2ZVwiXG4gKi9cbmNvbnN0IElzQWN0aXZlID0ge1xuICBSRVNQT05ERVJfQUNUSVZFX1BSRVNTX09VVDogdHJ1ZSxcbiAgUkVTUE9OREVSX0FDVElWRV9QUkVTU19JTjogdHJ1ZVxufTtcblxuLyoqXG4gKiBRdWljayBsb29rdXAgZm9yIHN0YXRlcyB0aGF0IGFyZSBjb25zaWRlcmVkIHRvIGJlIFwicHJlc3NpbmdcIiBhbmQgYXJlXG4gKiB0aGVyZWZvcmUgZWxpZ2libGUgdG8gcmVzdWx0IGluIGEgXCJzZWxlY3Rpb25cIiBpZiB0aGUgcHJlc3Mgc3RvcHMuXG4gKi9cbmNvbnN0IElzUHJlc3NpbmdJbiA9IHtcbiAgUkVTUE9OREVSX0lOQUNUSVZFX1BSRVNTX0lOOiB0cnVlLFxuICBSRVNQT05ERVJfQUNUSVZFX1BSRVNTX0lOOiB0cnVlLFxuICBSRVNQT05ERVJfQUNUSVZFX0xPTkdfUFJFU1NfSU46IHRydWUsXG59O1xuXG5jb25zdCBJc0xvbmdQcmVzc2luZ0luID0ge1xuICBSRVNQT05ERVJfQUNUSVZFX0xPTkdfUFJFU1NfSU46IHRydWUsXG59O1xuXG4vKipcbiAqIElucHV0cyB0byB0aGUgc3RhdGUgbWFjaGluZS5cbiAqL1xuY29uc3QgU2lnbmFscyA9IGtleU1pcnJvcih7XG4gIERFTEFZOiBudWxsLFxuICBSRVNQT05ERVJfR1JBTlQ6IG51bGwsXG4gIFJFU1BPTkRFUl9SRUxFQVNFOiBudWxsLFxuICBSRVNQT05ERVJfVEVSTUlOQVRFRDogbnVsbCxcbiAgRU5URVJfUFJFU1NfUkVDVDogbnVsbCxcbiAgTEVBVkVfUFJFU1NfUkVDVDogbnVsbCxcbiAgTE9OR19QUkVTU19ERVRFQ1RFRDogbnVsbCxcbn0pO1xuXG4vKipcbiAqIE1hcHBpbmcgZnJvbSBTdGF0ZXMgeCBTaWduYWxzID0+IFN0YXRlc1xuICovXG5jb25zdCBUcmFuc2l0aW9ucyA9IHtcbiAgTk9UX1JFU1BPTkRFUjoge1xuICAgIERFTEFZOiBTdGF0ZXMuRVJST1IsXG4gICAgUkVTUE9OREVSX0dSQU5UOiBTdGF0ZXMuUkVTUE9OREVSX0lOQUNUSVZFX1BSRVNTX0lOLFxuICAgIFJFU1BPTkRFUl9SRUxFQVNFOiBTdGF0ZXMuRVJST1IsXG4gICAgUkVTUE9OREVSX1RFUk1JTkFURUQ6IFN0YXRlcy5FUlJPUixcbiAgICBFTlRFUl9QUkVTU19SRUNUOiBTdGF0ZXMuRVJST1IsXG4gICAgTEVBVkVfUFJFU1NfUkVDVDogU3RhdGVzLkVSUk9SLFxuICAgIExPTkdfUFJFU1NfREVURUNURUQ6IFN0YXRlcy5FUlJPUixcbiAgfSxcbiAgUkVTUE9OREVSX0lOQUNUSVZFX1BSRVNTX0lOOiB7XG4gICAgREVMQVk6IFN0YXRlcy5SRVNQT05ERVJfQUNUSVZFX1BSRVNTX0lOLFxuICAgIFJFU1BPTkRFUl9HUkFOVDogU3RhdGVzLkVSUk9SLFxuICAgIFJFU1BPTkRFUl9SRUxFQVNFOiBTdGF0ZXMuTk9UX1JFU1BPTkRFUixcbiAgICBSRVNQT05ERVJfVEVSTUlOQVRFRDogU3RhdGVzLk5PVF9SRVNQT05ERVIsXG4gICAgRU5URVJfUFJFU1NfUkVDVDogU3RhdGVzLlJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19JTixcbiAgICBMRUFWRV9QUkVTU19SRUNUOiBTdGF0ZXMuUkVTUE9OREVSX0lOQUNUSVZFX1BSRVNTX09VVCxcbiAgICBMT05HX1BSRVNTX0RFVEVDVEVEOiBTdGF0ZXMuRVJST1IsXG4gIH0sXG4gIFJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19PVVQ6IHtcbiAgICBERUxBWTogU3RhdGVzLlJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfT1VULFxuICAgIFJFU1BPTkRFUl9HUkFOVDogU3RhdGVzLkVSUk9SLFxuICAgIFJFU1BPTkRFUl9SRUxFQVNFOiBTdGF0ZXMuTk9UX1JFU1BPTkRFUixcbiAgICBSRVNQT05ERVJfVEVSTUlOQVRFRDogU3RhdGVzLk5PVF9SRVNQT05ERVIsXG4gICAgRU5URVJfUFJFU1NfUkVDVDogU3RhdGVzLlJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19JTixcbiAgICBMRUFWRV9QUkVTU19SRUNUOiBTdGF0ZXMuUkVTUE9OREVSX0lOQUNUSVZFX1BSRVNTX09VVCxcbiAgICBMT05HX1BSRVNTX0RFVEVDVEVEOiBTdGF0ZXMuRVJST1IsXG4gIH0sXG4gIFJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfSU46IHtcbiAgICBERUxBWTogU3RhdGVzLkVSUk9SLFxuICAgIFJFU1BPTkRFUl9HUkFOVDogU3RhdGVzLkVSUk9SLFxuICAgIFJFU1BPTkRFUl9SRUxFQVNFOiBTdGF0ZXMuTk9UX1JFU1BPTkRFUixcbiAgICBSRVNQT05ERVJfVEVSTUlOQVRFRDogU3RhdGVzLk5PVF9SRVNQT05ERVIsXG4gICAgRU5URVJfUFJFU1NfUkVDVDogU3RhdGVzLlJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfSU4sXG4gICAgTEVBVkVfUFJFU1NfUkVDVDogU3RhdGVzLlJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfT1VULFxuICAgIExPTkdfUFJFU1NfREVURUNURUQ6IFN0YXRlcy5SRVNQT05ERVJfQUNUSVZFX0xPTkdfUFJFU1NfSU4sXG4gIH0sXG4gIFJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfT1VUOiB7XG4gICAgREVMQVk6IFN0YXRlcy5FUlJPUixcbiAgICBSRVNQT05ERVJfR1JBTlQ6IFN0YXRlcy5FUlJPUixcbiAgICBSRVNQT05ERVJfUkVMRUFTRTogU3RhdGVzLk5PVF9SRVNQT05ERVIsXG4gICAgUkVTUE9OREVSX1RFUk1JTkFURUQ6IFN0YXRlcy5OT1RfUkVTUE9OREVSLFxuICAgIEVOVEVSX1BSRVNTX1JFQ1Q6IFN0YXRlcy5SRVNQT05ERVJfQUNUSVZFX1BSRVNTX0lOLFxuICAgIExFQVZFX1BSRVNTX1JFQ1Q6IFN0YXRlcy5SRVNQT05ERVJfQUNUSVZFX1BSRVNTX09VVCxcbiAgICBMT05HX1BSRVNTX0RFVEVDVEVEOiBTdGF0ZXMuRVJST1IsXG4gIH0sXG4gIFJFU1BPTkRFUl9BQ1RJVkVfTE9OR19QUkVTU19JTjoge1xuICAgIERFTEFZOiBTdGF0ZXMuRVJST1IsXG4gICAgUkVTUE9OREVSX0dSQU5UOiBTdGF0ZXMuRVJST1IsXG4gICAgUkVTUE9OREVSX1JFTEVBU0U6IFN0YXRlcy5OT1RfUkVTUE9OREVSLFxuICAgIFJFU1BPTkRFUl9URVJNSU5BVEVEOiBTdGF0ZXMuTk9UX1JFU1BPTkRFUixcbiAgICBFTlRFUl9QUkVTU19SRUNUOiBTdGF0ZXMuUkVTUE9OREVSX0FDVElWRV9MT05HX1BSRVNTX0lOLFxuICAgIExFQVZFX1BSRVNTX1JFQ1Q6IFN0YXRlcy5SRVNQT05ERVJfQUNUSVZFX0xPTkdfUFJFU1NfT1VULFxuICAgIExPTkdfUFJFU1NfREVURUNURUQ6IFN0YXRlcy5SRVNQT05ERVJfQUNUSVZFX0xPTkdfUFJFU1NfSU4sXG4gIH0sXG4gIFJFU1BPTkRFUl9BQ1RJVkVfTE9OR19QUkVTU19PVVQ6IHtcbiAgICBERUxBWTogU3RhdGVzLkVSUk9SLFxuICAgIFJFU1BPTkRFUl9HUkFOVDogU3RhdGVzLkVSUk9SLFxuICAgIFJFU1BPTkRFUl9SRUxFQVNFOiBTdGF0ZXMuTk9UX1JFU1BPTkRFUixcbiAgICBSRVNQT05ERVJfVEVSTUlOQVRFRDogU3RhdGVzLk5PVF9SRVNQT05ERVIsXG4gICAgRU5URVJfUFJFU1NfUkVDVDogU3RhdGVzLlJFU1BPTkRFUl9BQ1RJVkVfTE9OR19QUkVTU19JTixcbiAgICBMRUFWRV9QUkVTU19SRUNUOiBTdGF0ZXMuUkVTUE9OREVSX0FDVElWRV9MT05HX1BSRVNTX09VVCxcbiAgICBMT05HX1BSRVNTX0RFVEVDVEVEOiBTdGF0ZXMuRVJST1IsXG4gIH0sXG4gIGVycm9yOiB7XG4gICAgREVMQVk6IFN0YXRlcy5OT1RfUkVTUE9OREVSLFxuICAgIFJFU1BPTkRFUl9HUkFOVDogU3RhdGVzLlJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19JTixcbiAgICBSRVNQT05ERVJfUkVMRUFTRTogU3RhdGVzLk5PVF9SRVNQT05ERVIsXG4gICAgUkVTUE9OREVSX1RFUk1JTkFURUQ6IFN0YXRlcy5OT1RfUkVTUE9OREVSLFxuICAgIEVOVEVSX1BSRVNTX1JFQ1Q6IFN0YXRlcy5OT1RfUkVTUE9OREVSLFxuICAgIExFQVZFX1BSRVNTX1JFQ1Q6IFN0YXRlcy5OT1RfUkVTUE9OREVSLFxuICAgIExPTkdfUFJFU1NfREVURUNURUQ6IFN0YXRlcy5OT1RfUkVTUE9OREVSLFxuICB9XG59O1xuXG4vLyA9PT09IFR5cGljYWwgQ29uc3RhbnRzIGZvciBpbnRlZ3JhdGluZyBpbnRvIFVJIGNvbXBvbmVudHMgPT09PVxuLy8gdmFyIEhJVF9FWFBBTkRfUFggPSAyMDtcbi8vIHZhciBISVRfVkVSVF9PRkZTRVRfUFggPSAxMDtcbmNvbnN0IEhJR0hMSUdIVF9ERUxBWV9NUyA9IDEzMDtcblxuY29uc3QgUFJFU1NfRVhQQU5EX1BYID0gMjA7XG5cbmNvbnN0IExPTkdfUFJFU1NfVEhSRVNIT0xEID0gNTAwO1xuXG5jb25zdCBMT05HX1BSRVNTX0RFTEFZX01TID0gTE9OR19QUkVTU19USFJFU0hPTEQgLSBISUdITElHSFRfREVMQVlfTVM7XG5cbmNvbnN0IExPTkdfUFJFU1NfQUxMT1dFRF9NT1ZFTUVOVCA9IDEwO1xuXG4vLyBEZWZhdWx0IGFtb3VudCBcImFjdGl2ZVwiIHJlZ2lvbiBwcm90cnVkZXMgYmV5b25kIGJveFxuXG4vKipcbiAqIEJ5IGNvbnZlbnRpb24sIG1ldGhvZHMgcHJlZml4ZWQgd2l0aCB1bmRlcnNjb3JlcyBhcmUgbWVhbnQgdG8gYmUgQHByaXZhdGUsXG4gKiBhbmQgbm90IEBwcm90ZWN0ZWQuIE1peGVycyBzaG91bGRuJ3QgYWNjZXNzIHRoZW0gLSBub3QgZXZlbiB0byBwcm92aWRlIHRoZW1cbiAqIGFzIGNhbGxiYWNrIGhhbmRsZXJzLlxuICpcbiAqXG4gKiA9PT09PT09PT09IEdlb21ldHJ5ID09PT09PT09PVxuICogYFRvdWNoYWJsZWAgb25seSBhc3N1bWVzIHRoYXQgdGhlcmUgZXhpc3RzIGEgYEhpdFJlY3RgIG5vZGUuIFRoZSBgUHJlc3NSZWN0YFxuICogaXMgYW4gYWJzdHJhY3QgYm94IHRoYXQgaXMgZXh0ZW5kZWQgYmV5b25kIHRoZSBgSGl0UmVjdGAuXG4gKlxuICogICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAqICB8ICAgICAgICAgICAgICAgICAgICAgICAgICB8IC0gXCJTdGFydFwiIGV2ZW50cyBpbiBgSGl0UmVjdGAgY2F1c2UgYEhpdFJlY3RgXG4gKiAgfCAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tKyAgfCAgIHRvIGJlY29tZSB0aGUgcmVzcG9uZGVyLlxuICogIHwgIHwgICstLS0tLS0tLS0tLS0tLSsgIHwgIHwgLSBgSGl0UmVjdGAgaXMgdHlwaWNhbGx5IGV4cGFuZGVkIGFyb3VuZFxuICogIHwgIHwgIHwgICAgICAgICAgICAgIHwgIHwgIHwgICB0aGUgYFZpc3VhbFJlY3RgLCBidXQgc2hpZnRlZCBkb3dud2FyZC5cbiAqICB8ICB8ICB8ICBWaXN1YWxSZWN0ICB8ICB8ICB8IC0gQWZ0ZXIgcHJlc3NpbmcgZG93biwgYWZ0ZXIgc29tZSBkZWxheSxcbiAqICB8ICB8ICB8ICAgICAgICAgICAgICB8ICB8ICB8ICAgYW5kIGJlZm9yZSBsZXR0aW5nIHVwLCB0aGUgVmlzdWFsIFJlYWN0XG4gKiAgfCAgfCAgKy0tLS0tLS0tLS0tLS0tKyAgfCAgfCAgIHdpbGwgYmVjb21lIFwiYWN0aXZlXCIuIFRoaXMgbWFrZXMgaXQgZWxpZ2libGVcbiAqICB8ICB8ICAgICBIaXRSZWN0ICAgICAgICB8ICB8ICAgZm9yIGJlaW5nIGhpZ2hsaWdodGVkIChzbyBsb25nIGFzIHRoZVxuICogIHwgICstLS0tLS0tLS0tLS0tLS0tLS0tLSsgIHwgICBwcmVzcyByZW1haW5zIGluIHRoZSBgUHJlc3NSZWN0YCkuXG4gKiAgfCAgICAgICAgUHJlc3NSZWN0ICAgICBvICAgfFxuICogICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLStcbiAqICAgICAgICAgICBPdXQgUmVnaW9uICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICstLS0tLSsgVGhpcyBnYXAgYmV0d2VlbiB0aGUgYEhpdFJlY3RgIGFuZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgUHJlc3NSZWN0YCBhbGxvd3MgYSB0b3VjaCB0byBtb3ZlIGZhciBhd2F5XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIG9yaWdpbmFsIGhpdCByZWN0LCBhbmQgcmVtYWluXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodGVkLCBhbmQgZWxpZ2libGUgZm9yIGEgXCJQcmVzc1wiLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXN0b21pemUgdGhpcyB2aWFcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHRvdWNoYWJsZUdldFByZXNzUmVjdE9mZnNldCgpYC5cbiAqXG4gKlxuICpcbiAqID09PT09PT0gU3RhdGUgTWFjaGluZSA9PT09PT09XG4gKlxuICogKy0tLS0tLS0tLS0tLS0rIDwtLS0rIFJFU1BPTkRFUl9SRUxFQVNFXG4gKiB8Tk9UX1JFU1BPTkRFUnxcbiAqICstLS0tLS0tLS0tLS0tKyA8LS0tKyBSRVNQT05ERVJfVEVSTUlOQVRFRFxuICogICAgICtcbiAqICAgICB8IFJFU1BPTkRFUl9HUkFOVCAoSGl0UmVjdClcbiAqICAgICB2XG4gKiArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyAgREVMQVkgICArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgIFQgKyBERUxBWSAgICAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAqIHxSRVNQT05ERVJfSU5BQ1RJVkVfUFJFU1NfSU58Ky0tLS0tLS0tPnxSRVNQT05ERVJfQUNUSVZFX1BSRVNTX0lOfCArLS0tLS0tLS0tLS0tPiB8UkVTUE9OREVSX0FDVElWRV9MT05HX1BSRVNTX0lOfFxuICogKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgICAgICAgICAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXG4gKiAgICAgKyAgICAgICAgICAgIF4gICAgICAgICAgICAgICAgICAgICAgICAgKyAgICAgICAgICAgXiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgICAgICAgICAgIF5cbiAqICAgICB8TEVBVkVfICAgICAgfEVOVEVSXyAgICAgICAgICAgICAgICAgICB8TEVBVkVfICAgICB8RU5URVJfICAgICAgICAgICAgICAgICAgICAgICAgICAgfExFQVZFXyAgICAgfEVOVEVSX1xuICogICAgIHxQUkVTU19SRUNUICB8UFJFU1NfUkVDVCAgICAgICAgICAgICAgIHxQUkVTU19SRUNUIHxQUkVTU19SRUNUICAgICAgICAgICAgICAgICAgICAgICB8UFJFU1NfUkVDVCB8UFJFU1NfUkVDVFxuICogICAgIHwgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICB8XG4gKiAgICAgdiAgICAgICAgICAgICsgICAgICAgICAgICAgICAgICAgICAgICAgdiAgICAgICAgICAgKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgICAgICAgICAgICtcbiAqICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyAgREVMQVkgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAqIHxSRVNQT05ERVJfSU5BQ1RJVkVfUFJFU1NfT1VUfCstLS0tLS0tPnxSRVNQT05ERVJfQUNUSVZFX1BSRVNTX09VVHwgICAgICAgICAgICAgICB8UkVTUE9OREVSX0FDVElWRV9MT05HX1BSRVNTX09VVHxcbiAqICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyAgICAgICAgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAqXG4gKiBUICsgREVMQVkgPT4gTE9OR19QUkVTU19ERUxBWV9NUyArIERFTEFZXG4gKlxuICogTm90IGRyYXduIGFyZSB0aGUgc2lkZSBlZmZlY3RzIG9mIGVhY2ggdHJhbnNpdGlvbi4gVGhlIG1vc3QgaW1wb3J0YW50IHNpZGVcbiAqIGVmZmVjdCBpcyB0aGUgYHRvdWNoYWJsZUhhbmRsZVByZXNzYCBhYnN0cmFjdCBtZXRob2QgaW52b2NhdGlvbiB0aGF0IG9jY3Vyc1xuICogd2hlbiBhIHJlc3BvbmRlciBpcyByZWxlYXNlZCB3aGlsZSBpbiBlaXRoZXIgb2YgdGhlIFwiUHJlc3NcIiBzdGF0ZXMuXG4gKlxuICogVGhlIG90aGVyIGltcG9ydGFudCBzaWRlIGVmZmVjdHMgYXJlIHRoZSBoaWdobGlnaHQgYWJzdHJhY3QgbWV0aG9kXG4gKiBpbnZvY2F0aW9ucyAoaW50ZXJuYWwgY2FsbGJhY2tzKSB0byBiZSBpbXBsZW1lbnRlZCBieSB0aGUgbWl4ZXIuXG4gKlxuICpcbiAqIEBsZW5kcyBUb3VjaGFibGUucHJvdG90eXBlXG4gKi9cbmNvbnN0IFRvdWNoYWJsZU1peGluID0ge1xuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFQbGF0Zm9ybS5pc1RWKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fdHZFdmVudEhhbmRsZXIgPSBuZXcgVFZFdmVudEhhbmRsZXIoKTtcbiAgICB0aGlzLl90dkV2ZW50SGFuZGxlci5lbmFibGUodGhpcywgZnVuY3Rpb24oY21wLCBldnQpIHtcbiAgICAgIGNvbnN0IG15VGFnID0gUmVhY3ROYXRpdmUuZmluZE5vZGVIYW5kbGUoY21wKTtcbiAgICAgIGV2dC5kaXNwYXRjaENvbmZpZyA9IHt9O1xuICAgICAgaWYgKG15VGFnID09PSBldnQudGFnKSB7XG4gICAgICAgIGlmIChldnQuZXZlbnRUeXBlID09PSAnZm9jdXMnKSB7XG4gICAgICAgICAgY21wLnRvdWNoYWJsZUhhbmRsZUFjdGl2ZVByZXNzSW4gJiYgY21wLnRvdWNoYWJsZUhhbmRsZUFjdGl2ZVByZXNzSW4oZXZ0KTtcbiAgICAgICAgfSBlbHNlIGlmIChldnQuZXZlbnRUeXBlID09PSAnYmx1cicpIHtcbiAgICAgICAgICBjbXAudG91Y2hhYmxlSGFuZGxlQWN0aXZlUHJlc3NPdXQgJiYgY21wLnRvdWNoYWJsZUhhbmRsZUFjdGl2ZVByZXNzT3V0KGV2dCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZ0LmV2ZW50VHlwZSA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgICAgICBjbXAudG91Y2hhYmxlSGFuZGxlUHJlc3MgJiYgIWNtcC5wcm9wcy5kaXNhYmxlZCAmJiBjbXAudG91Y2hhYmxlSGFuZGxlUHJlc3MoZXZ0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgdGltZW91dHMgb24gdW5tb3VudFxuICAgKi9cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl90dkV2ZW50SGFuZGxlcikge1xuICAgICAgdGhpcy5fdHZFdmVudEhhbmRsZXIuZGlzYWJsZSgpO1xuICAgICAgZGVsZXRlIHRoaXMuX3R2RXZlbnRIYW5kbGVyO1xuICAgIH1cbiAgICB0aGlzLnRvdWNoYWJsZURlbGF5VGltZW91dCAmJiBjbGVhclRpbWVvdXQodGhpcy50b3VjaGFibGVEZWxheVRpbWVvdXQpO1xuICAgIHRoaXMubG9uZ1ByZXNzRGVsYXlUaW1lb3V0ICYmIGNsZWFyVGltZW91dCh0aGlzLmxvbmdQcmVzc0RlbGF5VGltZW91dCk7XG4gICAgdGhpcy5wcmVzc091dERlbGF5VGltZW91dCAmJiBjbGVhclRpbWVvdXQodGhpcy5wcmVzc091dERlbGF5VGltZW91dCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEl0J3MgcHJlZmVyIHRoYXQgbWl4aW5zIGRldGVybWluZSBzdGF0ZSBpbiB0aGlzIHdheSwgaGF2aW5nIHRoZSBjbGFzc1xuICAgKiBleHBsaWNpdGx5IG1peCB0aGUgc3RhdGUgaW4gdGhlIG9uZSBhbmQgb25seSBgZ2V0SW5pdGlhbFN0YXRlYCBtZXRob2QuXG4gICAqXG4gICAqIEByZXR1cm4ge29iamVjdH0gU3RhdGUgb2JqZWN0IHRvIGJlIHBsYWNlZCBpbnNpZGUgb2ZcbiAgICogYHRoaXMuc3RhdGUudG91Y2hhYmxlYC5cbiAgICovXG4gIHRvdWNoYWJsZUdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvdWNoYWJsZToge3RvdWNoU3RhdGU6IHVuZGVmaW5lZCwgcmVzcG9uZGVySUQ6IG51bGx9XG4gICAgfTtcbiAgfSxcblxuICAvLyA9PT09IEhvb2tzIHRvIEdlc3R1cmUgUmVzcG9uZGVyIHN5c3RlbSA9PT09XG4gIC8qKlxuICAgKiBNdXN0IHJldHVybiB0cnVlIGlmIGVtYmVkZGVkIGluIGEgbmF0aXZlIHBsYXRmb3JtIHNjcm9sbCB2aWV3LlxuICAgKi9cbiAgdG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gIXRoaXMucHJvcHMucmVqZWN0UmVzcG9uZGVyVGVybWluYXRpb247XG4gIH0sXG5cbiAgLyoqXG4gICAqIE11c3QgcmV0dXJuIHRydWUgdG8gc3RhcnQgdGhlIHByb2Nlc3Mgb2YgYFRvdWNoYWJsZWAuXG4gICAqL1xuICB0b3VjaGFibGVIYW5kbGVTdGFydFNob3VsZFNldFJlc3BvbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICF0aGlzLnByb3BzLmRpc2FibGVkO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdHJ1ZSB0byBjYW5jZWwgcHJlc3Mgb24gbG9uZyBwcmVzcy5cbiAgICovXG4gIHRvdWNoYWJsZUxvbmdQcmVzc0NhbmNlbHNQcmVzczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBQbGFjZSBhcyBjYWxsYmFjayBmb3IgYSBET00gZWxlbWVudCdzIGBvblJlc3BvbmRlckdyYW50YCBldmVudC5cbiAgICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZSBTeW50aGV0aWMgZXZlbnQgZnJvbSBldmVudCBzeXN0ZW0uXG4gICAqXG4gICAqL1xuICB0b3VjaGFibGVIYW5kbGVSZXNwb25kZXJHcmFudDogZnVuY3Rpb24oZSkge1xuICAgIGNvbnN0IGRpc3BhdGNoSUQgPSBlLmN1cnJlbnRUYXJnZXQ7XG4gICAgLy8gU2luY2UgZSBpcyB1c2VkIGluIGEgY2FsbGJhY2sgaW52b2tlZCBvbiBhbm90aGVyIGV2ZW50IGxvb3BcbiAgICAvLyAoYXMgaW4gc2V0VGltZW91dCBldGMpLCB3ZSBuZWVkIHRvIGNhbGwgZS5wZXJzaXN0KCkgb24gdGhlXG4gICAgLy8gZXZlbnQgdG8gbWFrZSBzdXJlIGl0IGRvZXNuJ3QgZ2V0IHJldXNlZCBpbiB0aGUgZXZlbnQgb2JqZWN0IHBvb2wuXG4gICAgZS5wZXJzaXN0KCk7XG5cbiAgICB0aGlzLnByZXNzT3V0RGVsYXlUaW1lb3V0ICYmIGNsZWFyVGltZW91dCh0aGlzLnByZXNzT3V0RGVsYXlUaW1lb3V0KTtcbiAgICB0aGlzLnByZXNzT3V0RGVsYXlUaW1lb3V0ID0gbnVsbDtcblxuICAgIHRoaXMuc3RhdGUudG91Y2hhYmxlLnRvdWNoU3RhdGUgPSBTdGF0ZXMuTk9UX1JFU1BPTkRFUjtcbiAgICB0aGlzLnN0YXRlLnRvdWNoYWJsZS5yZXNwb25kZXJJRCA9IGRpc3BhdGNoSUQ7XG4gICAgdGhpcy5fcmVjZWl2ZVNpZ25hbChTaWduYWxzLlJFU1BPTkRFUl9HUkFOVCwgZSk7XG4gICAgbGV0IGRlbGF5TVMgPVxuICAgICAgdGhpcy50b3VjaGFibGVHZXRIaWdobGlnaHREZWxheU1TICE9PSB1bmRlZmluZWQgP1xuICAgICAgTWF0aC5tYXgodGhpcy50b3VjaGFibGVHZXRIaWdobGlnaHREZWxheU1TKCksIDApIDogSElHSExJR0hUX0RFTEFZX01TO1xuICAgIGRlbGF5TVMgPSBpc05hTihkZWxheU1TKSA/IEhJR0hMSUdIVF9ERUxBWV9NUyA6IGRlbGF5TVM7XG4gICAgaWYgKGRlbGF5TVMgIT09IDApIHtcbiAgICAgIHRoaXMudG91Y2hhYmxlRGVsYXlUaW1lb3V0ID0gc2V0VGltZW91dChcbiAgICAgICAgdGhpcy5faGFuZGxlRGVsYXkuYmluZCh0aGlzLCBlKSxcbiAgICAgICAgZGVsYXlNU1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5faGFuZGxlRGVsYXkoZSk7XG4gICAgfVxuXG4gICAgbGV0IGxvbmdEZWxheU1TID1cbiAgICAgIHRoaXMudG91Y2hhYmxlR2V0TG9uZ1ByZXNzRGVsYXlNUyAhPT0gdW5kZWZpbmVkID9cbiAgICAgIE1hdGgubWF4KHRoaXMudG91Y2hhYmxlR2V0TG9uZ1ByZXNzRGVsYXlNUygpLCAxMCkgOiBMT05HX1BSRVNTX0RFTEFZX01TO1xuICAgIGxvbmdEZWxheU1TID0gaXNOYU4obG9uZ0RlbGF5TVMpID8gTE9OR19QUkVTU19ERUxBWV9NUyA6IGxvbmdEZWxheU1TO1xuICAgIHRoaXMubG9uZ1ByZXNzRGVsYXlUaW1lb3V0ID0gc2V0VGltZW91dChcbiAgICAgIHRoaXMuX2hhbmRsZUxvbmdEZWxheS5iaW5kKHRoaXMsIGUpLFxuICAgICAgbG9uZ0RlbGF5TVMgKyBkZWxheU1TXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogUGxhY2UgYXMgY2FsbGJhY2sgZm9yIGEgRE9NIGVsZW1lbnQncyBgb25SZXNwb25kZXJSZWxlYXNlYCBldmVudC5cbiAgICovXG4gIHRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlclJlbGVhc2U6IGZ1bmN0aW9uKGUpIHtcbiAgICB0aGlzLl9yZWNlaXZlU2lnbmFsKFNpZ25hbHMuUkVTUE9OREVSX1JFTEVBU0UsIGUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBQbGFjZSBhcyBjYWxsYmFjayBmb3IgYSBET00gZWxlbWVudCdzIGBvblJlc3BvbmRlclRlcm1pbmF0ZWAgZXZlbnQuXG4gICAqL1xuICB0b3VjaGFibGVIYW5kbGVSZXNwb25kZXJUZXJtaW5hdGU6IGZ1bmN0aW9uKGUpIHtcbiAgICB0aGlzLl9yZWNlaXZlU2lnbmFsKFNpZ25hbHMuUkVTUE9OREVSX1RFUk1JTkFURUQsIGUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBQbGFjZSBhcyBjYWxsYmFjayBmb3IgYSBET00gZWxlbWVudCdzIGBvblJlc3BvbmRlck1vdmVgIGV2ZW50LlxuICAgKi9cbiAgdG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyTW92ZTogZnVuY3Rpb24oZSkge1xuICAgIC8vIE5vdCBlbm91Z2ggdGltZSBlbGFwc2VkIHlldCwgd2FpdCBmb3IgaGlnaGxpZ2h0IC1cbiAgICAvLyB0aGlzIGlzIGp1c3QgYSBwZXJmIG9wdGltaXphdGlvbi5cbiAgICBpZiAodGhpcy5zdGF0ZS50b3VjaGFibGUudG91Y2hTdGF0ZSA9PT0gU3RhdGVzLlJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19JTikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIE1lYXN1cmVtZW50IG1heSBub3QgaGF2ZSByZXR1cm5lZCB5ZXQuXG4gICAgaWYgKCF0aGlzLnN0YXRlLnRvdWNoYWJsZS5wb3NpdGlvbk9uQWN0aXZhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwb3NpdGlvbk9uQWN0aXZhdGUgPSB0aGlzLnN0YXRlLnRvdWNoYWJsZS5wb3NpdGlvbk9uQWN0aXZhdGU7XG4gICAgY29uc3QgZGltZW5zaW9uc09uQWN0aXZhdGUgPSB0aGlzLnN0YXRlLnRvdWNoYWJsZS5kaW1lbnNpb25zT25BY3RpdmF0ZTtcbiAgICBjb25zdCBwcmVzc1JlY3RPZmZzZXQgPSB0aGlzLnRvdWNoYWJsZUdldFByZXNzUmVjdE9mZnNldCA/XG4gICAgICB0aGlzLnRvdWNoYWJsZUdldFByZXNzUmVjdE9mZnNldCgpIDoge1xuICAgICAgICBsZWZ0OiBQUkVTU19FWFBBTkRfUFgsXG4gICAgICAgIHJpZ2h0OiBQUkVTU19FWFBBTkRfUFgsXG4gICAgICAgIHRvcDogUFJFU1NfRVhQQU5EX1BYLFxuICAgICAgICBib3R0b206IFBSRVNTX0VYUEFORF9QWFxuICAgICAgfTtcblxuICAgIGxldCBwcmVzc0V4cGFuZExlZnQgPSBwcmVzc1JlY3RPZmZzZXQubGVmdDtcbiAgICBsZXQgcHJlc3NFeHBhbmRUb3AgPSBwcmVzc1JlY3RPZmZzZXQudG9wO1xuICAgIGxldCBwcmVzc0V4cGFuZFJpZ2h0ID0gcHJlc3NSZWN0T2Zmc2V0LnJpZ2h0O1xuICAgIGxldCBwcmVzc0V4cGFuZEJvdHRvbSA9IHByZXNzUmVjdE9mZnNldC5ib3R0b207XG5cbiAgICBjb25zdCBoaXRTbG9wID0gdGhpcy50b3VjaGFibGVHZXRIaXRTbG9wID9cbiAgICAgIHRoaXMudG91Y2hhYmxlR2V0SGl0U2xvcCgpIDogbnVsbDtcblxuICAgIGlmIChoaXRTbG9wKSB7XG4gICAgICBwcmVzc0V4cGFuZExlZnQgKz0gaGl0U2xvcC5sZWZ0O1xuICAgICAgcHJlc3NFeHBhbmRUb3AgKz0gaGl0U2xvcC50b3A7XG4gICAgICBwcmVzc0V4cGFuZFJpZ2h0ICs9IGhpdFNsb3AucmlnaHQ7XG4gICAgICBwcmVzc0V4cGFuZEJvdHRvbSArPSBoaXRTbG9wLmJvdHRvbTtcbiAgICB9XG5cbiAgICBjb25zdCB0b3VjaCA9IFRvdWNoRXZlbnRVdGlscy5leHRyYWN0U2luZ2xlVG91Y2goZS5uYXRpdmVFdmVudCk7XG4gICAgY29uc3QgcGFnZVggPSB0b3VjaCAmJiB0b3VjaC5wYWdlWDtcbiAgICBjb25zdCBwYWdlWSA9IHRvdWNoICYmIHRvdWNoLnBhZ2VZO1xuXG4gICAgaWYgKHRoaXMucHJlc3NJbkxvY2F0aW9uKSB7XG4gICAgICBjb25zdCBtb3ZlZERpc3RhbmNlID0gdGhpcy5fZ2V0RGlzdGFuY2VCZXR3ZWVuUG9pbnRzKHBhZ2VYLCBwYWdlWSwgdGhpcy5wcmVzc0luTG9jYXRpb24ucGFnZVgsIHRoaXMucHJlc3NJbkxvY2F0aW9uLnBhZ2VZKTtcbiAgICAgIGlmIChtb3ZlZERpc3RhbmNlID4gTE9OR19QUkVTU19BTExPV0VEX01PVkVNRU5UKSB7XG4gICAgICAgIHRoaXMuX2NhbmNlbExvbmdQcmVzc0RlbGF5VGltZW91dCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGlzVG91Y2hXaXRoaW5BY3RpdmUgPVxuICAgICAgICBwYWdlWCA+IHBvc2l0aW9uT25BY3RpdmF0ZS5sZWZ0IC0gcHJlc3NFeHBhbmRMZWZ0ICYmXG4gICAgICAgIHBhZ2VZID4gcG9zaXRpb25PbkFjdGl2YXRlLnRvcCAtIHByZXNzRXhwYW5kVG9wICYmXG4gICAgICAgIHBhZ2VYIDxcbiAgICAgICAgICBwb3NpdGlvbk9uQWN0aXZhdGUubGVmdCArXG4gICAgICAgICAgZGltZW5zaW9uc09uQWN0aXZhdGUud2lkdGggK1xuICAgICAgICAgIHByZXNzRXhwYW5kUmlnaHQgJiZcbiAgICAgICAgcGFnZVkgPFxuICAgICAgICAgIHBvc2l0aW9uT25BY3RpdmF0ZS50b3AgK1xuICAgICAgICAgIGRpbWVuc2lvbnNPbkFjdGl2YXRlLmhlaWdodCArXG4gICAgICAgICAgcHJlc3NFeHBhbmRCb3R0b207XG4gICAgaWYgKGlzVG91Y2hXaXRoaW5BY3RpdmUpIHtcbiAgICAgIHRoaXMuX3JlY2VpdmVTaWduYWwoU2lnbmFscy5FTlRFUl9QUkVTU19SRUNULCBlKTtcbiAgICAgIGNvbnN0IGN1clN0YXRlID0gdGhpcy5zdGF0ZS50b3VjaGFibGUudG91Y2hTdGF0ZTtcbiAgICAgIGlmIChjdXJTdGF0ZSA9PT0gU3RhdGVzLlJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19JTikge1xuICAgICAgICAvLyBmaXggZm9yIHQ3OTY3NDIwXG4gICAgICAgIHRoaXMuX2NhbmNlbExvbmdQcmVzc0RlbGF5VGltZW91dCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9jYW5jZWxMb25nUHJlc3NEZWxheVRpbWVvdXQoKTtcbiAgICAgIHRoaXMuX3JlY2VpdmVTaWduYWwoU2lnbmFscy5MRUFWRV9QUkVTU19SRUNULCBlKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gPT09PSBBYnN0cmFjdCBBcHBsaWNhdGlvbiBDYWxsYmFja3MgPT09PVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGl0ZW0gc2hvdWxkIGJlIGhpZ2hsaWdodGVkLiBNaXhlcnMgc2hvdWxkIGltcGxlbWVudCB0aGlzXG4gICAqIHRvIHZpc3VhbGx5IGRpc3Rpbmd1aXNoIHRoZSBgVmlzdWFsUmVjdGAgc28gdGhhdCB0aGUgdXNlciBrbm93cyB0aGF0XG4gICAqIHJlbGVhc2luZyBhIHRvdWNoIHdpbGwgcmVzdWx0IGluIGEgXCJzZWxlY3Rpb25cIiAoYW5hbG9nIHRvIGNsaWNrKS5cbiAgICpcbiAgICogQGFic3RyYWN0XG4gICAqIHRvdWNoYWJsZUhhbmRsZUFjdGl2ZVByZXNzSW46IGZ1bmN0aW9uLFxuICAgKi9cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBpdGVtIGlzIFwiYWN0aXZlXCIgKGluIHRoYXQgaXQgaXMgc3RpbGwgZWxpZ2libGUgdG8gYmVjb21lXG4gICAqIGEgXCJzZWxlY3RcIikgYnV0IHRoZSB0b3VjaCBoYXMgbGVmdCB0aGUgYFByZXNzUmVjdGAuIFVzdWFsbHkgdGhlIG1peGVyIHdpbGxcbiAgICogd2FudCB0byB1bmhpZ2hsaWdodCB0aGUgYFZpc3VhbFJlY3RgLiBJZiB0aGUgdXNlciAod2hpbGUgcHJlc3NpbmcpIG1vdmVzXG4gICAqIGJhY2sgaW50byB0aGUgYFByZXNzUmVjdGAgYHRvdWNoYWJsZUhhbmRsZUFjdGl2ZVByZXNzSW5gIHdpbGwgYmUgaW52b2tlZFxuICAgKiBhZ2FpbiBhbmQgdGhlIG1peGVyIHNob3VsZCBwcm9iYWJseSBoaWdobGlnaHQgdGhlIGBWaXN1YWxSZWN0YCBhZ2Fpbi4gVGhpc1xuICAgKiBldmVudCB3aWxsIG5vdCBmaXJlIG9uIGFuIGB0b3VjaEVuZC9tb3VzZVVwYCBldmVudCwgb25seSBtb3ZlIGV2ZW50cyB3aGlsZVxuICAgKiB0aGUgdXNlciBpcyBkZXByZXNzaW5nIHRoZSBtb3VzZS90b3VjaC5cbiAgICpcbiAgICogQGFic3RyYWN0XG4gICAqIHRvdWNoYWJsZUhhbmRsZUFjdGl2ZVByZXNzT3V0OiBmdW5jdGlvblxuICAgKi9cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBpdGVtIGlzIFwic2VsZWN0ZWRcIiAtIG1lYW5pbmcgdGhlIGludGVyYWN0aW9uIGVuZGVkIGJ5XG4gICAqIGxldHRpbmcgdXAgd2hpbGUgdGhlIGl0ZW0gd2FzIGVpdGhlciBpbiB0aGUgc3RhdGVcbiAgICogYFJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfSU5gIG9yIGBSRVNQT05ERVJfSU5BQ1RJVkVfUFJFU1NfSU5gLlxuICAgKlxuICAgKiBAYWJzdHJhY3RcbiAgICogdG91Y2hhYmxlSGFuZGxlUHJlc3M6IGZ1bmN0aW9uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGl0ZW0gaXMgbG9uZyBwcmVzc2VkIC0gbWVhbmluZyB0aGUgaW50ZXJhY3Rpb24gZW5kZWQgYnlcbiAgICogbGV0dGluZyB1cCB3aGlsZSB0aGUgaXRlbSB3YXMgaW4gYFJFU1BPTkRFUl9BQ1RJVkVfTE9OR19QUkVTU19JTmAuIElmXG4gICAqIGB0b3VjaGFibGVIYW5kbGVMb25nUHJlc3NgIGlzICpub3QqIHByb3ZpZGVkLCBgdG91Y2hhYmxlSGFuZGxlUHJlc3NgIHdpbGxcbiAgICogYmUgY2FsbGVkIGFzIGl0IG5vcm1hbGx5IGlzLiBJZiBgdG91Y2hhYmxlSGFuZGxlTG9uZ1ByZXNzYCBpcyBwcm92aWRlZCwgYnlcbiAgICogZGVmYXVsdCBhbnkgYHRvdWNoYWJsZUhhbmRsZVByZXNzYCBjYWxsYmFjayB3aWxsIG5vdCBiZSBpbnZva2VkLiBUb1xuICAgKiBvdmVycmlkZSB0aGlzIGRlZmF1bHQgYmVoYXZpb3IsIG92ZXJyaWRlIGB0b3VjaGFibGVMb25nUHJlc3NDYW5jZWxzUHJlc3NgXG4gICAqIHRvIHJldHVybiBmYWxzZS4gQXMgYSByZXN1bHQsIGB0b3VjaGFibGVIYW5kbGVQcmVzc2Agd2lsbCBiZSBjYWxsZWQgd2hlblxuICAgKiBsaWZ0aW5nIHVwLCBldmVuIGlmIGB0b3VjaGFibGVIYW5kbGVMb25nUHJlc3NgIGhhcyBhbHNvIGJlZW4gY2FsbGVkLlxuICAgKlxuICAgKiBAYWJzdHJhY3RcbiAgICogdG91Y2hhYmxlSGFuZGxlTG9uZ1ByZXNzOiBmdW5jdGlvblxuICAgKi9cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIG1pbGxpcyB0byB3YWl0IGJlZm9yZSB0cmlnZ2VyaW5nIGEgaGlnaGxpZ2h0LlxuICAgKlxuICAgKiBAYWJzdHJhY3RcbiAgICogdG91Y2hhYmxlR2V0SGlnaGxpZ2h0RGVsYXlNUzogZnVuY3Rpb25cbiAgICovXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGFtb3VudCB0byBleHRlbmQgdGhlIGBIaXRSZWN0YCBpbnRvIHRoZSBgUHJlc3NSZWN0YC4gUG9zaXRpdmVcbiAgICogbnVtYmVycyBtZWFuIHRoZSBzaXplIGV4cGFuZHMgb3V0d2FyZHMuXG4gICAqXG4gICAqIEBhYnN0cmFjdFxuICAgKiB0b3VjaGFibGVHZXRQcmVzc1JlY3RPZmZzZXQ6IGZ1bmN0aW9uXG4gICAqL1xuXG5cblxuICAvLyA9PT09IEludGVybmFsIExvZ2ljID09PT1cblxuICAvKipcbiAgICogTWVhc3VyZXMgdGhlIGBIaXRSZWN0YCBub2RlIG9uIGFjdGl2YXRpb24uIFRoZSBCb3VuZGluZyByZWN0YW5nbGUgaXMgd2l0aFxuICAgKiByZXNwZWN0IHRvIHZpZXdwb3J0IC0gbm90IHBhZ2UsIHNvIGFkZGluZyB0aGUgYHBhZ2VYT2Zmc2V0L3BhZ2VZT2Zmc2V0YFxuICAgKiBzaG91bGQgcmVzdWx0IGluIHBvaW50cyB0aGF0IGFyZSBpbiB0aGUgc2FtZSBjb29yZGluYXRlIHN5c3RlbSBhcyBhblxuICAgKiBldmVudCdzIGBnbG9iYWxYL2dsb2JhbFlgIGRhdGEgdmFsdWVzLlxuICAgKlxuICAgKiAtIENvbnNpZGVyIGNhY2hpbmcgdGhpcyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBjb21wb25lbnQsIG9yIHBvc3NpYmx5XG4gICAqICAgYmVpbmcgYWJsZSB0byBzaGFyZSB0aGlzIGNhY2hlIGJldHdlZW4gYW55IGBTY3JvbGxNYXBgIHZpZXcuXG4gICAqXG4gICAqIEBzaWRlZWZmZWN0c1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbWVhc3VyZU1ldHJpY3NPbkFjdGl2YXRpb246IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IHRhZyA9IHRoaXMuc3RhdGUudG91Y2hhYmxlLnJlc3BvbmRlcklEO1xuICAgIGlmICh0YWcgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIFVJTWFuYWdlci5tZWFzdXJlKHRhZywgdGhpcy5faGFuZGxlUXVlcnlMYXlvdXQpO1xuICB9LFxuXG4gIF9oYW5kbGVRdWVyeUxheW91dDogZnVuY3Rpb24obCwgdCwgdywgaCwgZ2xvYmFsWCwgZ2xvYmFsWSkge1xuICAgIC8vZG9uJ3QgZG8gYW55dGhpbmcgVUlNYW5hZ2VyIGZhaWxlZCB0byBtZWFzdXJlIG5vZGVcbiAgICBpZiAoIWwgJiYgIXQgJiYgIXcgJiYgIWggJiYgIWdsb2JhbFggJiYgIWdsb2JhbFkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zdGF0ZS50b3VjaGFibGUucG9zaXRpb25PbkFjdGl2YXRlICYmXG4gICAgICBQb3NpdGlvbi5yZWxlYXNlKHRoaXMuc3RhdGUudG91Y2hhYmxlLnBvc2l0aW9uT25BY3RpdmF0ZSk7XG4gICAgdGhpcy5zdGF0ZS50b3VjaGFibGUuZGltZW5zaW9uc09uQWN0aXZhdGUgJiZcbiAgICAgIEJvdW5kaW5nRGltZW5zaW9ucy5yZWxlYXNlKHRoaXMuc3RhdGUudG91Y2hhYmxlLmRpbWVuc2lvbnNPbkFjdGl2YXRlKTtcbiAgICB0aGlzLnN0YXRlLnRvdWNoYWJsZS5wb3NpdGlvbk9uQWN0aXZhdGUgPSBQb3NpdGlvbi5nZXRQb29sZWQoZ2xvYmFsWCwgZ2xvYmFsWSk7XG4gICAgdGhpcy5zdGF0ZS50b3VjaGFibGUuZGltZW5zaW9uc09uQWN0aXZhdGUgPSBCb3VuZGluZ0RpbWVuc2lvbnMuZ2V0UG9vbGVkKHcsIGgpO1xuICB9LFxuXG4gIF9oYW5kbGVEZWxheTogZnVuY3Rpb24oZSkge1xuICAgIHRoaXMudG91Y2hhYmxlRGVsYXlUaW1lb3V0ID0gbnVsbDtcbiAgICB0aGlzLl9yZWNlaXZlU2lnbmFsKFNpZ25hbHMuREVMQVksIGUpO1xuICB9LFxuXG4gIF9oYW5kbGVMb25nRGVsYXk6IGZ1bmN0aW9uKGUpIHtcbiAgICB0aGlzLmxvbmdQcmVzc0RlbGF5VGltZW91dCA9IG51bGw7XG4gICAgY29uc3QgY3VyU3RhdGUgPSB0aGlzLnN0YXRlLnRvdWNoYWJsZS50b3VjaFN0YXRlO1xuICAgIGlmIChjdXJTdGF0ZSAhPT0gU3RhdGVzLlJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfSU4gJiZcbiAgICAgICAgY3VyU3RhdGUgIT09IFN0YXRlcy5SRVNQT05ERVJfQUNUSVZFX0xPTkdfUFJFU1NfSU4pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0F0dGVtcHRlZCB0byB0cmFuc2l0aW9uIGZyb20gc3RhdGUgYCcgKyBjdXJTdGF0ZSArICdgIHRvIGAnICtcbiAgICAgICAgU3RhdGVzLlJFU1BPTkRFUl9BQ1RJVkVfTE9OR19QUkVTU19JTiArICdgLCB3aGljaCBpcyBub3Qgc3VwcG9ydGVkLiBUaGlzIGlzICcgK1xuICAgICAgICAnbW9zdCBsaWtlbHkgZHVlIHRvIGBUb3VjaGFibGUubG9uZ1ByZXNzRGVsYXlUaW1lb3V0YCBub3QgYmVpbmcgY2FuY2VsbGVkLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9yZWNlaXZlU2lnbmFsKFNpZ25hbHMuTE9OR19QUkVTU19ERVRFQ1RFRCwgZSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZWNlaXZlcyBhIHN0YXRlIG1hY2hpbmUgc2lnbmFsLCBwZXJmb3JtcyBzaWRlIGVmZmVjdHMgb2YgdGhlIHRyYW5zaXRpb25cbiAgICogYW5kIHN0b3JlcyB0aGUgbmV3IHN0YXRlLiBWYWxpZGF0ZXMgdGhlIHRyYW5zaXRpb24gYXMgd2VsbC5cbiAgICpcbiAgICogQHBhcmFtIHtTaWduYWxzfSBzaWduYWwgU3RhdGUgbWFjaGluZSBzaWduYWwuXG4gICAqIEB0aHJvd3MgRXJyb3IgaWYgaW52YWxpZCBzdGF0ZSB0cmFuc2l0aW9uIG9yIHVucmVjb2duaXplZCBzaWduYWwuXG4gICAqIEBzaWRlZWZmZWN0c1xuICAgKi9cbiAgX3JlY2VpdmVTaWduYWw6IGZ1bmN0aW9uKHNpZ25hbCwgZSkge1xuICAgIGNvbnN0IHJlc3BvbmRlcklEID0gdGhpcy5zdGF0ZS50b3VjaGFibGUucmVzcG9uZGVySUQ7XG4gICAgY29uc3QgY3VyU3RhdGUgPSB0aGlzLnN0YXRlLnRvdWNoYWJsZS50b3VjaFN0YXRlO1xuICAgIGNvbnN0IG5leHRTdGF0ZSA9IFRyYW5zaXRpb25zW2N1clN0YXRlXSAmJiBUcmFuc2l0aW9uc1tjdXJTdGF0ZV1bc2lnbmFsXTtcbiAgICBpZiAoIXJlc3BvbmRlcklEICYmIHNpZ25hbCA9PT0gU2lnbmFscy5SRVNQT05ERVJfUkVMRUFTRSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIW5leHRTdGF0ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVW5yZWNvZ25pemVkIHNpZ25hbCBgJyArIHNpZ25hbCArICdgIG9yIHN0YXRlIGAnICsgY3VyU3RhdGUgK1xuICAgICAgICAnYCBmb3IgVG91Y2hhYmxlIHJlc3BvbmRlciBgJyArIHJlc3BvbmRlcklEICsgJ2AnXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAobmV4dFN0YXRlID09PSBTdGF0ZXMuRVJST1IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RvdWNoYWJsZSBjYW5ub3QgdHJhbnNpdGlvbiBmcm9tIGAnICsgY3VyU3RhdGUgKyAnYCB0byBgJyArIHNpZ25hbCArXG4gICAgICAgICdgIGZvciByZXNwb25kZXIgYCcgKyByZXNwb25kZXJJRCArICdgJ1xuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGN1clN0YXRlICE9PSBuZXh0U3RhdGUpIHtcbiAgICAgIHRoaXMuX3BlcmZvcm1TaWRlRWZmZWN0c0ZvclRyYW5zaXRpb24oY3VyU3RhdGUsIG5leHRTdGF0ZSwgc2lnbmFsLCBlKTtcbiAgICAgIHRoaXMuc3RhdGUudG91Y2hhYmxlLnRvdWNoU3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgfVxuICB9LFxuXG4gIF9jYW5jZWxMb25nUHJlc3NEZWxheVRpbWVvdXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmxvbmdQcmVzc0RlbGF5VGltZW91dCAmJiBjbGVhclRpbWVvdXQodGhpcy5sb25nUHJlc3NEZWxheVRpbWVvdXQpO1xuICAgIHRoaXMubG9uZ1ByZXNzRGVsYXlUaW1lb3V0ID0gbnVsbDtcbiAgfSxcblxuICBfaXNIaWdobGlnaHQ6IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgIHJldHVybiBzdGF0ZSA9PT0gU3RhdGVzLlJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfSU4gfHxcbiAgICAgICAgICAgc3RhdGUgPT09IFN0YXRlcy5SRVNQT05ERVJfQUNUSVZFX0xPTkdfUFJFU1NfSU47XG4gIH0sXG5cbiAgX3NhdmVQcmVzc0luTG9jYXRpb246IGZ1bmN0aW9uKGUpIHtcbiAgICBjb25zdCB0b3VjaCA9IFRvdWNoRXZlbnRVdGlscy5leHRyYWN0U2luZ2xlVG91Y2goZS5uYXRpdmVFdmVudCk7XG4gICAgY29uc3QgcGFnZVggPSB0b3VjaCAmJiB0b3VjaC5wYWdlWDtcbiAgICBjb25zdCBwYWdlWSA9IHRvdWNoICYmIHRvdWNoLnBhZ2VZO1xuICAgIGNvbnN0IGxvY2F0aW9uWCA9IHRvdWNoICYmIHRvdWNoLmxvY2F0aW9uWDtcbiAgICBjb25zdCBsb2NhdGlvblkgPSB0b3VjaCAmJiB0b3VjaC5sb2NhdGlvblk7XG4gICAgdGhpcy5wcmVzc0luTG9jYXRpb24gPSB7cGFnZVgsIHBhZ2VZLCBsb2NhdGlvblgsIGxvY2F0aW9uWX07XG4gIH0sXG5cbiAgX2dldERpc3RhbmNlQmV0d2VlblBvaW50czogZnVuY3Rpb24gKGFYLCBhWSwgYlgsIGJZKSB7XG4gICAgY29uc3QgZGVsdGFYID0gYVggLSBiWDtcbiAgICBjb25zdCBkZWx0YVkgPSBhWSAtIGJZO1xuICAgIHJldHVybiBNYXRoLnNxcnQoZGVsdGFYICogZGVsdGFYICsgZGVsdGFZICogZGVsdGFZKTtcbiAgfSxcblxuICAvKipcbiAgICogV2lsbCBwZXJmb3JtIGEgdHJhbnNpdGlvbiBiZXR3ZWVuIHRvdWNoYWJsZSBzdGF0ZXMsIGFuZCBpZGVudGlmeSBhbnlcbiAgICogaGlnaGxpZ2h0aW5nIG9yIHVuaGlnaGxpZ2h0aW5nIHRoYXQgbXVzdCBiZSBwZXJmb3JtZWQgZm9yIHRoaXMgcGFydGljdWxhclxuICAgKiB0cmFuc2l0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0YXRlc30gY3VyU3RhdGUgQ3VycmVudCBUb3VjaGFibGUgc3RhdGUuXG4gICAqIEBwYXJhbSB7U3RhdGVzfSBuZXh0U3RhdGUgTmV4dCBUb3VjaGFibGUgc3RhdGUuXG4gICAqIEBwYXJhbSB7U2lnbmFsfSBzaWduYWwgU2lnbmFsIHRoYXQgdHJpZ2dlcmVkIHRoZSB0cmFuc2l0aW9uLlxuICAgKiBAcGFyYW0ge0V2ZW50fSBlIE5hdGl2ZSBldmVudC5cbiAgICogQHNpZGVlZmZlY3RzXG4gICAqL1xuICBfcGVyZm9ybVNpZGVFZmZlY3RzRm9yVHJhbnNpdGlvbjogZnVuY3Rpb24oY3VyU3RhdGUsIG5leHRTdGF0ZSwgc2lnbmFsLCBlKSB7XG4gICAgY29uc3QgY3VySXNIaWdobGlnaHQgPSB0aGlzLl9pc0hpZ2hsaWdodChjdXJTdGF0ZSk7XG4gICAgY29uc3QgbmV3SXNIaWdobGlnaHQgPSB0aGlzLl9pc0hpZ2hsaWdodChuZXh0U3RhdGUpO1xuXG4gICAgY29uc3QgaXNGaW5hbFNpZ25hbCA9XG4gICAgICBzaWduYWwgPT09IFNpZ25hbHMuUkVTUE9OREVSX1RFUk1JTkFURUQgfHxcbiAgICAgIHNpZ25hbCA9PT0gU2lnbmFscy5SRVNQT05ERVJfUkVMRUFTRTtcblxuICAgIGlmIChpc0ZpbmFsU2lnbmFsKSB7XG4gICAgICB0aGlzLl9jYW5jZWxMb25nUHJlc3NEZWxheVRpbWVvdXQoKTtcbiAgICB9XG5cbiAgICBpZiAoIUlzQWN0aXZlW2N1clN0YXRlXSAmJiBJc0FjdGl2ZVtuZXh0U3RhdGVdKSB7XG4gICAgICB0aGlzLl9yZW1lYXN1cmVNZXRyaWNzT25BY3RpdmF0aW9uKCk7XG4gICAgfVxuXG4gICAgaWYgKElzUHJlc3NpbmdJbltjdXJTdGF0ZV0gJiYgc2lnbmFsID09PSBTaWduYWxzLkxPTkdfUFJFU1NfREVURUNURUQpIHtcbiAgICAgIHRoaXMudG91Y2hhYmxlSGFuZGxlTG9uZ1ByZXNzICYmIHRoaXMudG91Y2hhYmxlSGFuZGxlTG9uZ1ByZXNzKGUpO1xuICAgIH1cblxuICAgIGlmIChuZXdJc0hpZ2hsaWdodCAmJiAhY3VySXNIaWdobGlnaHQpIHtcbiAgICAgIHRoaXMuX3N0YXJ0SGlnaGxpZ2h0KGUpO1xuICAgIH0gZWxzZSBpZiAoIW5ld0lzSGlnaGxpZ2h0ICYmIGN1cklzSGlnaGxpZ2h0KSB7XG4gICAgICB0aGlzLl9lbmRIaWdobGlnaHQoZSk7XG4gICAgfVxuXG4gICAgaWYgKElzUHJlc3NpbmdJbltjdXJTdGF0ZV0gJiYgc2lnbmFsID09PSBTaWduYWxzLlJFU1BPTkRFUl9SRUxFQVNFKSB7XG4gICAgICBjb25zdCBoYXNMb25nUHJlc3NIYW5kbGVyID0gISF0aGlzLnByb3BzLm9uTG9uZ1ByZXNzO1xuICAgICAgY29uc3QgcHJlc3NJc0xvbmdCdXRTdGlsbENhbGxPblByZXNzID1cbiAgICAgICAgSXNMb25nUHJlc3NpbmdJbltjdXJTdGF0ZV0gJiYgKCAgICAvLyBXZSAqYXJlKiBsb25nIHByZXNzaW5nLi5cbiAgICAgICAgICAoLy8gQnV0IGVpdGhlciBoYXMgbm8gbG9uZyBoYW5kbGVyXG4gICAgICAgICAgIWhhc0xvbmdQcmVzc0hhbmRsZXIgfHwgIXRoaXMudG91Y2hhYmxlTG9uZ1ByZXNzQ2FuY2Vsc1ByZXNzKCkpIC8vIG9yIHdlJ3JlIHRvbGQgdG8gaWdub3JlIGl0LlxuICAgICAgICApO1xuXG4gICAgICBjb25zdCBzaG91bGRJbnZva2VQcmVzcyA9ICAhSXNMb25nUHJlc3NpbmdJbltjdXJTdGF0ZV0gfHwgcHJlc3NJc0xvbmdCdXRTdGlsbENhbGxPblByZXNzO1xuICAgICAgaWYgKHNob3VsZEludm9rZVByZXNzICYmIHRoaXMudG91Y2hhYmxlSGFuZGxlUHJlc3MpIHtcbiAgICAgICAgaWYgKCFuZXdJc0hpZ2hsaWdodCAmJiAhY3VySXNIaWdobGlnaHQpIHtcbiAgICAgICAgICAvLyB3ZSBuZXZlciBoaWdobGlnaHRlZCBiZWNhdXNlIG9mIGRlbGF5LCBidXQgd2Ugc2hvdWxkIGhpZ2hsaWdodCBub3dcbiAgICAgICAgICB0aGlzLl9zdGFydEhpZ2hsaWdodChlKTtcbiAgICAgICAgICB0aGlzLl9lbmRIaWdobGlnaHQoZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50b3VjaGFibGVIYW5kbGVQcmVzcyhlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnRvdWNoYWJsZURlbGF5VGltZW91dCAmJiBjbGVhclRpbWVvdXQodGhpcy50b3VjaGFibGVEZWxheVRpbWVvdXQpO1xuICAgIHRoaXMudG91Y2hhYmxlRGVsYXlUaW1lb3V0ID0gbnVsbDtcbiAgfSxcblxuICBfc3RhcnRIaWdobGlnaHQ6IGZ1bmN0aW9uKGUpIHtcbiAgICB0aGlzLl9zYXZlUHJlc3NJbkxvY2F0aW9uKGUpO1xuICAgIHRoaXMudG91Y2hhYmxlSGFuZGxlQWN0aXZlUHJlc3NJbiAmJiB0aGlzLnRvdWNoYWJsZUhhbmRsZUFjdGl2ZVByZXNzSW4oZSk7XG4gIH0sXG5cbiAgX2VuZEhpZ2hsaWdodDogZnVuY3Rpb24oZSkge1xuICAgIGlmICh0aGlzLnRvdWNoYWJsZUhhbmRsZUFjdGl2ZVByZXNzT3V0KSB7XG4gICAgICBpZiAodGhpcy50b3VjaGFibGVHZXRQcmVzc091dERlbGF5TVMgJiYgdGhpcy50b3VjaGFibGVHZXRQcmVzc091dERlbGF5TVMoKSkge1xuICAgICAgICB0aGlzLnByZXNzT3V0RGVsYXlUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy50b3VjaGFibGVIYW5kbGVBY3RpdmVQcmVzc091dChlKTtcbiAgICAgICAgfSwgdGhpcy50b3VjaGFibGVHZXRQcmVzc091dERlbGF5TVMoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRvdWNoYWJsZUhhbmRsZUFjdGl2ZVByZXNzT3V0KGUpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxufTtcblxuY29uc3QgVG91Y2hhYmxlID0ge1xuICBNaXhpbjogVG91Y2hhYmxlTWl4aW4sXG4gIFRPVUNIX1RBUkdFVF9ERUJVRzogZmFsc2UsIC8vIEhpZ2hsaWdodHMgYWxsIHRvdWNoYWJsZSB0YXJnZXRzLiBUb2dnbGUgd2l0aCBJbnNwZWN0b3IuXG4gIC8qKlxuICAgKiBSZW5kZXJzIGEgZGVidWdnaW5nIG92ZXJsYXkgdG8gdmlzdWFsaXplIHRvdWNoIHRhcmdldCB3aXRoIGhpdFNsb3AgKG1pZ2h0IG5vdCB3b3JrIG9uIEFuZHJvaWQpLlxuICAgKi9cbiAgcmVuZGVyRGVidWdWaWV3OiAoe2NvbG9yLCBoaXRTbG9wfSkgPT4ge1xuICAgIGlmICghVG91Y2hhYmxlLlRPVUNIX1RBUkdFVF9ERUJVRykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICghX19ERVZfXykge1xuICAgICAgdGhyb3cgRXJyb3IoJ1RvdWNoYWJsZS5UT1VDSF9UQVJHRVRfREVCVUcgc2hvdWxkIG5vdCBiZSBlbmFibGVkIGluIHByb2QhJyk7XG4gICAgfVxuICAgIGNvbnN0IGRlYnVnSGl0U2xvcFN0eWxlID0ge307XG4gICAgaGl0U2xvcCA9IGhpdFNsb3AgfHwge3RvcDogMCwgYm90dG9tOiAwLCBsZWZ0OiAwLCByaWdodDogMH07XG4gICAgZm9yIChjb25zdCBrZXkgaW4gaGl0U2xvcCkge1xuICAgICAgZGVidWdIaXRTbG9wU3R5bGVba2V5XSA9IC1oaXRTbG9wW2tleV07XG4gICAgfVxuICAgIGNvbnN0IGhleENvbG9yID0gJyMnICsgKCcwMDAwMDAwMCcgKyBub3JtYWxpemVDb2xvcihjb2xvcikudG9TdHJpbmcoMTYpKS5zdWJzdHIoLTgpO1xuICAgIHJldHVybiAoXG4gICAgICA8Vmlld1xuICAgICAgICBwb2ludGVyRXZlbnRzPVwibm9uZVwiXG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgYm9yZGVyQ29sb3I6IGhleENvbG9yLnNsaWNlKDAsIC0yKSArICc1NScsIC8vIE1vcmUgb3BhcXVlXG4gICAgICAgICAgYm9yZGVyV2lkdGg6IDEsXG4gICAgICAgICAgYm9yZGVyU3R5bGU6ICdkYXNoZWQnLFxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogaGV4Q29sb3Iuc2xpY2UoMCwgLTIpICsgJzBGJywgLy8gTGVzcyBvcGFxdWVcbiAgICAgICAgICAuLi5kZWJ1Z0hpdFNsb3BTdHlsZVxuICAgICAgICB9fVxuICAgICAgLz5cbiAgICApO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRvdWNoYWJsZTtcbiJdfQ==