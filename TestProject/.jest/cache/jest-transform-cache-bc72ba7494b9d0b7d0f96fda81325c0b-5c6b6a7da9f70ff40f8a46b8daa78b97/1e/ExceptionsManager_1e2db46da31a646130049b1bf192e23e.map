{"version":3,"sources":["ExceptionsManager.js"],"names":["exceptionID","reportException","e","isFatal","require","ExceptionsManager","parseErrorStack","stack","currentExceptionID","reportFatalException","message","reportSoftException","__DEV__","symbolicateStackTrace","then","prettyStack","updateExceptionMessage","Error","catch","error","console","warn","handleException","_errorOriginal","reactConsoleErrorHandler","apply","arguments","reportErrorsAsExceptions","stringifySafe","str","Array","prototype","map","call","join","slice","framesToPop","installConsoleErrorReporter","bind","undefined","module","exports"],"mappings":"AASA,aAOA,GAAIA,aAAc,CAAlB,CACA,QAASC,gBAAT,CAAyBC,CAAzB,CAA2CC,OAA3C,CAA0D,cAC5BC,OAD4B,kBACjDC,iBADiD,UACjDA,iBADiD,CAExD,GAAIA,iBAAJ,CAAuB,CACrB,GAAMC,iBAAkBF,OAAlB,mBAAN,CACA,GAAMG,OAAQD,gBAAgBJ,CAAhB,CAAd,CACA,GAAMM,oBAAqB,EAAER,WAA7B,CACA,GAAIG,OAAJ,CAAa,CACXE,kBAAkBI,oBAAlB,CAAuCP,EAAEQ,OAAzC,CAAkDH,KAAlD,CAAyDC,kBAAzD,EACD,CAFD,IAEO,CACLH,kBAAkBM,mBAAlB,CAAsCT,EAAEQ,OAAxC,CAAiDH,KAAjD,CAAwDC,kBAAxD,EACD,CACD,GAAII,OAAJ,CAAa,CACX,GAAMC,uBAAwBT,OAAxB,yBAAN,CACAS,sBAAsBN,KAAtB,EAA6BO,IAA7B,CACE,SAACC,WAAD,CAAiB,CACf,GAAIA,WAAJ,CAAiB,CACfV,kBAAkBW,sBAAlB,CAAyCd,EAAEQ,OAA3C,CAAoDK,WAApD,CAAiEP,kBAAjE,EACD,CAFD,IAEO,CACL,KAAM,IAAIS,MAAJ,CAAU,mBAAV,CAAN,CACD,CACF,CAPH,EAQEC,KARF,CASE,SAACC,KAAD,QAAWC,SAAQC,IAAR,CAAa,sCAAwCF,MAAMT,OAA3D,CAAX,EATF,EAWD,CACF,CACF,CAUD,QAASY,gBAAT,CAAyBpB,CAAzB,CAAmCC,OAAnC,CAAqD,CAKnD,GAAI,CAACD,EAAEQ,OAAP,CAAgB,CACdR,EAAI,GAAIe,MAAJ,CAAUf,CAAV,CAAJ,CACD,CACD,GAAIkB,QAAQG,cAAZ,CAA4B,CAC1BH,QAAQG,cAAR,CAAuBrB,EAAEQ,OAAzB,EACD,CAFD,IAEO,CACLU,QAAQD,KAAR,CAAcjB,EAAEQ,OAAhB,EACD,CACDT,gBAAgBC,CAAhB,CAAmBC,OAAnB,EACD,CAED,QAASqB,yBAAT,EAAoC,CAClCJ,QAAQG,cAAR,CAAuBE,KAAvB,CAA6BL,OAA7B,CAAsCM,SAAtC,EACA,GAAI,CAACN,QAAQO,wBAAb,CAAuC,CACrC,OACD,CAED,GAAID,UAAU,CAAV,GAAgBA,UAAU,CAAV,EAAanB,KAAjC,CAAwC,CACtCN,gBAAgByB,UAAU,CAAV,CAAhB,CAA4C,KAA5C,EACD,CAFD,IAEO,CACL,GAAME,eAAgBxB,OAAhB,iBAAN,CACA,GAAMyB,KAAMC,MAAMC,SAAN,CAAgBC,GAAhB,CAAoBC,IAApB,CAAyBP,SAAzB,CAAoCE,aAApC,EAAmDM,IAAnD,CAAwD,IAAxD,CAAZ,CACA,GAAIL,IAAIM,KAAJ,CAAU,CAAV,CAAa,EAAb,IAAqB,YAAzB,CAAuC,CAIrC,OACD,CACD,GAAMhB,OAAwB,GAAIF,MAAJ,CAAU,kBAAoBY,GAA9B,CAA9B,CACAV,MAAMiB,WAAN,CAAoB,CAApB,CACAnC,gBAAgBkB,KAAhB,CAAqC,KAArC,EACD,CACF,CAMD,QAASkB,4BAAT,EAAuC,CAErC,GAAIjB,QAAQG,cAAZ,CAA4B,CAC1B,OACD,CAEDH,QAAQG,cAAR,CAAyBH,QAAQD,KAAR,CAAcmB,IAAd,CAAmBlB,OAAnB,CAAzB,CACAA,QAAQD,KAAR,CAAgBK,wBAAhB,CACA,GAAIJ,QAAQO,wBAAR,GAAqCY,SAAzC,CAAoD,CAGlDnB,QAAQO,wBAAR,CAAmC,IAAnC,CACD,CACF,CAEDa,OAAOC,OAAP,CAAiB,CAAEnB,+BAAF,CAAmBe,uDAAnB,CAAjB","file":"ExceptionsManager.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule ExceptionsManager\n * @flow\n */\n'use strict';\n\nimport type {ExtendedError} from 'parseErrorStack';\n\n/**\n * Handles the developer-visible aspect of errors and exceptions\n */\nlet exceptionID = 0;\nfunction reportException(e: ExtendedError, isFatal: bool) {\n  const {ExceptionsManager} = require('NativeModules');\n  if (ExceptionsManager) {\n    const parseErrorStack = require('parseErrorStack');\n    const stack = parseErrorStack(e);\n    const currentExceptionID = ++exceptionID;\n    if (isFatal) {\n      ExceptionsManager.reportFatalException(e.message, stack, currentExceptionID);\n    } else {\n      ExceptionsManager.reportSoftException(e.message, stack, currentExceptionID);\n    }\n    if (__DEV__) {\n      const symbolicateStackTrace = require('symbolicateStackTrace');\n      symbolicateStackTrace(stack).then(\n        (prettyStack) => {\n          if (prettyStack) {\n            ExceptionsManager.updateExceptionMessage(e.message, prettyStack, currentExceptionID);\n          } else {\n            throw new Error('The stack is null');\n          }\n        }\n      ).catch(\n        (error) => console.warn('Unable to symbolicate stack trace: ' + error.message)\n      );\n    }\n  }\n}\n\ndeclare var console: typeof console & {\n  _errorOriginal: Function,\n  reportErrorsAsExceptions: boolean,\n};\n\n/**\n * Logs exceptions to the (native) console and displays them\n */\nfunction handleException(e: Error, isFatal: boolean) {\n  // Workaround for reporting errors caused by `throw 'some string'`\n  // Unfortunately there is no way to figure out the stacktrace in this\n  // case, so if you ended up here trying to trace an error, look for\n  // `throw '<error message>'` somewhere in your codebase.\n  if (!e.message) {\n    e = new Error(e);\n  }\n  if (console._errorOriginal) {\n    console._errorOriginal(e.message);\n  } else {\n    console.error(e.message);\n  }\n  reportException(e, isFatal);\n}\n\nfunction reactConsoleErrorHandler() {\n  console._errorOriginal.apply(console, arguments);\n  if (!console.reportErrorsAsExceptions) {\n    return;\n  }\n\n  if (arguments[0] && arguments[0].stack) {\n    reportException(arguments[0], /* isFatal */ false);\n  } else {\n    const stringifySafe = require('stringifySafe');\n    const str = Array.prototype.map.call(arguments, stringifySafe).join(', ');\n    if (str.slice(0, 10) === '\"Warning: ') {\n      // React warnings use console.error so that a stack trace is shown, but\n      // we don't (currently) want these to show a redbox\n      // (Note: Logic duplicated in polyfills/console.js.)\n      return;\n    }\n    const error : ExtendedError = new Error('console.error: ' + str);\n    error.framesToPop = 1;\n    reportException(error, /* isFatal */ false);\n  }\n}\n\n/**\n * Shows a redbox with stacktrace for all console.error messages.  Disable by\n * setting `console.reportErrorsAsExceptions = false;` in your app.\n */\nfunction installConsoleErrorReporter() {\n  // Enable reportErrorsAsExceptions\n  if (console._errorOriginal) {\n    return; // already installed\n  }\n  // Flow doesn't like it when you set arbitrary values on a global object\n  console._errorOriginal = console.error.bind(console);\n  console.error = reactConsoleErrorHandler;\n  if (console.reportErrorsAsExceptions === undefined) {\n    // Individual apps can disable this\n    // Flow doesn't like it when you set arbitrary values on a global object\n    console.reportErrorsAsExceptions = true;\n  }\n}\n\nmodule.exports = { handleException, installConsoleErrorReporter };\n"]}