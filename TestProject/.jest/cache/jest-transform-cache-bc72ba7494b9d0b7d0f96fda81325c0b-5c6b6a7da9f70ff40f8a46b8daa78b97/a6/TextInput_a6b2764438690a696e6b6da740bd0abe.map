{"version":3,"sources":["TextInput.js"],"names":["ColorPropType","require","DocumentSelectionState","EventEmitter","NativeMethodsMixin","Platform","React","createReactClass","PropTypes","ReactNative","StyleSheet","Text","TextInputState","TimerMixin","TouchableWithoutFeedback","UIManager","ViewPropTypes","ViewContextTypes","emptyFunction","invariant","requireNativeComponent","warning","AndroidTextInput","RCTMultilineTextInputView","RCTSinglelineTextInputView","onlyMultiline","onTextInput","children","OS","DataDetectorTypes","TextInput","displayName","statics","State","propTypes","autoCapitalize","oneOf","autoCorrect","bool","spellCheck","autoFocus","allowFontScaling","editable","keyboardType","keyboardAppearance","returnKeyType","returnKeyLabel","string","maxLength","number","numberOfLines","disableFullscreenUI","enablesReturnKeyAutomatically","multiline","textBreakStrategy","onBlur","func","onFocus","onChange","onChangeText","onContentSizeChange","onEndEditing","onSelectionChange","onSubmitEditing","onKeyPress","onLayout","onScroll","placeholder","placeholderTextColor","secureTextEntry","selectionColor","selectionState","instanceOf","selection","shape","start","isRequired","end","value","defaultValue","clearButtonMode","clearTextOnFocus","selectTextOnFocus","blurOnSubmit","style","underlineColorAndroid","inlineImageLeft","inlineImagePadding","dataDetectorTypes","oneOfType","arrayOf","caretHidden","contextMenuHidden","inputAccessoryViewID","getDefaultProps","mixins","isFocused","currentlyFocusedField","findNodeHandle","_inputRef","undefined","_focusSubscription","_lastNativeText","_lastNativeSelection","componentDidMount","props","context","focusEmitter","requestAnimationFrame","focus","addListener","el","blur","onFocusRequested","componentWillUnmount","remove","getChildContext","isInAParentText","childContextTypes","contextTypes","clear","setNativeProps","text","render","RCTVirtualText","_renderIOS","_renderIOSLegacy","_renderAndroid","_getText","_setNativeRef","ref","textContainer","__DEV__","propKey","error","Error","stack","_onFocus","_onBlur","_onChange","_onSelectionChange","thatReturnsTrue","childCount","Children","forEach","inputView","unshift","styles","multilineInput","_onTextInput","_onScroll","_onPress","accessible","accessibilityLabel","accessibilityTraits","nativeID","testID","RCTTextInputView","Constants","AutoCapitalizationType","accessibilityComponentType","event","mostRecentEventCount","nativeEvent","eventCount","forceUpdate","componentDidUpdate","nativeProps","Object","keys","length","update","create","paddingTop","module","exports"],"mappings":"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","file":"TextInput.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule TextInput\n * @flow\n * @format\n */\n'use strict';\n\nconst ColorPropType = require('ColorPropType');\nconst DocumentSelectionState = require('DocumentSelectionState');\nconst EventEmitter = require('EventEmitter');\nconst NativeMethodsMixin = require('NativeMethodsMixin');\nconst Platform = require('Platform');\nconst React = require('React');\nconst createReactClass = require('create-react-class');\nconst PropTypes = require('prop-types');\nconst ReactNative = require('ReactNative');\nconst StyleSheet = require('StyleSheet');\nconst Text = require('Text');\nconst TextInputState = require('TextInputState');\n/* $FlowFixMe(>=0.54.0 site=react_native_oss) This comment suppresses an error\n * found when Flow v0.54 was deployed. To see the error delete this comment and\n * run Flow. */\nconst TimerMixin = require('react-timer-mixin');\nconst TouchableWithoutFeedback = require('TouchableWithoutFeedback');\nconst UIManager = require('UIManager');\nconst ViewPropTypes = require('ViewPropTypes');\nconst {ViewContextTypes} = require('ViewContext');\n\nconst emptyFunction = require('fbjs/lib/emptyFunction');\nconst invariant = require('fbjs/lib/invariant');\nconst requireNativeComponent = require('requireNativeComponent');\n/* $FlowFixMe(>=0.54.0 site=react_native_oss) This comment suppresses an error\n * found when Flow v0.54 was deployed. To see the error delete this comment and\n * run Flow. */\nconst warning = require('fbjs/lib/warning');\n\nlet AndroidTextInput;\nlet RCTMultilineTextInputView;\nlet RCTSinglelineTextInputView;\n\nconst onlyMultiline = {\n  onTextInput: true,\n  children: true,\n};\n\nimport type {ViewChildContext} from 'ViewContext';\n\nif (Platform.OS === 'android') {\n  AndroidTextInput = requireNativeComponent('AndroidTextInput', null);\n} else if (Platform.OS === 'ios') {\n  RCTMultilineTextInputView = requireNativeComponent(\n    'RCTMultilineTextInputView',\n    null,\n  );\n  RCTSinglelineTextInputView = requireNativeComponent(\n    'RCTSinglelineTextInputView',\n    null,\n  );\n}\n\ntype Event = Object;\ntype Selection = {\n  start: number,\n  end?: number,\n};\n\nconst DataDetectorTypes = [\n  'phoneNumber',\n  'link',\n  'address',\n  'calendarEvent',\n  'none',\n  'all',\n];\n\n/**\n * A foundational component for inputting text into the app via a\n * keyboard. Props provide configurability for several features, such as\n * auto-correction, auto-capitalization, placeholder text, and different keyboard\n * types, such as a numeric keypad.\n *\n * The simplest use case is to plop down a `TextInput` and subscribe to the\n * `onChangeText` events to read the user input. There are also other events,\n * such as `onSubmitEditing` and `onFocus` that can be subscribed to. A simple\n * example:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, TextInput } from 'react-native';\n *\n * export default class UselessTextInput extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = { text: 'Useless Placeholder' };\n *   }\n *\n *   render() {\n *     return (\n *       <TextInput\n *         style={{height: 40, borderColor: 'gray', borderWidth: 1}}\n *         onChangeText={(text) => this.setState({text})}\n *         value={this.state.text}\n *       />\n *     );\n *   }\n * }\n *\n * // skip this line if using Create React Native App\n * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);\n * ```\n *\n * Two methods exposed via the native element are .focus() and .blur() that\n * will focus or blur the TextInput programmatically.\n *\n * Note that some props are only available with `multiline={true/false}`.\n * Additionally, border styles that apply to only one side of the element\n * (e.g., `borderBottomColor`, `borderLeftWidth`, etc.) will not be applied if\n * `multiline=false`. To achieve the same effect, you can wrap your `TextInput`\n * in a `View`:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, View, TextInput } from 'react-native';\n *\n * class UselessTextInput extends Component {\n *   render() {\n *     return (\n *       <TextInput\n *         {...this.props} // Inherit any props passed to it; e.g., multiline, numberOfLines below\n *         editable = {true}\n *         maxLength = {40}\n *       />\n *     );\n *   }\n * }\n *\n * export default class UselessTextInputMultiline extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       text: 'Useless Multiline Placeholder',\n *     };\n *   }\n *\n *   // If you type something in the text box that is a color, the background will change to that\n *   // color.\n *   render() {\n *     return (\n *      <View style={{\n *        backgroundColor: this.state.text,\n *        borderBottomColor: '#000000',\n *        borderBottomWidth: 1 }}\n *      >\n *        <UselessTextInput\n *          multiline = {true}\n *          numberOfLines = {4}\n *          onChangeText={(text) => this.setState({text})}\n *          value={this.state.text}\n *        />\n *      </View>\n *     );\n *   }\n * }\n *\n * // skip these lines if using Create React Native App\n * AppRegistry.registerComponent(\n *  'AwesomeProject',\n *  () => UselessTextInputMultiline\n * );\n * ```\n *\n * `TextInput` has by default a border at the bottom of its view. This border\n * has its padding set by the background image provided by the system, and it\n * cannot be changed. Solutions to avoid this is to either not set height\n * explicitly, case in which the system will take care of displaying the border\n * in the correct position, or to not display the border by setting\n * `underlineColorAndroid` to transparent.\n *\n * Note that on Android performing text selection in input can change\n * app's activity `windowSoftInputMode` param to `adjustResize`.\n * This may cause issues with components that have position: 'absolute'\n * while keyboard is active. To avoid this behavior either specify `windowSoftInputMode`\n * in AndroidManifest.xml ( https://developer.android.com/guide/topics/manifest/activity-element.html )\n * or control this param programmatically with native code.\n *\n */\n\nconst TextInput = createReactClass({\n  displayName: 'TextInput',\n  statics: {\n    /* TODO(brentvatne) docs are needed for this */\n    State: TextInputState,\n  },\n\n  propTypes: {\n    ...ViewPropTypes,\n    /**\n     * Can tell `TextInput` to automatically capitalize certain characters.\n     *\n     * - `characters`: all characters.\n     * - `words`: first letter of each word.\n     * - `sentences`: first letter of each sentence (*default*).\n     * - `none`: don't auto capitalize anything.\n     */\n    autoCapitalize: PropTypes.oneOf([\n      'none',\n      'sentences',\n      'words',\n      'characters',\n    ]),\n    /**\n     * If `false`, disables auto-correct. The default value is `true`.\n     */\n    autoCorrect: PropTypes.bool,\n    /**\n     * If `false`, disables spell-check style (i.e. red underlines).\n     * The default value is inherited from `autoCorrect`.\n     * @platform ios\n     */\n    spellCheck: PropTypes.bool,\n    /**\n     * If `true`, focuses the input on `componentDidMount`.\n     * The default value is `false`.\n     */\n    autoFocus: PropTypes.bool,\n    /**\n     * Specifies whether fonts should scale to respect Text Size accessibility settings. The\n     * default is `true`.\n     */\n    allowFontScaling: PropTypes.bool,\n    /**\n     * If `false`, text is not editable. The default value is `true`.\n     */\n    editable: PropTypes.bool,\n    /**\n     * Determines which keyboard to open, e.g.`numeric`.\n     *\n     * The following values work across platforms:\n     *\n     * - `default`\n     * - `numeric`\n     * - `email-address`\n     * - `phone-pad`\n     *\n     * *iOS Only*\n     *\n     * The following values work on iOS only:\n     *\n     * - `ascii-capable`\n     * - `numbers-and-punctuation`\n     * - `url`\n     * - `number-pad`\n     * - `name-phone-pad`\n     * - `decimal-pad`\n     * - `twitter`\n     * - `web-search`\n     *\n     * *Android Only*\n     *\n     * The following values work on Android only:\n     *\n     * - `visible-password`\n     */\n    keyboardType: PropTypes.oneOf([\n      // Cross-platform\n      'default',\n      'email-address',\n      'numeric',\n      'phone-pad',\n      // iOS-only\n      'ascii-capable',\n      'numbers-and-punctuation',\n      'url',\n      'number-pad',\n      'name-phone-pad',\n      'decimal-pad',\n      'twitter',\n      'web-search',\n      // Android-only\n      'visible-password',\n    ]),\n    /**\n     * Determines the color of the keyboard.\n     * @platform ios\n     */\n    keyboardAppearance: PropTypes.oneOf(['default', 'light', 'dark']),\n    /**\n     * Determines how the return key should look. On Android you can also use\n     * `returnKeyLabel`.\n     *\n     * *Cross platform*\n     *\n     * The following values work across platforms:\n     *\n     * - `done`\n     * - `go`\n     * - `next`\n     * - `search`\n     * - `send`\n     *\n     * *Android Only*\n     *\n     * The following values work on Android only:\n     *\n     * - `none`\n     * - `previous`\n     *\n     * *iOS Only*\n     *\n     * The following values work on iOS only:\n     *\n     * - `default`\n     * - `emergency-call`\n     * - `google`\n     * - `join`\n     * - `route`\n     * - `yahoo`\n     */\n    returnKeyType: PropTypes.oneOf([\n      // Cross-platform\n      'done',\n      'go',\n      'next',\n      'search',\n      'send',\n      // Android-only\n      'none',\n      'previous',\n      // iOS-only\n      'default',\n      'emergency-call',\n      'google',\n      'join',\n      'route',\n      'yahoo',\n    ]),\n    /**\n     * Sets the return key to the label. Use it instead of `returnKeyType`.\n     * @platform android\n     */\n    returnKeyLabel: PropTypes.string,\n    /**\n     * Limits the maximum number of characters that can be entered. Use this\n     * instead of implementing the logic in JS to avoid flicker.\n     */\n    maxLength: PropTypes.number,\n    /**\n     * Sets the number of lines for a `TextInput`. Use it with multiline set to\n     * `true` to be able to fill the lines.\n     * @platform android\n     */\n    numberOfLines: PropTypes.number,\n    /**\n     * When `false`, if there is a small amount of space available around a text input\n     * (e.g. landscape orientation on a phone), the OS may choose to have the user edit\n     * the text inside of a full screen text input mode. When `true`, this feature is\n     * disabled and users will always edit the text directly inside of the text input.\n     * Defaults to `false`.\n     * @platform android\n     */\n    disableFullscreenUI: PropTypes.bool,\n    /**\n     * If `true`, the keyboard disables the return key when there is no text and\n     * automatically enables it when there is text. The default value is `false`.\n     * @platform ios\n     */\n    enablesReturnKeyAutomatically: PropTypes.bool,\n    /**\n     * If `true`, the text input can be multiple lines.\n     * The default value is `false`.\n     */\n    multiline: PropTypes.bool,\n    /**\n     * Set text break strategy on Android API Level 23+, possible values are `simple`, `highQuality`, `balanced`\n     * The default value is `simple`.\n     * @platform android\n     */\n    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),\n    /**\n     * Callback that is called when the text input is blurred.\n     */\n    onBlur: PropTypes.func,\n    /**\n     * Callback that is called when the text input is focused.\n     */\n    onFocus: PropTypes.func,\n    /**\n     * Callback that is called when the text input's text changes.\n     */\n    onChange: PropTypes.func,\n    /**\n     * Callback that is called when the text input's text changes.\n     * Changed text is passed as an argument to the callback handler.\n     */\n    onChangeText: PropTypes.func,\n    /**\n     * Callback that is called when the text input's content size changes.\n     * This will be called with\n     * `{ nativeEvent: { contentSize: { width, height } } }`.\n     *\n     * Only called for multiline text inputs.\n     */\n    onContentSizeChange: PropTypes.func,\n    /**\n     * Callback that is called when text input ends.\n     */\n    onEndEditing: PropTypes.func,\n    /**\n     * Callback that is called when the text input selection is changed.\n     * This will be called with\n     * `{ nativeEvent: { selection: { start, end } } }`.\n     */\n    onSelectionChange: PropTypes.func,\n    /**\n     * Callback that is called when the text input's submit button is pressed.\n     * Invalid if `multiline={true}` is specified.\n     */\n    onSubmitEditing: PropTypes.func,\n    /**\n     * Callback that is called when a key is pressed.\n     * This will be called with `{ nativeEvent: { key: keyValue } }`\n     * where `keyValue` is `'Enter'` or `'Backspace'` for respective keys and\n     * the typed-in character otherwise including `' '` for space.\n     * Fires before `onChange` callbacks.\n     */\n    onKeyPress: PropTypes.func,\n    /**\n     * Invoked on mount and layout changes with `{x, y, width, height}`.\n     */\n    onLayout: PropTypes.func,\n    /**\n     * Invoked on content scroll with `{ nativeEvent: { contentOffset: { x, y } } }`.\n     * May also contain other properties from ScrollEvent but on Android contentSize\n     * is not provided for performance reasons.\n     */\n    onScroll: PropTypes.func,\n    /**\n     * The string that will be rendered before text input has been entered.\n     */\n    placeholder: PropTypes.string,\n    /**\n     * The text color of the placeholder string.\n     */\n    placeholderTextColor: ColorPropType,\n    /**\n     * If `true`, the text input obscures the text entered so that sensitive text\n     * like passwords stay secure. The default value is `false`. Does not work with 'multiline={true}'.\n     */\n    secureTextEntry: PropTypes.bool,\n    /**\n     * The highlight and cursor color of the text input.\n     */\n    selectionColor: ColorPropType,\n    /**\n     * An instance of `DocumentSelectionState`, this is some state that is responsible for\n     * maintaining selection information for a document.\n     *\n     * Some functionality that can be performed with this instance is:\n     *\n     * - `blur()`\n     * - `focus()`\n     * - `update()`\n     *\n     * > You can reference `DocumentSelectionState` in\n     * > [`vendor/document/selection/DocumentSelectionState.js`](https://github.com/facebook/react-native/blob/master/Libraries/vendor/document/selection/DocumentSelectionState.js)\n     *\n     * @platform ios\n     */\n    selectionState: PropTypes.instanceOf(DocumentSelectionState),\n    /**\n     * The start and end of the text input's selection. Set start and end to\n     * the same value to position the cursor.\n     */\n    selection: PropTypes.shape({\n      start: PropTypes.number.isRequired,\n      end: PropTypes.number,\n    }),\n    /**\n     * The value to show for the text input. `TextInput` is a controlled\n     * component, which means the native value will be forced to match this\n     * value prop if provided. For most uses, this works great, but in some\n     * cases this may cause flickering - one common cause is preventing edits\n     * by keeping value the same. In addition to simply setting the same value,\n     * either set `editable={false}`, or set/update `maxLength` to prevent\n     * unwanted edits without flicker.\n     */\n    value: PropTypes.string,\n    /**\n     * Provides an initial value that will change when the user starts typing.\n     * Useful for simple use-cases where you do not want to deal with listening\n     * to events and updating the value prop to keep the controlled state in sync.\n     */\n    defaultValue: PropTypes.string,\n    /**\n     * When the clear button should appear on the right side of the text view.\n     * This property is supported only for single-line TextInput component.\n     * @platform ios\n     */\n    clearButtonMode: PropTypes.oneOf([\n      'never',\n      'while-editing',\n      'unless-editing',\n      'always',\n    ]),\n    /**\n     * If `true`, clears the text field automatically when editing begins.\n     * @platform ios\n     */\n    clearTextOnFocus: PropTypes.bool,\n    /**\n     * If `true`, all text will automatically be selected on focus.\n     */\n    selectTextOnFocus: PropTypes.bool,\n    /**\n     * If `true`, the text field will blur when submitted.\n     * The default value is true for single-line fields and false for\n     * multiline fields. Note that for multiline fields, setting `blurOnSubmit`\n     * to `true` means that pressing return will blur the field and trigger the\n     * `onSubmitEditing` event instead of inserting a newline into the field.\n     */\n    blurOnSubmit: PropTypes.bool,\n    /**\n     * Note that not all Text styles are supported, an incomplete list of what is not supported includes:\n     *\n     * - `borderLeftWidth`\n     * - `borderTopWidth`\n     * - `borderRightWidth`\n     * - `borderBottomWidth`\n     * - `borderTopLeftRadius`\n     * - `borderTopRightRadius`\n     * - `borderBottomRightRadius`\n     * - `borderBottomLeftRadius`\n     *\n     * see [Issue#7070](https://github.com/facebook/react-native/issues/7070)\n     * for more detail.\n     *\n     * [Styles](docs/style.html)\n     */\n    style: Text.propTypes.style,\n    /**\n     * The color of the `TextInput` underline.\n     * @platform android\n     */\n    underlineColorAndroid: ColorPropType,\n\n    /**\n     * If defined, the provided image resource will be rendered on the left.\n     * The image resource must be inside `/android/app/src/main/res/drawable` and referenced\n     * like\n     * ```\n     * <TextInput\n     *  inlineImageLeft='search_icon'\n     * />\n     * ```\n     * @platform android\n     */\n    inlineImageLeft: PropTypes.string,\n\n    /**\n     * Padding between the inline image, if any, and the text input itself.\n     * @platform android\n     */\n    inlineImagePadding: PropTypes.number,\n\n    /**\n     * Determines the types of data converted to clickable URLs in the text input.\n     * Only valid if `multiline={true}` and `editable={false}`.\n     * By default no data types are detected.\n     *\n     * You can provide one type or an array of many types.\n     *\n     * Possible values for `dataDetectorTypes` are:\n     *\n     * - `'phoneNumber'`\n     * - `'link'`\n     * - `'address'`\n     * - `'calendarEvent'`\n     * - `'none'`\n     * - `'all'`\n     *\n     * @platform ios\n     */\n    dataDetectorTypes: PropTypes.oneOfType([\n      PropTypes.oneOf(DataDetectorTypes),\n      PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes)),\n    ]),\n    /**\n     * If `true`, caret is hidden. The default value is `false`.\n     * This property is supported only for single-line TextInput component on iOS.\n     */\n    caretHidden: PropTypes.bool,\n    /*\n     * If `true`, contextMenuHidden is hidden. The default value is `false`.\n     */\n    contextMenuHidden: PropTypes.bool,\n    /**\n     * An optional identifier which links a custom InputAccessoryView to\n     * this text input. The InputAccessoryView is rendered above the\n     * keyboard when this text input is focused.\n     * @platform ios\n     */\n    inputAccessoryViewID: PropTypes.string,\n  },\n  getDefaultProps(): Object {\n    return {\n      allowFontScaling: true,\n    };\n  },\n  /**\n   * `NativeMethodsMixin` will look for this when invoking `setNativeProps`. We\n   * make `this` look like an actual native component class.\n   */\n  mixins: [NativeMethodsMixin, TimerMixin],\n\n  /**\n   * Returns `true` if the input is currently focused; `false` otherwise.\n   */\n  isFocused: function(): boolean {\n    return (\n      TextInputState.currentlyFocusedField() ===\n      ReactNative.findNodeHandle(this._inputRef)\n    );\n  },\n\n  _inputRef: (undefined: any),\n  _focusSubscription: (undefined: ?Function),\n  _lastNativeText: (undefined: ?string),\n  _lastNativeSelection: (undefined: ?Selection),\n\n  componentDidMount: function() {\n    this._lastNativeText = this.props.value;\n    if (!this.context.focusEmitter) {\n      if (this.props.autoFocus) {\n        this.requestAnimationFrame(this.focus);\n      }\n      return;\n    }\n    this._focusSubscription = this.context.focusEmitter.addListener(\n      'focus',\n      el => {\n        if (this === el) {\n          this.requestAnimationFrame(this.focus);\n        } else if (this.isFocused()) {\n          this.blur();\n        }\n      },\n    );\n    if (this.props.autoFocus) {\n      this.context.onFocusRequested(this);\n    }\n  },\n\n  componentWillUnmount: function() {\n    this._focusSubscription && this._focusSubscription.remove();\n    if (this.isFocused()) {\n      this.blur();\n    }\n  },\n\n  getChildContext(): ViewChildContext {\n    return {\n      isInAParentText: true,\n    };\n  },\n\n  childContextTypes: ViewContextTypes,\n\n  contextTypes: {\n    ...ViewContextTypes,\n    onFocusRequested: PropTypes.func,\n    focusEmitter: PropTypes.instanceOf(EventEmitter),\n  },\n\n  /**\n   * Removes all text from the `TextInput`.\n   */\n  clear: function() {\n    this.setNativeProps({text: ''});\n  },\n\n  render: function() {\n    if (Platform.OS === 'ios') {\n      return UIManager.RCTVirtualText\n        ? this._renderIOS()\n        : this._renderIOSLegacy();\n    } else if (Platform.OS === 'android') {\n      return this._renderAndroid();\n    }\n  },\n\n  _getText: function(): ?string {\n    return typeof this.props.value === 'string'\n      ? this.props.value\n      : typeof this.props.defaultValue === 'string'\n        ? this.props.defaultValue\n        : '';\n  },\n\n  _setNativeRef: function(ref: any) {\n    this._inputRef = ref;\n  },\n\n  _renderIOSLegacy: function() {\n    let textContainer;\n\n    const props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {\n        start: props.selection.start,\n        end: props.selection.start,\n      };\n    }\n\n    if (!props.multiline) {\n      if (__DEV__) {\n        for (const propKey in onlyMultiline) {\n          if (props[propKey]) {\n            const error = new Error(\n              'TextInput prop `' +\n                propKey +\n                '` is only supported with multiline.',\n            );\n            warning(false, '%s', error.stack);\n          }\n        }\n      }\n      textContainer = (\n        <RCTSinglelineTextInputView\n          ref={this._setNativeRef}\n          {...props}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onSelectionChange={this._onSelectionChange}\n          onSelectionChangeShouldSetResponder={emptyFunction.thatReturnsTrue}\n          text={this._getText()}\n        />\n      );\n    } else {\n      let children = props.children;\n      let childCount = 0;\n      React.Children.forEach(children, () => ++childCount);\n      invariant(\n        !(props.value && childCount),\n        'Cannot specify both value and children.',\n      );\n      if (childCount >= 1) {\n        children = (\n          <Text style={props.style} allowFontScaling={props.allowFontScaling}>\n            {children}\n          </Text>\n        );\n      }\n      if (props.inputView) {\n        children = [children, props.inputView];\n      }\n      props.style.unshift(styles.multilineInput);\n      textContainer = (\n        <RCTMultilineTextInputView\n          ref={this._setNativeRef}\n          {...props}\n          children={children}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onContentSizeChange={this.props.onContentSizeChange}\n          onSelectionChange={this._onSelectionChange}\n          onTextInput={this._onTextInput}\n          onSelectionChangeShouldSetResponder={emptyFunction.thatReturnsTrue}\n          text={this._getText()}\n          dataDetectorTypes={this.props.dataDetectorTypes}\n          onScroll={this._onScroll}\n        />\n      );\n    }\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        rejectResponderTermination={true}\n        accessible={props.accessible}\n        accessibilityLabel={props.accessibilityLabel}\n        accessibilityTraits={props.accessibilityTraits}\n        nativeID={this.props.nativeID}\n        testID={props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _renderIOS: function() {\n    const props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {\n        start: props.selection.start,\n        end: props.selection.start,\n      };\n    }\n\n    const RCTTextInputView = props.multiline\n      ? RCTMultilineTextInputView\n      : RCTSinglelineTextInputView;\n\n    if (props.multiline) {\n      props.style.unshift(styles.multilineInput);\n    }\n\n    const textContainer = (\n      <RCTTextInputView\n        ref={this._setNativeRef}\n        {...props}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n        onChange={this._onChange}\n        onContentSizeChange={this.props.onContentSizeChange}\n        onSelectionChange={this._onSelectionChange}\n        onTextInput={this._onTextInput}\n        onSelectionChangeShouldSetResponder={emptyFunction.thatReturnsTrue}\n        text={this._getText()}\n        dataDetectorTypes={this.props.dataDetectorTypes}\n        onScroll={this._onScroll}\n      />\n    );\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        rejectResponderTermination={true}\n        accessible={props.accessible}\n        accessibilityLabel={props.accessibilityLabel}\n        accessibilityTraits={props.accessibilityTraits}\n        nativeID={this.props.nativeID}\n        testID={props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _renderAndroid: function() {\n    const props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n    props.autoCapitalize =\n      UIManager.AndroidTextInput.Constants.AutoCapitalizationType[\n        props.autoCapitalize || 'sentences'\n      ];\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n     * suppresses an error when upgrading Flow's support for React. To see the\n     * error delete this comment and run Flow. */\n    let children = this.props.children;\n    let childCount = 0;\n    React.Children.forEach(children, () => ++childCount);\n    invariant(\n      !(this.props.value && childCount),\n      'Cannot specify both value and children.',\n    );\n    if (childCount > 1) {\n      children = <Text>{children}</Text>;\n    }\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {\n        start: props.selection.start,\n        end: props.selection.start,\n      };\n    }\n\n    const textContainer = (\n      <AndroidTextInput\n        ref={this._setNativeRef}\n        {...props}\n        mostRecentEventCount={0}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n        onChange={this._onChange}\n        onSelectionChange={this._onSelectionChange}\n        onTextInput={this._onTextInput}\n        text={this._getText()}\n        children={children}\n        disableFullscreenUI={this.props.disableFullscreenUI}\n        textBreakStrategy={this.props.textBreakStrategy}\n        onScroll={this._onScroll}\n      />\n    );\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        accessible={this.props.accessible}\n        accessibilityLabel={this.props.accessibilityLabel}\n        accessibilityComponentType={this.props.accessibilityComponentType}\n        nativeID={this.props.nativeID}\n        testID={this.props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _onFocus: function(event: Event) {\n    if (this.props.onFocus) {\n      this.props.onFocus(event);\n    }\n\n    if (this.props.selectionState) {\n      this.props.selectionState.focus();\n    }\n  },\n\n  _onPress: function(event: Event) {\n    if (this.props.editable || this.props.editable === undefined) {\n      this.focus();\n    }\n  },\n\n  _onChange: function(event: Event) {\n    // Make sure to fire the mostRecentEventCount first so it is already set on\n    // native when the text value is set.\n    if (this._inputRef) {\n      this._inputRef.setNativeProps({\n        mostRecentEventCount: event.nativeEvent.eventCount,\n      });\n    }\n\n    const text = event.nativeEvent.text;\n    this.props.onChange && this.props.onChange(event);\n    this.props.onChangeText && this.props.onChangeText(text);\n\n    if (!this._inputRef) {\n      // calling `this.props.onChange` or `this.props.onChangeText`\n      // may clean up the input itself. Exits here.\n      return;\n    }\n\n    this._lastNativeText = text;\n    this.forceUpdate();\n  },\n\n  _onSelectionChange: function(event: Event) {\n    this.props.onSelectionChange && this.props.onSelectionChange(event);\n\n    if (!this._inputRef) {\n      // calling `this.props.onSelectionChange`\n      // may clean up the input itself. Exits here.\n      return;\n    }\n\n    this._lastNativeSelection = event.nativeEvent.selection;\n\n    if (this.props.selection || this.props.selectionState) {\n      this.forceUpdate();\n    }\n  },\n\n  componentDidUpdate: function() {\n    // This is necessary in case native updates the text and JS decides\n    // that the update should be ignored and we should stick with the value\n    // that we have in JS.\n    const nativeProps = {};\n\n    if (\n      this._lastNativeText !== this.props.value &&\n      typeof this.props.value === 'string'\n    ) {\n      nativeProps.text = this.props.value;\n    }\n\n    // Selection is also a controlled prop, if the native value doesn't match\n    // JS, update to the JS value.\n    const {selection} = this.props;\n    if (\n      this._lastNativeSelection &&\n      selection &&\n      (this._lastNativeSelection.start !== selection.start ||\n        this._lastNativeSelection.end !== selection.end)\n    ) {\n      nativeProps.selection = this.props.selection;\n    }\n\n    if (Object.keys(nativeProps).length > 0 && this._inputRef) {\n      this._inputRef.setNativeProps(nativeProps);\n    }\n\n    if (this.props.selectionState && selection) {\n      this.props.selectionState.update(selection.start, selection.end);\n    }\n  },\n\n  _onBlur: function(event: Event) {\n    this.blur();\n    if (this.props.onBlur) {\n      this.props.onBlur(event);\n    }\n\n    if (this.props.selectionState) {\n      this.props.selectionState.blur();\n    }\n  },\n\n  _onTextInput: function(event: Event) {\n    this.props.onTextInput && this.props.onTextInput(event);\n  },\n\n  _onScroll: function(event: Event) {\n    this.props.onScroll && this.props.onScroll(event);\n  },\n});\n\nconst styles = StyleSheet.create({\n  multilineInput: {\n    // This default top inset makes RCTMultilineTextInputView seem as close as possible\n    // to single-line RCTSinglelineTextInputView defaults, using the system defaults\n    // of font size 17 and a height of 31 points.\n    paddingTop: 5,\n  },\n});\n\nmodule.exports = TextInput;\n"]}