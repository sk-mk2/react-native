de1fd7bf4ab3b8949c0e61c4b4cad2f7
'use strict';var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var ColorPropType=require('ColorPropType');var DocumentSelectionState=require('DocumentSelectionState');var EventEmitter=require('EventEmitter');var NativeMethodsMixin=require('NativeMethodsMixin');var Platform=require('Platform');var React=require('React');var createReactClass=require('create-react-class');var PropTypes=require('prop-types');var ReactNative=require('ReactNative');var StyleSheet=require('StyleSheet');var Text=require('Text');var TextInputState=require('TextInputState');var TimerMixin=require('react-timer-mixin');var TouchableWithoutFeedback=require('TouchableWithoutFeedback');var UIManager=require('UIManager');var ViewPropTypes=require('ViewPropTypes');var _require=require('ViewContext'),ViewContextTypes=_require.ViewContextTypes;var emptyFunction=require('fbjs/lib/emptyFunction');var invariant=require('fbjs/lib/invariant');var requireNativeComponent=require('requireNativeComponent');var warning=require('fbjs/lib/warning');var AndroidTextInput=void 0;var RCTMultilineTextInputView=void 0;var RCTSinglelineTextInputView=void 0;var onlyMultiline={onTextInput:true,children:true};if(Platform.OS==='android'){AndroidTextInput=requireNativeComponent('AndroidTextInput',null);}else if(Platform.OS==='ios'){RCTMultilineTextInputView=requireNativeComponent('RCTMultilineTextInputView',null);RCTSinglelineTextInputView=requireNativeComponent('RCTSinglelineTextInputView',null);}var DataDetectorTypes=['phoneNumber','link','address','calendarEvent','none','all'];var TextInput=createReactClass({displayName:'TextInput',statics:{State:TextInputState},propTypes:_extends({},ViewPropTypes,{autoCapitalize:PropTypes.oneOf(['none','sentences','words','characters']),autoCorrect:PropTypes.bool,spellCheck:PropTypes.bool,autoFocus:PropTypes.bool,allowFontScaling:PropTypes.bool,editable:PropTypes.bool,keyboardType:PropTypes.oneOf(['default','email-address','numeric','phone-pad','ascii-capable','numbers-and-punctuation','url','number-pad','name-phone-pad','decimal-pad','twitter','web-search','visible-password']),keyboardAppearance:PropTypes.oneOf(['default','light','dark']),returnKeyType:PropTypes.oneOf(['done','go','next','search','send','none','previous','default','emergency-call','google','join','route','yahoo']),returnKeyLabel:PropTypes.string,maxLength:PropTypes.number,numberOfLines:PropTypes.number,disableFullscreenUI:PropTypes.bool,enablesReturnKeyAutomatically:PropTypes.bool,multiline:PropTypes.bool,textBreakStrategy:PropTypes.oneOf(['simple','highQuality','balanced']),onBlur:PropTypes.func,onFocus:PropTypes.func,onChange:PropTypes.func,onChangeText:PropTypes.func,onContentSizeChange:PropTypes.func,onEndEditing:PropTypes.func,onSelectionChange:PropTypes.func,onSubmitEditing:PropTypes.func,onKeyPress:PropTypes.func,onLayout:PropTypes.func,onScroll:PropTypes.func,placeholder:PropTypes.string,placeholderTextColor:ColorPropType,secureTextEntry:PropTypes.bool,selectionColor:ColorPropType,selectionState:PropTypes.instanceOf(DocumentSelectionState),selection:PropTypes.shape({start:PropTypes.number.isRequired,end:PropTypes.number}),value:PropTypes.string,defaultValue:PropTypes.string,clearButtonMode:PropTypes.oneOf(['never','while-editing','unless-editing','always']),clearTextOnFocus:PropTypes.bool,selectTextOnFocus:PropTypes.bool,blurOnSubmit:PropTypes.bool,style:Text.propTypes.style,underlineColorAndroid:ColorPropType,inlineImageLeft:PropTypes.string,inlineImagePadding:PropTypes.number,dataDetectorTypes:PropTypes.oneOfType([PropTypes.oneOf(DataDetectorTypes),PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))]),caretHidden:PropTypes.bool,contextMenuHidden:PropTypes.bool,inputAccessoryViewID:PropTypes.string}),getDefaultProps:function getDefaultProps(){return{allowFontScaling:true};},mixins:[NativeMethodsMixin,TimerMixin],isFocused:function isFocused(){return TextInputState.currentlyFocusedField()===ReactNative.findNodeHandle(this._inputRef);},_inputRef:undefined,_focusSubscription:undefined,_lastNativeText:undefined,_lastNativeSelection:undefined,componentDidMount:function componentDidMount(){var _this=this;this._lastNativeText=this.props.value;if(!this.context.focusEmitter){if(this.props.autoFocus){this.requestAnimationFrame(this.focus);}return;}this._focusSubscription=this.context.focusEmitter.addListener('focus',function(el){if(_this===el){_this.requestAnimationFrame(_this.focus);}else if(_this.isFocused()){_this.blur();}});if(this.props.autoFocus){this.context.onFocusRequested(this);}},componentWillUnmount:function componentWillUnmount(){this._focusSubscription&&this._focusSubscription.remove();if(this.isFocused()){this.blur();}},getChildContext:function getChildContext(){return{isInAParentText:true};},childContextTypes:ViewContextTypes,contextTypes:_extends({},ViewContextTypes,{onFocusRequested:PropTypes.func,focusEmitter:PropTypes.instanceOf(EventEmitter)}),clear:function clear(){this.setNativeProps({text:''});},render:function render(){if(Platform.OS==='ios'){return UIManager.RCTVirtualText?this._renderIOS():this._renderIOSLegacy();}else if(Platform.OS==='android'){return this._renderAndroid();}},_getText:function _getText(){return typeof this.props.value==='string'?this.props.value:typeof this.props.defaultValue==='string'?this.props.defaultValue:'';},_setNativeRef:function _setNativeRef(ref){this._inputRef=ref;},_renderIOSLegacy:function _renderIOSLegacy(){var textContainer=void 0;var props=_extends({},this.props);props.style=[this.props.style];if(props.selection&&props.selection.end==null){props.selection={start:props.selection.start,end:props.selection.start};}if(!props.multiline){if(__DEV__){for(var propKey in onlyMultiline){if(props[propKey]){var error=new Error('TextInput prop `'+propKey+'` is only supported with multiline.');warning(false,'%s',error.stack);}}}textContainer=React.createElement(RCTSinglelineTextInputView,_extends({ref:this._setNativeRef},props,{onFocus:this._onFocus,onBlur:this._onBlur,onChange:this._onChange,onSelectionChange:this._onSelectionChange,onSelectionChangeShouldSetResponder:emptyFunction.thatReturnsTrue,text:this._getText()}));}else{var children=props.children;var childCount=0;React.Children.forEach(children,function(){return++childCount;});invariant(!(props.value&&childCount),'Cannot specify both value and children.');if(childCount>=1){children=React.createElement(Text,{style:props.style,allowFontScaling:props.allowFontScaling},children);}if(props.inputView){children=[children,props.inputView];}props.style.unshift(styles.multilineInput);textContainer=React.createElement(RCTMultilineTextInputView,_extends({ref:this._setNativeRef},props,{children:children,onFocus:this._onFocus,onBlur:this._onBlur,onChange:this._onChange,onContentSizeChange:this.props.onContentSizeChange,onSelectionChange:this._onSelectionChange,onTextInput:this._onTextInput,onSelectionChangeShouldSetResponder:emptyFunction.thatReturnsTrue,text:this._getText(),dataDetectorTypes:this.props.dataDetectorTypes,onScroll:this._onScroll}));}return React.createElement(TouchableWithoutFeedback,{onLayout:props.onLayout,onPress:this._onPress,rejectResponderTermination:true,accessible:props.accessible,accessibilityLabel:props.accessibilityLabel,accessibilityTraits:props.accessibilityTraits,nativeID:this.props.nativeID,testID:props.testID},textContainer);},_renderIOS:function _renderIOS(){var props=_extends({},this.props);props.style=[this.props.style];if(props.selection&&props.selection.end==null){props.selection={start:props.selection.start,end:props.selection.start};}var RCTTextInputView=props.multiline?RCTMultilineTextInputView:RCTSinglelineTextInputView;if(props.multiline){props.style.unshift(styles.multilineInput);}var textContainer=React.createElement(RCTTextInputView,_extends({ref:this._setNativeRef},props,{onFocus:this._onFocus,onBlur:this._onBlur,onChange:this._onChange,onContentSizeChange:this.props.onContentSizeChange,onSelectionChange:this._onSelectionChange,onTextInput:this._onTextInput,onSelectionChangeShouldSetResponder:emptyFunction.thatReturnsTrue,text:this._getText(),dataDetectorTypes:this.props.dataDetectorTypes,onScroll:this._onScroll}));return React.createElement(TouchableWithoutFeedback,{onLayout:props.onLayout,onPress:this._onPress,rejectResponderTermination:true,accessible:props.accessible,accessibilityLabel:props.accessibilityLabel,accessibilityTraits:props.accessibilityTraits,nativeID:this.props.nativeID,testID:props.testID},textContainer);},_renderAndroid:function _renderAndroid(){var props=_extends({},this.props);props.style=[this.props.style];props.autoCapitalize=UIManager.AndroidTextInput.Constants.AutoCapitalizationType[props.autoCapitalize||'sentences'];var children=this.props.children;var childCount=0;React.Children.forEach(children,function(){return++childCount;});invariant(!(this.props.value&&childCount),'Cannot specify both value and children.');if(childCount>1){children=React.createElement(Text,null,children);}if(props.selection&&props.selection.end==null){props.selection={start:props.selection.start,end:props.selection.start};}var textContainer=React.createElement(AndroidTextInput,_extends({ref:this._setNativeRef},props,{mostRecentEventCount:0,onFocus:this._onFocus,onBlur:this._onBlur,onChange:this._onChange,onSelectionChange:this._onSelectionChange,onTextInput:this._onTextInput,text:this._getText(),children:children,disableFullscreenUI:this.props.disableFullscreenUI,textBreakStrategy:this.props.textBreakStrategy,onScroll:this._onScroll}));return React.createElement(TouchableWithoutFeedback,{onLayout:props.onLayout,onPress:this._onPress,accessible:this.props.accessible,accessibilityLabel:this.props.accessibilityLabel,accessibilityComponentType:this.props.accessibilityComponentType,nativeID:this.props.nativeID,testID:this.props.testID},textContainer);},_onFocus:function _onFocus(event){if(this.props.onFocus){this.props.onFocus(event);}if(this.props.selectionState){this.props.selectionState.focus();}},_onPress:function _onPress(event){if(this.props.editable||this.props.editable===undefined){this.focus();}},_onChange:function _onChange(event){if(this._inputRef){this._inputRef.setNativeProps({mostRecentEventCount:event.nativeEvent.eventCount});}var text=event.nativeEvent.text;this.props.onChange&&this.props.onChange(event);this.props.onChangeText&&this.props.onChangeText(text);if(!this._inputRef){return;}this._lastNativeText=text;this.forceUpdate();},_onSelectionChange:function _onSelectionChange(event){this.props.onSelectionChange&&this.props.onSelectionChange(event);if(!this._inputRef){return;}this._lastNativeSelection=event.nativeEvent.selection;if(this.props.selection||this.props.selectionState){this.forceUpdate();}},componentDidUpdate:function componentDidUpdate(){var nativeProps={};if(this._lastNativeText!==this.props.value&&typeof this.props.value==='string'){nativeProps.text=this.props.value;}var selection=this.props.selection;if(this._lastNativeSelection&&selection&&(this._lastNativeSelection.start!==selection.start||this._lastNativeSelection.end!==selection.end)){nativeProps.selection=this.props.selection;}if(Object.keys(nativeProps).length>0&&this._inputRef){this._inputRef.setNativeProps(nativeProps);}if(this.props.selectionState&&selection){this.props.selectionState.update(selection.start,selection.end);}},_onBlur:function _onBlur(event){this.blur();if(this.props.onBlur){this.props.onBlur(event);}if(this.props.selectionState){this.props.selectionState.blur();}},_onTextInput:function _onTextInput(event){this.props.onTextInput&&this.props.onTextInput(event);},_onScroll:function _onScroll(event){this.props.onScroll&&this.props.onScroll(event);}});var styles=StyleSheet.create({multilineInput:{paddingTop:5}});module.exports=TextInput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRJbnB1dC5qcyJdLCJuYW1lcyI6WyJDb2xvclByb3BUeXBlIiwicmVxdWlyZSIsIkRvY3VtZW50U2VsZWN0aW9uU3RhdGUiLCJFdmVudEVtaXR0ZXIiLCJOYXRpdmVNZXRob2RzTWl4aW4iLCJQbGF0Zm9ybSIsIlJlYWN0IiwiY3JlYXRlUmVhY3RDbGFzcyIsIlByb3BUeXBlcyIsIlJlYWN0TmF0aXZlIiwiU3R5bGVTaGVldCIsIlRleHQiLCJUZXh0SW5wdXRTdGF0ZSIsIlRpbWVyTWl4aW4iLCJUb3VjaGFibGVXaXRob3V0RmVlZGJhY2siLCJVSU1hbmFnZXIiLCJWaWV3UHJvcFR5cGVzIiwiVmlld0NvbnRleHRUeXBlcyIsImVtcHR5RnVuY3Rpb24iLCJpbnZhcmlhbnQiLCJyZXF1aXJlTmF0aXZlQ29tcG9uZW50Iiwid2FybmluZyIsIkFuZHJvaWRUZXh0SW5wdXQiLCJSQ1RNdWx0aWxpbmVUZXh0SW5wdXRWaWV3IiwiUkNUU2luZ2xlbGluZVRleHRJbnB1dFZpZXciLCJvbmx5TXVsdGlsaW5lIiwib25UZXh0SW5wdXQiLCJjaGlsZHJlbiIsIk9TIiwiRGF0YURldGVjdG9yVHlwZXMiLCJUZXh0SW5wdXQiLCJkaXNwbGF5TmFtZSIsInN0YXRpY3MiLCJTdGF0ZSIsInByb3BUeXBlcyIsImF1dG9DYXBpdGFsaXplIiwib25lT2YiLCJhdXRvQ29ycmVjdCIsImJvb2wiLCJzcGVsbENoZWNrIiwiYXV0b0ZvY3VzIiwiYWxsb3dGb250U2NhbGluZyIsImVkaXRhYmxlIiwia2V5Ym9hcmRUeXBlIiwia2V5Ym9hcmRBcHBlYXJhbmNlIiwicmV0dXJuS2V5VHlwZSIsInJldHVybktleUxhYmVsIiwic3RyaW5nIiwibWF4TGVuZ3RoIiwibnVtYmVyIiwibnVtYmVyT2ZMaW5lcyIsImRpc2FibGVGdWxsc2NyZWVuVUkiLCJlbmFibGVzUmV0dXJuS2V5QXV0b21hdGljYWxseSIsIm11bHRpbGluZSIsInRleHRCcmVha1N0cmF0ZWd5Iiwib25CbHVyIiwiZnVuYyIsIm9uRm9jdXMiLCJvbkNoYW5nZSIsIm9uQ2hhbmdlVGV4dCIsIm9uQ29udGVudFNpemVDaGFuZ2UiLCJvbkVuZEVkaXRpbmciLCJvblNlbGVjdGlvbkNoYW5nZSIsIm9uU3VibWl0RWRpdGluZyIsIm9uS2V5UHJlc3MiLCJvbkxheW91dCIsIm9uU2Nyb2xsIiwicGxhY2Vob2xkZXIiLCJwbGFjZWhvbGRlclRleHRDb2xvciIsInNlY3VyZVRleHRFbnRyeSIsInNlbGVjdGlvbkNvbG9yIiwic2VsZWN0aW9uU3RhdGUiLCJpbnN0YW5jZU9mIiwic2VsZWN0aW9uIiwic2hhcGUiLCJzdGFydCIsImlzUmVxdWlyZWQiLCJlbmQiLCJ2YWx1ZSIsImRlZmF1bHRWYWx1ZSIsImNsZWFyQnV0dG9uTW9kZSIsImNsZWFyVGV4dE9uRm9jdXMiLCJzZWxlY3RUZXh0T25Gb2N1cyIsImJsdXJPblN1Ym1pdCIsInN0eWxlIiwidW5kZXJsaW5lQ29sb3JBbmRyb2lkIiwiaW5saW5lSW1hZ2VMZWZ0IiwiaW5saW5lSW1hZ2VQYWRkaW5nIiwiZGF0YURldGVjdG9yVHlwZXMiLCJvbmVPZlR5cGUiLCJhcnJheU9mIiwiY2FyZXRIaWRkZW4iLCJjb250ZXh0TWVudUhpZGRlbiIsImlucHV0QWNjZXNzb3J5Vmlld0lEIiwiZ2V0RGVmYXVsdFByb3BzIiwibWl4aW5zIiwiaXNGb2N1c2VkIiwiY3VycmVudGx5Rm9jdXNlZEZpZWxkIiwiZmluZE5vZGVIYW5kbGUiLCJfaW5wdXRSZWYiLCJ1bmRlZmluZWQiLCJfZm9jdXNTdWJzY3JpcHRpb24iLCJfbGFzdE5hdGl2ZVRleHQiLCJfbGFzdE5hdGl2ZVNlbGVjdGlvbiIsImNvbXBvbmVudERpZE1vdW50IiwicHJvcHMiLCJjb250ZXh0IiwiZm9jdXNFbWl0dGVyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZm9jdXMiLCJhZGRMaXN0ZW5lciIsImVsIiwiYmx1ciIsIm9uRm9jdXNSZXF1ZXN0ZWQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInJlbW92ZSIsImdldENoaWxkQ29udGV4dCIsImlzSW5BUGFyZW50VGV4dCIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGVzIiwiY2xlYXIiLCJzZXROYXRpdmVQcm9wcyIsInRleHQiLCJyZW5kZXIiLCJSQ1RWaXJ0dWFsVGV4dCIsIl9yZW5kZXJJT1MiLCJfcmVuZGVySU9TTGVnYWN5IiwiX3JlbmRlckFuZHJvaWQiLCJfZ2V0VGV4dCIsIl9zZXROYXRpdmVSZWYiLCJyZWYiLCJ0ZXh0Q29udGFpbmVyIiwiX19ERVZfXyIsInByb3BLZXkiLCJlcnJvciIsIkVycm9yIiwic3RhY2siLCJfb25Gb2N1cyIsIl9vbkJsdXIiLCJfb25DaGFuZ2UiLCJfb25TZWxlY3Rpb25DaGFuZ2UiLCJ0aGF0UmV0dXJuc1RydWUiLCJjaGlsZENvdW50IiwiQ2hpbGRyZW4iLCJmb3JFYWNoIiwiaW5wdXRWaWV3IiwidW5zaGlmdCIsInN0eWxlcyIsIm11bHRpbGluZUlucHV0IiwiX29uVGV4dElucHV0IiwiX29uU2Nyb2xsIiwiX29uUHJlc3MiLCJhY2Nlc3NpYmxlIiwiYWNjZXNzaWJpbGl0eUxhYmVsIiwiYWNjZXNzaWJpbGl0eVRyYWl0cyIsIm5hdGl2ZUlEIiwidGVzdElEIiwiUkNUVGV4dElucHV0VmlldyIsIkNvbnN0YW50cyIsIkF1dG9DYXBpdGFsaXphdGlvblR5cGUiLCJhY2Nlc3NpYmlsaXR5Q29tcG9uZW50VHlwZSIsImV2ZW50IiwibW9zdFJlY2VudEV2ZW50Q291bnQiLCJuYXRpdmVFdmVudCIsImV2ZW50Q291bnQiLCJmb3JjZVVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsIm5hdGl2ZVByb3BzIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsInVwZGF0ZSIsImNyZWF0ZSIsInBhZGRpbmdUb3AiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQSxhLGdPQUVBLEdBQU1BLGVBQWdCQyxPQUFoQixpQkFBTixDQUNBLEdBQU1DLHdCQUF5QkQsT0FBekIsMEJBQU4sQ0FDQSxHQUFNRSxjQUFlRixPQUFm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QVgsQ0FBa0IsQ0FDL0J4QixlQUFnQixDQUlkeUIsV0FBWSxDQUpFLENBRGUsQ0FBbEIsQ0FBZixDQVNBQyxPQUFPQyxPQUFQLENBQWlCakosU0FBakIiLCJmaWxlIjoiVGV4dElucHV0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgVGV4dElucHV0XG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IENvbG9yUHJvcFR5cGUgPSByZXF1aXJlKCdDb2xvclByb3BUeXBlJyk7XG5jb25zdCBEb2N1bWVudFNlbGVjdGlvblN0YXRlID0gcmVxdWlyZSgnRG9jdW1lbnRTZWxlY3Rpb25TdGF0ZScpO1xuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnRXZlbnRFbWl0dGVyJyk7XG5jb25zdCBOYXRpdmVNZXRob2RzTWl4aW4gPSByZXF1aXJlKCdOYXRpdmVNZXRob2RzTWl4aW4nKTtcbmNvbnN0IFBsYXRmb3JtID0gcmVxdWlyZSgnUGxhdGZvcm0nKTtcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgnUmVhY3QnKTtcbmNvbnN0IGNyZWF0ZVJlYWN0Q2xhc3MgPSByZXF1aXJlKCdjcmVhdGUtcmVhY3QtY2xhc3MnKTtcbmNvbnN0IFByb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcbmNvbnN0IFJlYWN0TmF0aXZlID0gcmVxdWlyZSgnUmVhY3ROYXRpdmUnKTtcbmNvbnN0IFN0eWxlU2hlZXQgPSByZXF1aXJlKCdTdHlsZVNoZWV0Jyk7XG5jb25zdCBUZXh0ID0gcmVxdWlyZSgnVGV4dCcpO1xuY29uc3QgVGV4dElucHV0U3RhdGUgPSByZXF1aXJlKCdUZXh0SW5wdXRTdGF0ZScpO1xuLyogJEZsb3dGaXhNZSg+PTAuNTQuMCBzaXRlPXJlYWN0X25hdGl2ZV9vc3MpIFRoaXMgY29tbWVudCBzdXBwcmVzc2VzIGFuIGVycm9yXG4gKiBmb3VuZCB3aGVuIEZsb3cgdjAuNTQgd2FzIGRlcGxveWVkLiBUbyBzZWUgdGhlIGVycm9yIGRlbGV0ZSB0aGlzIGNvbW1lbnQgYW5kXG4gKiBydW4gRmxvdy4gKi9cbmNvbnN0IFRpbWVyTWl4aW4gPSByZXF1aXJlKCdyZWFjdC10aW1lci1taXhpbicpO1xuY29uc3QgVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrID0gcmVxdWlyZSgnVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrJyk7XG5jb25zdCBVSU1hbmFnZXIgPSByZXF1aXJlKCdVSU1hbmFnZXInKTtcbmNvbnN0IFZpZXdQcm9wVHlwZXMgPSByZXF1aXJlKCdWaWV3UHJvcFR5cGVzJyk7XG5jb25zdCB7Vmlld0NvbnRleHRUeXBlc30gPSByZXF1aXJlKCdWaWV3Q29udGV4dCcpO1xuXG5jb25zdCBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5jb25zdCByZXF1aXJlTmF0aXZlQ29tcG9uZW50ID0gcmVxdWlyZSgncmVxdWlyZU5hdGl2ZUNvbXBvbmVudCcpO1xuLyogJEZsb3dGaXhNZSg+PTAuNTQuMCBzaXRlPXJlYWN0X25hdGl2ZV9vc3MpIFRoaXMgY29tbWVudCBzdXBwcmVzc2VzIGFuIGVycm9yXG4gKiBmb3VuZCB3aGVuIEZsb3cgdjAuNTQgd2FzIGRlcGxveWVkLiBUbyBzZWUgdGhlIGVycm9yIGRlbGV0ZSB0aGlzIGNvbW1lbnQgYW5kXG4gKiBydW4gRmxvdy4gKi9cbmNvbnN0IHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbmxldCBBbmRyb2lkVGV4dElucHV0O1xubGV0IFJDVE11bHRpbGluZVRleHRJbnB1dFZpZXc7XG5sZXQgUkNUU2luZ2xlbGluZVRleHRJbnB1dFZpZXc7XG5cbmNvbnN0IG9ubHlNdWx0aWxpbmUgPSB7XG4gIG9uVGV4dElucHV0OiB0cnVlLFxuICBjaGlsZHJlbjogdHJ1ZSxcbn07XG5cbmltcG9ydCB0eXBlIHtWaWV3Q2hpbGRDb250ZXh0fSBmcm9tICdWaWV3Q29udGV4dCc7XG5cbmlmIChQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnKSB7XG4gIEFuZHJvaWRUZXh0SW5wdXQgPSByZXF1aXJlTmF0aXZlQ29tcG9uZW50KCdBbmRyb2lkVGV4dElucHV0JywgbnVsbCk7XG59IGVsc2UgaWYgKFBsYXRmb3JtLk9TID09PSAnaW9zJykge1xuICBSQ1RNdWx0aWxpbmVUZXh0SW5wdXRWaWV3ID0gcmVxdWlyZU5hdGl2ZUNvbXBvbmVudChcbiAgICAnUkNUTXVsdGlsaW5lVGV4dElucHV0VmlldycsXG4gICAgbnVsbCxcbiAgKTtcbiAgUkNUU2luZ2xlbGluZVRleHRJbnB1dFZpZXcgPSByZXF1aXJlTmF0aXZlQ29tcG9uZW50KFxuICAgICdSQ1RTaW5nbGVsaW5lVGV4dElucHV0VmlldycsXG4gICAgbnVsbCxcbiAgKTtcbn1cblxudHlwZSBFdmVudCA9IE9iamVjdDtcbnR5cGUgU2VsZWN0aW9uID0ge1xuICBzdGFydDogbnVtYmVyLFxuICBlbmQ/OiBudW1iZXIsXG59O1xuXG5jb25zdCBEYXRhRGV0ZWN0b3JUeXBlcyA9IFtcbiAgJ3Bob25lTnVtYmVyJyxcbiAgJ2xpbmsnLFxuICAnYWRkcmVzcycsXG4gICdjYWxlbmRhckV2ZW50JyxcbiAgJ25vbmUnLFxuICAnYWxsJyxcbl07XG5cbi8qKlxuICogQSBmb3VuZGF0aW9uYWwgY29tcG9uZW50IGZvciBpbnB1dHRpbmcgdGV4dCBpbnRvIHRoZSBhcHAgdmlhIGFcbiAqIGtleWJvYXJkLiBQcm9wcyBwcm92aWRlIGNvbmZpZ3VyYWJpbGl0eSBmb3Igc2V2ZXJhbCBmZWF0dXJlcywgc3VjaCBhc1xuICogYXV0by1jb3JyZWN0aW9uLCBhdXRvLWNhcGl0YWxpemF0aW9uLCBwbGFjZWhvbGRlciB0ZXh0LCBhbmQgZGlmZmVyZW50IGtleWJvYXJkXG4gKiB0eXBlcywgc3VjaCBhcyBhIG51bWVyaWMga2V5cGFkLlxuICpcbiAqIFRoZSBzaW1wbGVzdCB1c2UgY2FzZSBpcyB0byBwbG9wIGRvd24gYSBgVGV4dElucHV0YCBhbmQgc3Vic2NyaWJlIHRvIHRoZVxuICogYG9uQ2hhbmdlVGV4dGAgZXZlbnRzIHRvIHJlYWQgdGhlIHVzZXIgaW5wdXQuIFRoZXJlIGFyZSBhbHNvIG90aGVyIGV2ZW50cyxcbiAqIHN1Y2ggYXMgYG9uU3VibWl0RWRpdGluZ2AgYW5kIGBvbkZvY3VzYCB0aGF0IGNhbiBiZSBzdWJzY3JpYmVkIHRvLiBBIHNpbXBsZVxuICogZXhhbXBsZTpcbiAqXG4gKiBgYGBSZWFjdE5hdGl2ZVdlYlBsYXllclxuICogaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbiAqIGltcG9ydCB7IEFwcFJlZ2lzdHJ5LCBUZXh0SW5wdXQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuICpcbiAqIGV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZWxlc3NUZXh0SW5wdXQgZXh0ZW5kcyBDb21wb25lbnQge1xuICogICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICogICAgIHN1cGVyKHByb3BzKTtcbiAqICAgICB0aGlzLnN0YXRlID0geyB0ZXh0OiAnVXNlbGVzcyBQbGFjZWhvbGRlcicgfTtcbiAqICAgfVxuICpcbiAqICAgcmVuZGVyKCkge1xuICogICAgIHJldHVybiAoXG4gKiAgICAgICA8VGV4dElucHV0XG4gKiAgICAgICAgIHN0eWxlPXt7aGVpZ2h0OiA0MCwgYm9yZGVyQ29sb3I6ICdncmF5JywgYm9yZGVyV2lkdGg6IDF9fVxuICogICAgICAgICBvbkNoYW5nZVRleHQ9eyh0ZXh0KSA9PiB0aGlzLnNldFN0YXRlKHt0ZXh0fSl9XG4gKiAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnRleHR9XG4gKiAgICAgICAvPlxuICogICAgICk7XG4gKiAgIH1cbiAqIH1cbiAqXG4gKiAvLyBza2lwIHRoaXMgbGluZSBpZiB1c2luZyBDcmVhdGUgUmVhY3QgTmF0aXZlIEFwcFxuICogQXBwUmVnaXN0cnkucmVnaXN0ZXJDb21wb25lbnQoJ0F3ZXNvbWVQcm9qZWN0JywgKCkgPT4gVXNlbGVzc1RleHRJbnB1dCk7XG4gKiBgYGBcbiAqXG4gKiBUd28gbWV0aG9kcyBleHBvc2VkIHZpYSB0aGUgbmF0aXZlIGVsZW1lbnQgYXJlIC5mb2N1cygpIGFuZCAuYmx1cigpIHRoYXRcbiAqIHdpbGwgZm9jdXMgb3IgYmx1ciB0aGUgVGV4dElucHV0IHByb2dyYW1tYXRpY2FsbHkuXG4gKlxuICogTm90ZSB0aGF0IHNvbWUgcHJvcHMgYXJlIG9ubHkgYXZhaWxhYmxlIHdpdGggYG11bHRpbGluZT17dHJ1ZS9mYWxzZX1gLlxuICogQWRkaXRpb25hbGx5LCBib3JkZXIgc3R5bGVzIHRoYXQgYXBwbHkgdG8gb25seSBvbmUgc2lkZSBvZiB0aGUgZWxlbWVudFxuICogKGUuZy4sIGBib3JkZXJCb3R0b21Db2xvcmAsIGBib3JkZXJMZWZ0V2lkdGhgLCBldGMuKSB3aWxsIG5vdCBiZSBhcHBsaWVkIGlmXG4gKiBgbXVsdGlsaW5lPWZhbHNlYC4gVG8gYWNoaWV2ZSB0aGUgc2FtZSBlZmZlY3QsIHlvdSBjYW4gd3JhcCB5b3VyIGBUZXh0SW5wdXRgXG4gKiBpbiBhIGBWaWV3YDpcbiAqXG4gKiBgYGBSZWFjdE5hdGl2ZVdlYlBsYXllclxuICogaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbiAqIGltcG9ydCB7IEFwcFJlZ2lzdHJ5LCBWaWV3LCBUZXh0SW5wdXQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuICpcbiAqIGNsYXNzIFVzZWxlc3NUZXh0SW5wdXQgZXh0ZW5kcyBDb21wb25lbnQge1xuICogICByZW5kZXIoKSB7XG4gKiAgICAgcmV0dXJuIChcbiAqICAgICAgIDxUZXh0SW5wdXRcbiAqICAgICAgICAgey4uLnRoaXMucHJvcHN9IC8vIEluaGVyaXQgYW55IHByb3BzIHBhc3NlZCB0byBpdDsgZS5nLiwgbXVsdGlsaW5lLCBudW1iZXJPZkxpbmVzIGJlbG93XG4gKiAgICAgICAgIGVkaXRhYmxlID0ge3RydWV9XG4gKiAgICAgICAgIG1heExlbmd0aCA9IHs0MH1cbiAqICAgICAgIC8+XG4gKiAgICAgKTtcbiAqICAgfVxuICogfVxuICpcbiAqIGV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZWxlc3NUZXh0SW5wdXRNdWx0aWxpbmUgZXh0ZW5kcyBDb21wb25lbnQge1xuICogICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICogICAgIHN1cGVyKHByb3BzKTtcbiAqICAgICB0aGlzLnN0YXRlID0ge1xuICogICAgICAgdGV4dDogJ1VzZWxlc3MgTXVsdGlsaW5lIFBsYWNlaG9sZGVyJyxcbiAqICAgICB9O1xuICogICB9XG4gKlxuICogICAvLyBJZiB5b3UgdHlwZSBzb21ldGhpbmcgaW4gdGhlIHRleHQgYm94IHRoYXQgaXMgYSBjb2xvciwgdGhlIGJhY2tncm91bmQgd2lsbCBjaGFuZ2UgdG8gdGhhdFxuICogICAvLyBjb2xvci5cbiAqICAgcmVuZGVyKCkge1xuICogICAgIHJldHVybiAoXG4gKiAgICAgIDxWaWV3IHN0eWxlPXt7XG4gKiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLnN0YXRlLnRleHQsXG4gKiAgICAgICAgYm9yZGVyQm90dG9tQ29sb3I6ICcjMDAwMDAwJyxcbiAqICAgICAgICBib3JkZXJCb3R0b21XaWR0aDogMSB9fVxuICogICAgICA+XG4gKiAgICAgICAgPFVzZWxlc3NUZXh0SW5wdXRcbiAqICAgICAgICAgIG11bHRpbGluZSA9IHt0cnVlfVxuICogICAgICAgICAgbnVtYmVyT2ZMaW5lcyA9IHs0fVxuICogICAgICAgICAgb25DaGFuZ2VUZXh0PXsodGV4dCkgPT4gdGhpcy5zZXRTdGF0ZSh7dGV4dH0pfVxuICogICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUudGV4dH1cbiAqICAgICAgICAvPlxuICogICAgICA8L1ZpZXc+XG4gKiAgICAgKTtcbiAqICAgfVxuICogfVxuICpcbiAqIC8vIHNraXAgdGhlc2UgbGluZXMgaWYgdXNpbmcgQ3JlYXRlIFJlYWN0IE5hdGl2ZSBBcHBcbiAqIEFwcFJlZ2lzdHJ5LnJlZ2lzdGVyQ29tcG9uZW50KFxuICogICdBd2Vzb21lUHJvamVjdCcsXG4gKiAgKCkgPT4gVXNlbGVzc1RleHRJbnB1dE11bHRpbGluZVxuICogKTtcbiAqIGBgYFxuICpcbiAqIGBUZXh0SW5wdXRgIGhhcyBieSBkZWZhdWx0IGEgYm9yZGVyIGF0IHRoZSBib3R0b20gb2YgaXRzIHZpZXcuIFRoaXMgYm9yZGVyXG4gKiBoYXMgaXRzIHBhZGRpbmcgc2V0IGJ5IHRoZSBiYWNrZ3JvdW5kIGltYWdlIHByb3ZpZGVkIGJ5IHRoZSBzeXN0ZW0sIGFuZCBpdFxuICogY2Fubm90IGJlIGNoYW5nZWQuIFNvbHV0aW9ucyB0byBhdm9pZCB0aGlzIGlzIHRvIGVpdGhlciBub3Qgc2V0IGhlaWdodFxuICogZXhwbGljaXRseSwgY2FzZSBpbiB3aGljaCB0aGUgc3lzdGVtIHdpbGwgdGFrZSBjYXJlIG9mIGRpc3BsYXlpbmcgdGhlIGJvcmRlclxuICogaW4gdGhlIGNvcnJlY3QgcG9zaXRpb24sIG9yIHRvIG5vdCBkaXNwbGF5IHRoZSBib3JkZXIgYnkgc2V0dGluZ1xuICogYHVuZGVybGluZUNvbG9yQW5kcm9pZGAgdG8gdHJhbnNwYXJlbnQuXG4gKlxuICogTm90ZSB0aGF0IG9uIEFuZHJvaWQgcGVyZm9ybWluZyB0ZXh0IHNlbGVjdGlvbiBpbiBpbnB1dCBjYW4gY2hhbmdlXG4gKiBhcHAncyBhY3Rpdml0eSBgd2luZG93U29mdElucHV0TW9kZWAgcGFyYW0gdG8gYGFkanVzdFJlc2l6ZWAuXG4gKiBUaGlzIG1heSBjYXVzZSBpc3N1ZXMgd2l0aCBjb21wb25lbnRzIHRoYXQgaGF2ZSBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICogd2hpbGUga2V5Ym9hcmQgaXMgYWN0aXZlLiBUbyBhdm9pZCB0aGlzIGJlaGF2aW9yIGVpdGhlciBzcGVjaWZ5IGB3aW5kb3dTb2Z0SW5wdXRNb2RlYFxuICogaW4gQW5kcm9pZE1hbmlmZXN0LnhtbCAoIGh0dHBzOi8vZGV2ZWxvcGVyLmFuZHJvaWQuY29tL2d1aWRlL3RvcGljcy9tYW5pZmVzdC9hY3Rpdml0eS1lbGVtZW50Lmh0bWwgKVxuICogb3IgY29udHJvbCB0aGlzIHBhcmFtIHByb2dyYW1tYXRpY2FsbHkgd2l0aCBuYXRpdmUgY29kZS5cbiAqXG4gKi9cblxuY29uc3QgVGV4dElucHV0ID0gY3JlYXRlUmVhY3RDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVGV4dElucHV0JyxcbiAgc3RhdGljczoge1xuICAgIC8qIFRPRE8oYnJlbnR2YXRuZSkgZG9jcyBhcmUgbmVlZGVkIGZvciB0aGlzICovXG4gICAgU3RhdGU6IFRleHRJbnB1dFN0YXRlLFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIC4uLlZpZXdQcm9wVHlwZXMsXG4gICAgLyoqXG4gICAgICogQ2FuIHRlbGwgYFRleHRJbnB1dGAgdG8gYXV0b21hdGljYWxseSBjYXBpdGFsaXplIGNlcnRhaW4gY2hhcmFjdGVycy5cbiAgICAgKlxuICAgICAqIC0gYGNoYXJhY3RlcnNgOiBhbGwgY2hhcmFjdGVycy5cbiAgICAgKiAtIGB3b3Jkc2A6IGZpcnN0IGxldHRlciBvZiBlYWNoIHdvcmQuXG4gICAgICogLSBgc2VudGVuY2VzYDogZmlyc3QgbGV0dGVyIG9mIGVhY2ggc2VudGVuY2UgKCpkZWZhdWx0KikuXG4gICAgICogLSBgbm9uZWA6IGRvbid0IGF1dG8gY2FwaXRhbGl6ZSBhbnl0aGluZy5cbiAgICAgKi9cbiAgICBhdXRvQ2FwaXRhbGl6ZTogUHJvcFR5cGVzLm9uZU9mKFtcbiAgICAgICdub25lJyxcbiAgICAgICdzZW50ZW5jZXMnLFxuICAgICAgJ3dvcmRzJyxcbiAgICAgICdjaGFyYWN0ZXJzJyxcbiAgICBdKSxcbiAgICAvKipcbiAgICAgKiBJZiBgZmFsc2VgLCBkaXNhYmxlcyBhdXRvLWNvcnJlY3QuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGB0cnVlYC5cbiAgICAgKi9cbiAgICBhdXRvQ29ycmVjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgLyoqXG4gICAgICogSWYgYGZhbHNlYCwgZGlzYWJsZXMgc3BlbGwtY2hlY2sgc3R5bGUgKGkuZS4gcmVkIHVuZGVybGluZXMpLlxuICAgICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGluaGVyaXRlZCBmcm9tIGBhdXRvQ29ycmVjdGAuXG4gICAgICogQHBsYXRmb3JtIGlvc1xuICAgICAqL1xuICAgIHNwZWxsQ2hlY2s6IFByb3BUeXBlcy5ib29sLFxuICAgIC8qKlxuICAgICAqIElmIGB0cnVlYCwgZm9jdXNlcyB0aGUgaW5wdXQgb24gYGNvbXBvbmVudERpZE1vdW50YC5cbiAgICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBgZmFsc2VgLlxuICAgICAqL1xuICAgIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHdoZXRoZXIgZm9udHMgc2hvdWxkIHNjYWxlIHRvIHJlc3BlY3QgVGV4dCBTaXplIGFjY2Vzc2liaWxpdHkgc2V0dGluZ3MuIFRoZVxuICAgICAqIGRlZmF1bHQgaXMgYHRydWVgLlxuICAgICAqL1xuICAgIGFsbG93Rm9udFNjYWxpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIC8qKlxuICAgICAqIElmIGBmYWxzZWAsIHRleHQgaXMgbm90IGVkaXRhYmxlLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBgdHJ1ZWAuXG4gICAgICovXG4gICAgZWRpdGFibGU6IFByb3BUeXBlcy5ib29sLFxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hpY2gga2V5Ym9hcmQgdG8gb3BlbiwgZS5nLmBudW1lcmljYC5cbiAgICAgKlxuICAgICAqIFRoZSBmb2xsb3dpbmcgdmFsdWVzIHdvcmsgYWNyb3NzIHBsYXRmb3JtczpcbiAgICAgKlxuICAgICAqIC0gYGRlZmF1bHRgXG4gICAgICogLSBgbnVtZXJpY2BcbiAgICAgKiAtIGBlbWFpbC1hZGRyZXNzYFxuICAgICAqIC0gYHBob25lLXBhZGBcbiAgICAgKlxuICAgICAqICppT1MgT25seSpcbiAgICAgKlxuICAgICAqIFRoZSBmb2xsb3dpbmcgdmFsdWVzIHdvcmsgb24gaU9TIG9ubHk6XG4gICAgICpcbiAgICAgKiAtIGBhc2NpaS1jYXBhYmxlYFxuICAgICAqIC0gYG51bWJlcnMtYW5kLXB1bmN0dWF0aW9uYFxuICAgICAqIC0gYHVybGBcbiAgICAgKiAtIGBudW1iZXItcGFkYFxuICAgICAqIC0gYG5hbWUtcGhvbmUtcGFkYFxuICAgICAqIC0gYGRlY2ltYWwtcGFkYFxuICAgICAqIC0gYHR3aXR0ZXJgXG4gICAgICogLSBgd2ViLXNlYXJjaGBcbiAgICAgKlxuICAgICAqICpBbmRyb2lkIE9ubHkqXG4gICAgICpcbiAgICAgKiBUaGUgZm9sbG93aW5nIHZhbHVlcyB3b3JrIG9uIEFuZHJvaWQgb25seTpcbiAgICAgKlxuICAgICAqIC0gYHZpc2libGUtcGFzc3dvcmRgXG4gICAgICovXG4gICAga2V5Ym9hcmRUeXBlOiBQcm9wVHlwZXMub25lT2YoW1xuICAgICAgLy8gQ3Jvc3MtcGxhdGZvcm1cbiAgICAgICdkZWZhdWx0JyxcbiAgICAgICdlbWFpbC1hZGRyZXNzJyxcbiAgICAgICdudW1lcmljJyxcbiAgICAgICdwaG9uZS1wYWQnLFxuICAgICAgLy8gaU9TLW9ubHlcbiAgICAgICdhc2NpaS1jYXBhYmxlJyxcbiAgICAgICdudW1iZXJzLWFuZC1wdW5jdHVhdGlvbicsXG4gICAgICAndXJsJyxcbiAgICAgICdudW1iZXItcGFkJyxcbiAgICAgICduYW1lLXBob25lLXBhZCcsXG4gICAgICAnZGVjaW1hbC1wYWQnLFxuICAgICAgJ3R3aXR0ZXInLFxuICAgICAgJ3dlYi1zZWFyY2gnLFxuICAgICAgLy8gQW5kcm9pZC1vbmx5XG4gICAgICAndmlzaWJsZS1wYXNzd29yZCcsXG4gICAgXSksXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB0aGUgY29sb3Igb2YgdGhlIGtleWJvYXJkLlxuICAgICAqIEBwbGF0Zm9ybSBpb3NcbiAgICAgKi9cbiAgICBrZXlib2FyZEFwcGVhcmFuY2U6IFByb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAnbGlnaHQnLCAnZGFyayddKSxcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGhvdyB0aGUgcmV0dXJuIGtleSBzaG91bGQgbG9vay4gT24gQW5kcm9pZCB5b3UgY2FuIGFsc28gdXNlXG4gICAgICogYHJldHVybktleUxhYmVsYC5cbiAgICAgKlxuICAgICAqICpDcm9zcyBwbGF0Zm9ybSpcbiAgICAgKlxuICAgICAqIFRoZSBmb2xsb3dpbmcgdmFsdWVzIHdvcmsgYWNyb3NzIHBsYXRmb3JtczpcbiAgICAgKlxuICAgICAqIC0gYGRvbmVgXG4gICAgICogLSBgZ29gXG4gICAgICogLSBgbmV4dGBcbiAgICAgKiAtIGBzZWFyY2hgXG4gICAgICogLSBgc2VuZGBcbiAgICAgKlxuICAgICAqICpBbmRyb2lkIE9ubHkqXG4gICAgICpcbiAgICAgKiBUaGUgZm9sbG93aW5nIHZhbHVlcyB3b3JrIG9uIEFuZHJvaWQgb25seTpcbiAgICAgKlxuICAgICAqIC0gYG5vbmVgXG4gICAgICogLSBgcHJldmlvdXNgXG4gICAgICpcbiAgICAgKiAqaU9TIE9ubHkqXG4gICAgICpcbiAgICAgKiBUaGUgZm9sbG93aW5nIHZhbHVlcyB3b3JrIG9uIGlPUyBvbmx5OlxuICAgICAqXG4gICAgICogLSBgZGVmYXVsdGBcbiAgICAgKiAtIGBlbWVyZ2VuY3ktY2FsbGBcbiAgICAgKiAtIGBnb29nbGVgXG4gICAgICogLSBgam9pbmBcbiAgICAgKiAtIGByb3V0ZWBcbiAgICAgKiAtIGB5YWhvb2BcbiAgICAgKi9cbiAgICByZXR1cm5LZXlUeXBlOiBQcm9wVHlwZXMub25lT2YoW1xuICAgICAgLy8gQ3Jvc3MtcGxhdGZvcm1cbiAgICAgICdkb25lJyxcbiAgICAgICdnbycsXG4gICAgICAnbmV4dCcsXG4gICAgICAnc2VhcmNoJyxcbiAgICAgICdzZW5kJyxcbiAgICAgIC8vIEFuZHJvaWQtb25seVxuICAgICAgJ25vbmUnLFxuICAgICAgJ3ByZXZpb3VzJyxcbiAgICAgIC8vIGlPUy1vbmx5XG4gICAgICAnZGVmYXVsdCcsXG4gICAgICAnZW1lcmdlbmN5LWNhbGwnLFxuICAgICAgJ2dvb2dsZScsXG4gICAgICAnam9pbicsXG4gICAgICAncm91dGUnLFxuICAgICAgJ3lhaG9vJyxcbiAgICBdKSxcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSByZXR1cm4ga2V5IHRvIHRoZSBsYWJlbC4gVXNlIGl0IGluc3RlYWQgb2YgYHJldHVybktleVR5cGVgLlxuICAgICAqIEBwbGF0Zm9ybSBhbmRyb2lkXG4gICAgICovXG4gICAgcmV0dXJuS2V5TGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgLyoqXG4gICAgICogTGltaXRzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRoYXQgY2FuIGJlIGVudGVyZWQuIFVzZSB0aGlzXG4gICAgICogaW5zdGVhZCBvZiBpbXBsZW1lbnRpbmcgdGhlIGxvZ2ljIGluIEpTIHRvIGF2b2lkIGZsaWNrZXIuXG4gICAgICovXG4gICAgbWF4TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG51bWJlciBvZiBsaW5lcyBmb3IgYSBgVGV4dElucHV0YC4gVXNlIGl0IHdpdGggbXVsdGlsaW5lIHNldCB0b1xuICAgICAqIGB0cnVlYCB0byBiZSBhYmxlIHRvIGZpbGwgdGhlIGxpbmVzLlxuICAgICAqIEBwbGF0Zm9ybSBhbmRyb2lkXG4gICAgICovXG4gICAgbnVtYmVyT2ZMaW5lczogUHJvcFR5cGVzLm51bWJlcixcbiAgICAvKipcbiAgICAgKiBXaGVuIGBmYWxzZWAsIGlmIHRoZXJlIGlzIGEgc21hbGwgYW1vdW50IG9mIHNwYWNlIGF2YWlsYWJsZSBhcm91bmQgYSB0ZXh0IGlucHV0XG4gICAgICogKGUuZy4gbGFuZHNjYXBlIG9yaWVudGF0aW9uIG9uIGEgcGhvbmUpLCB0aGUgT1MgbWF5IGNob29zZSB0byBoYXZlIHRoZSB1c2VyIGVkaXRcbiAgICAgKiB0aGUgdGV4dCBpbnNpZGUgb2YgYSBmdWxsIHNjcmVlbiB0ZXh0IGlucHV0IG1vZGUuIFdoZW4gYHRydWVgLCB0aGlzIGZlYXR1cmUgaXNcbiAgICAgKiBkaXNhYmxlZCBhbmQgdXNlcnMgd2lsbCBhbHdheXMgZWRpdCB0aGUgdGV4dCBkaXJlY3RseSBpbnNpZGUgb2YgdGhlIHRleHQgaW5wdXQuXG4gICAgICogRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAgICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgICAqL1xuICAgIGRpc2FibGVGdWxsc2NyZWVuVUk6IFByb3BUeXBlcy5ib29sLFxuICAgIC8qKlxuICAgICAqIElmIGB0cnVlYCwgdGhlIGtleWJvYXJkIGRpc2FibGVzIHRoZSByZXR1cm4ga2V5IHdoZW4gdGhlcmUgaXMgbm8gdGV4dCBhbmRcbiAgICAgKiBhdXRvbWF0aWNhbGx5IGVuYWJsZXMgaXQgd2hlbiB0aGVyZSBpcyB0ZXh0LiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBgZmFsc2VgLlxuICAgICAqIEBwbGF0Zm9ybSBpb3NcbiAgICAgKi9cbiAgICBlbmFibGVzUmV0dXJuS2V5QXV0b21hdGljYWxseTogUHJvcFR5cGVzLmJvb2wsXG4gICAgLyoqXG4gICAgICogSWYgYHRydWVgLCB0aGUgdGV4dCBpbnB1dCBjYW4gYmUgbXVsdGlwbGUgbGluZXMuXG4gICAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuICAgIC8qKlxuICAgICAqIFNldCB0ZXh0IGJyZWFrIHN0cmF0ZWd5IG9uIEFuZHJvaWQgQVBJIExldmVsIDIzKywgcG9zc2libGUgdmFsdWVzIGFyZSBgc2ltcGxlYCwgYGhpZ2hRdWFsaXR5YCwgYGJhbGFuY2VkYFxuICAgICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGBzaW1wbGVgLlxuICAgICAqIEBwbGF0Zm9ybSBhbmRyb2lkXG4gICAgICovXG4gICAgdGV4dEJyZWFrU3RyYXRlZ3k6IFByb3BUeXBlcy5vbmVPZihbJ3NpbXBsZScsICdoaWdoUXVhbGl0eScsICdiYWxhbmNlZCddKSxcbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSB0ZXh0IGlucHV0IGlzIGJsdXJyZWQuXG4gICAgICovXG4gICAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSB0ZXh0IGlucHV0IGlzIGZvY3VzZWQuXG4gICAgICovXG4gICAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgdGV4dCBpbnB1dCdzIHRleHQgY2hhbmdlcy5cbiAgICAgKi9cbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgdGV4dCBpbnB1dCdzIHRleHQgY2hhbmdlcy5cbiAgICAgKiBDaGFuZ2VkIHRleHQgaXMgcGFzc2VkIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSBjYWxsYmFjayBoYW5kbGVyLlxuICAgICAqL1xuICAgIG9uQ2hhbmdlVGV4dDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgdGV4dCBpbnB1dCdzIGNvbnRlbnQgc2l6ZSBjaGFuZ2VzLlxuICAgICAqIFRoaXMgd2lsbCBiZSBjYWxsZWQgd2l0aFxuICAgICAqIGB7IG5hdGl2ZUV2ZW50OiB7IGNvbnRlbnRTaXplOiB7IHdpZHRoLCBoZWlnaHQgfSB9IH1gLlxuICAgICAqXG4gICAgICogT25seSBjYWxsZWQgZm9yIG11bHRpbGluZSB0ZXh0IGlucHV0cy5cbiAgICAgKi9cbiAgICBvbkNvbnRlbnRTaXplQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHRleHQgaW5wdXQgZW5kcy5cbiAgICAgKi9cbiAgICBvbkVuZEVkaXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gdGhlIHRleHQgaW5wdXQgc2VsZWN0aW9uIGlzIGNoYW5nZWQuXG4gICAgICogVGhpcyB3aWxsIGJlIGNhbGxlZCB3aXRoXG4gICAgICogYHsgbmF0aXZlRXZlbnQ6IHsgc2VsZWN0aW9uOiB7IHN0YXJ0LCBlbmQgfSB9IH1gLlxuICAgICAqL1xuICAgIG9uU2VsZWN0aW9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSB0ZXh0IGlucHV0J3Mgc3VibWl0IGJ1dHRvbiBpcyBwcmVzc2VkLlxuICAgICAqIEludmFsaWQgaWYgYG11bHRpbGluZT17dHJ1ZX1gIGlzIHNwZWNpZmllZC5cbiAgICAgKi9cbiAgICBvblN1Ym1pdEVkaXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gYSBrZXkgaXMgcHJlc3NlZC5cbiAgICAgKiBUaGlzIHdpbGwgYmUgY2FsbGVkIHdpdGggYHsgbmF0aXZlRXZlbnQ6IHsga2V5OiBrZXlWYWx1ZSB9IH1gXG4gICAgICogd2hlcmUgYGtleVZhbHVlYCBpcyBgJ0VudGVyJ2Agb3IgYCdCYWNrc3BhY2UnYCBmb3IgcmVzcGVjdGl2ZSBrZXlzIGFuZFxuICAgICAqIHRoZSB0eXBlZC1pbiBjaGFyYWN0ZXIgb3RoZXJ3aXNlIGluY2x1ZGluZyBgJyAnYCBmb3Igc3BhY2UuXG4gICAgICogRmlyZXMgYmVmb3JlIGBvbkNoYW5nZWAgY2FsbGJhY2tzLlxuICAgICAqL1xuICAgIG9uS2V5UHJlc3M6IFByb3BUeXBlcy5mdW5jLFxuICAgIC8qKlxuICAgICAqIEludm9rZWQgb24gbW91bnQgYW5kIGxheW91dCBjaGFuZ2VzIHdpdGggYHt4LCB5LCB3aWR0aCwgaGVpZ2h0fWAuXG4gICAgICovXG4gICAgb25MYXlvdXQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIC8qKlxuICAgICAqIEludm9rZWQgb24gY29udGVudCBzY3JvbGwgd2l0aCBgeyBuYXRpdmVFdmVudDogeyBjb250ZW50T2Zmc2V0OiB7IHgsIHkgfSB9IH1gLlxuICAgICAqIE1heSBhbHNvIGNvbnRhaW4gb3RoZXIgcHJvcGVydGllcyBmcm9tIFNjcm9sbEV2ZW50IGJ1dCBvbiBBbmRyb2lkIGNvbnRlbnRTaXplXG4gICAgICogaXMgbm90IHByb3ZpZGVkIGZvciBwZXJmb3JtYW5jZSByZWFzb25zLlxuICAgICAqL1xuICAgIG9uU2Nyb2xsOiBQcm9wVHlwZXMuZnVuYyxcbiAgICAvKipcbiAgICAgKiBUaGUgc3RyaW5nIHRoYXQgd2lsbCBiZSByZW5kZXJlZCBiZWZvcmUgdGV4dCBpbnB1dCBoYXMgYmVlbiBlbnRlcmVkLlxuICAgICAqL1xuICAgIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIC8qKlxuICAgICAqIFRoZSB0ZXh0IGNvbG9yIG9mIHRoZSBwbGFjZWhvbGRlciBzdHJpbmcuXG4gICAgICovXG4gICAgcGxhY2Vob2xkZXJUZXh0Q29sb3I6IENvbG9yUHJvcFR5cGUsXG4gICAgLyoqXG4gICAgICogSWYgYHRydWVgLCB0aGUgdGV4dCBpbnB1dCBvYnNjdXJlcyB0aGUgdGV4dCBlbnRlcmVkIHNvIHRoYXQgc2Vuc2l0aXZlIHRleHRcbiAgICAgKiBsaWtlIHBhc3N3b3JkcyBzdGF5IHNlY3VyZS4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgYGZhbHNlYC4gRG9lcyBub3Qgd29yayB3aXRoICdtdWx0aWxpbmU9e3RydWV9Jy5cbiAgICAgKi9cbiAgICBzZWN1cmVUZXh0RW50cnk6IFByb3BUeXBlcy5ib29sLFxuICAgIC8qKlxuICAgICAqIFRoZSBoaWdobGlnaHQgYW5kIGN1cnNvciBjb2xvciBvZiB0aGUgdGV4dCBpbnB1dC5cbiAgICAgKi9cbiAgICBzZWxlY3Rpb25Db2xvcjogQ29sb3JQcm9wVHlwZSxcbiAgICAvKipcbiAgICAgKiBBbiBpbnN0YW5jZSBvZiBgRG9jdW1lbnRTZWxlY3Rpb25TdGF0ZWAsIHRoaXMgaXMgc29tZSBzdGF0ZSB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvclxuICAgICAqIG1haW50YWluaW5nIHNlbGVjdGlvbiBpbmZvcm1hdGlvbiBmb3IgYSBkb2N1bWVudC5cbiAgICAgKlxuICAgICAqIFNvbWUgZnVuY3Rpb25hbGl0eSB0aGF0IGNhbiBiZSBwZXJmb3JtZWQgd2l0aCB0aGlzIGluc3RhbmNlIGlzOlxuICAgICAqXG4gICAgICogLSBgYmx1cigpYFxuICAgICAqIC0gYGZvY3VzKClgXG4gICAgICogLSBgdXBkYXRlKClgXG4gICAgICpcbiAgICAgKiA+IFlvdSBjYW4gcmVmZXJlbmNlIGBEb2N1bWVudFNlbGVjdGlvblN0YXRlYCBpblxuICAgICAqID4gW2B2ZW5kb3IvZG9jdW1lbnQvc2VsZWN0aW9uL0RvY3VtZW50U2VsZWN0aW9uU3RhdGUuanNgXShodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL2Jsb2IvbWFzdGVyL0xpYnJhcmllcy92ZW5kb3IvZG9jdW1lbnQvc2VsZWN0aW9uL0RvY3VtZW50U2VsZWN0aW9uU3RhdGUuanMpXG4gICAgICpcbiAgICAgKiBAcGxhdGZvcm0gaW9zXG4gICAgICovXG4gICAgc2VsZWN0aW9uU3RhdGU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKERvY3VtZW50U2VsZWN0aW9uU3RhdGUpLFxuICAgIC8qKlxuICAgICAqIFRoZSBzdGFydCBhbmQgZW5kIG9mIHRoZSB0ZXh0IGlucHV0J3Mgc2VsZWN0aW9uLiBTZXQgc3RhcnQgYW5kIGVuZCB0b1xuICAgICAqIHRoZSBzYW1lIHZhbHVlIHRvIHBvc2l0aW9uIHRoZSBjdXJzb3IuXG4gICAgICovXG4gICAgc2VsZWN0aW9uOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgc3RhcnQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICAgIGVuZDogUHJvcFR5cGVzLm51bWJlcixcbiAgICB9KSxcbiAgICAvKipcbiAgICAgKiBUaGUgdmFsdWUgdG8gc2hvdyBmb3IgdGhlIHRleHQgaW5wdXQuIGBUZXh0SW5wdXRgIGlzIGEgY29udHJvbGxlZFxuICAgICAqIGNvbXBvbmVudCwgd2hpY2ggbWVhbnMgdGhlIG5hdGl2ZSB2YWx1ZSB3aWxsIGJlIGZvcmNlZCB0byBtYXRjaCB0aGlzXG4gICAgICogdmFsdWUgcHJvcCBpZiBwcm92aWRlZC4gRm9yIG1vc3QgdXNlcywgdGhpcyB3b3JrcyBncmVhdCwgYnV0IGluIHNvbWVcbiAgICAgKiBjYXNlcyB0aGlzIG1heSBjYXVzZSBmbGlja2VyaW5nIC0gb25lIGNvbW1vbiBjYXVzZSBpcyBwcmV2ZW50aW5nIGVkaXRzXG4gICAgICogYnkga2VlcGluZyB2YWx1ZSB0aGUgc2FtZS4gSW4gYWRkaXRpb24gdG8gc2ltcGx5IHNldHRpbmcgdGhlIHNhbWUgdmFsdWUsXG4gICAgICogZWl0aGVyIHNldCBgZWRpdGFibGU9e2ZhbHNlfWAsIG9yIHNldC91cGRhdGUgYG1heExlbmd0aGAgdG8gcHJldmVudFxuICAgICAqIHVud2FudGVkIGVkaXRzIHdpdGhvdXQgZmxpY2tlci5cbiAgICAgKi9cbiAgICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAvKipcbiAgICAgKiBQcm92aWRlcyBhbiBpbml0aWFsIHZhbHVlIHRoYXQgd2lsbCBjaGFuZ2Ugd2hlbiB0aGUgdXNlciBzdGFydHMgdHlwaW5nLlxuICAgICAqIFVzZWZ1bCBmb3Igc2ltcGxlIHVzZS1jYXNlcyB3aGVyZSB5b3UgZG8gbm90IHdhbnQgdG8gZGVhbCB3aXRoIGxpc3RlbmluZ1xuICAgICAqIHRvIGV2ZW50cyBhbmQgdXBkYXRpbmcgdGhlIHZhbHVlIHByb3AgdG8ga2VlcCB0aGUgY29udHJvbGxlZCBzdGF0ZSBpbiBzeW5jLlxuICAgICAqL1xuICAgIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSBjbGVhciBidXR0b24gc2hvdWxkIGFwcGVhciBvbiB0aGUgcmlnaHQgc2lkZSBvZiB0aGUgdGV4dCB2aWV3LlxuICAgICAqIFRoaXMgcHJvcGVydHkgaXMgc3VwcG9ydGVkIG9ubHkgZm9yIHNpbmdsZS1saW5lIFRleHRJbnB1dCBjb21wb25lbnQuXG4gICAgICogQHBsYXRmb3JtIGlvc1xuICAgICAqL1xuICAgIGNsZWFyQnV0dG9uTW9kZTogUHJvcFR5cGVzLm9uZU9mKFtcbiAgICAgICduZXZlcicsXG4gICAgICAnd2hpbGUtZWRpdGluZycsXG4gICAgICAndW5sZXNzLWVkaXRpbmcnLFxuICAgICAgJ2Fsd2F5cycsXG4gICAgXSksXG4gICAgLyoqXG4gICAgICogSWYgYHRydWVgLCBjbGVhcnMgdGhlIHRleHQgZmllbGQgYXV0b21hdGljYWxseSB3aGVuIGVkaXRpbmcgYmVnaW5zLlxuICAgICAqIEBwbGF0Zm9ybSBpb3NcbiAgICAgKi9cbiAgICBjbGVhclRleHRPbkZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICAvKipcbiAgICAgKiBJZiBgdHJ1ZWAsIGFsbCB0ZXh0IHdpbGwgYXV0b21hdGljYWxseSBiZSBzZWxlY3RlZCBvbiBmb2N1cy5cbiAgICAgKi9cbiAgICBzZWxlY3RUZXh0T25Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gICAgLyoqXG4gICAgICogSWYgYHRydWVgLCB0aGUgdGV4dCBmaWVsZCB3aWxsIGJsdXIgd2hlbiBzdWJtaXR0ZWQuXG4gICAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZSBmb3Igc2luZ2xlLWxpbmUgZmllbGRzIGFuZCBmYWxzZSBmb3JcbiAgICAgKiBtdWx0aWxpbmUgZmllbGRzLiBOb3RlIHRoYXQgZm9yIG11bHRpbGluZSBmaWVsZHMsIHNldHRpbmcgYGJsdXJPblN1Ym1pdGBcbiAgICAgKiB0byBgdHJ1ZWAgbWVhbnMgdGhhdCBwcmVzc2luZyByZXR1cm4gd2lsbCBibHVyIHRoZSBmaWVsZCBhbmQgdHJpZ2dlciB0aGVcbiAgICAgKiBgb25TdWJtaXRFZGl0aW5nYCBldmVudCBpbnN0ZWFkIG9mIGluc2VydGluZyBhIG5ld2xpbmUgaW50byB0aGUgZmllbGQuXG4gICAgICovXG4gICAgYmx1ck9uU3VibWl0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICAvKipcbiAgICAgKiBOb3RlIHRoYXQgbm90IGFsbCBUZXh0IHN0eWxlcyBhcmUgc3VwcG9ydGVkLCBhbiBpbmNvbXBsZXRlIGxpc3Qgb2Ygd2hhdCBpcyBub3Qgc3VwcG9ydGVkIGluY2x1ZGVzOlxuICAgICAqXG4gICAgICogLSBgYm9yZGVyTGVmdFdpZHRoYFxuICAgICAqIC0gYGJvcmRlclRvcFdpZHRoYFxuICAgICAqIC0gYGJvcmRlclJpZ2h0V2lkdGhgXG4gICAgICogLSBgYm9yZGVyQm90dG9tV2lkdGhgXG4gICAgICogLSBgYm9yZGVyVG9wTGVmdFJhZGl1c2BcbiAgICAgKiAtIGBib3JkZXJUb3BSaWdodFJhZGl1c2BcbiAgICAgKiAtIGBib3JkZXJCb3R0b21SaWdodFJhZGl1c2BcbiAgICAgKiAtIGBib3JkZXJCb3R0b21MZWZ0UmFkaXVzYFxuICAgICAqXG4gICAgICogc2VlIFtJc3N1ZSM3MDcwXShodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL2lzc3Vlcy83MDcwKVxuICAgICAqIGZvciBtb3JlIGRldGFpbC5cbiAgICAgKlxuICAgICAqIFtTdHlsZXNdKGRvY3Mvc3R5bGUuaHRtbClcbiAgICAgKi9cbiAgICBzdHlsZTogVGV4dC5wcm9wVHlwZXMuc3R5bGUsXG4gICAgLyoqXG4gICAgICogVGhlIGNvbG9yIG9mIHRoZSBgVGV4dElucHV0YCB1bmRlcmxpbmUuXG4gICAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICAgKi9cbiAgICB1bmRlcmxpbmVDb2xvckFuZHJvaWQ6IENvbG9yUHJvcFR5cGUsXG5cbiAgICAvKipcbiAgICAgKiBJZiBkZWZpbmVkLCB0aGUgcHJvdmlkZWQgaW1hZ2UgcmVzb3VyY2Ugd2lsbCBiZSByZW5kZXJlZCBvbiB0aGUgbGVmdC5cbiAgICAgKiBUaGUgaW1hZ2UgcmVzb3VyY2UgbXVzdCBiZSBpbnNpZGUgYC9hbmRyb2lkL2FwcC9zcmMvbWFpbi9yZXMvZHJhd2FibGVgIGFuZCByZWZlcmVuY2VkXG4gICAgICogbGlrZVxuICAgICAqIGBgYFxuICAgICAqIDxUZXh0SW5wdXRcbiAgICAgKiAgaW5saW5lSW1hZ2VMZWZ0PSdzZWFyY2hfaWNvbidcbiAgICAgKiAvPlxuICAgICAqIGBgYFxuICAgICAqIEBwbGF0Zm9ybSBhbmRyb2lkXG4gICAgICovXG4gICAgaW5saW5lSW1hZ2VMZWZ0OiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgLyoqXG4gICAgICogUGFkZGluZyBiZXR3ZWVuIHRoZSBpbmxpbmUgaW1hZ2UsIGlmIGFueSwgYW5kIHRoZSB0ZXh0IGlucHV0IGl0c2VsZi5cbiAgICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgICAqL1xuICAgIGlubGluZUltYWdlUGFkZGluZzogUHJvcFR5cGVzLm51bWJlcixcblxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgdGhlIHR5cGVzIG9mIGRhdGEgY29udmVydGVkIHRvIGNsaWNrYWJsZSBVUkxzIGluIHRoZSB0ZXh0IGlucHV0LlxuICAgICAqIE9ubHkgdmFsaWQgaWYgYG11bHRpbGluZT17dHJ1ZX1gIGFuZCBgZWRpdGFibGU9e2ZhbHNlfWAuXG4gICAgICogQnkgZGVmYXVsdCBubyBkYXRhIHR5cGVzIGFyZSBkZXRlY3RlZC5cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gcHJvdmlkZSBvbmUgdHlwZSBvciBhbiBhcnJheSBvZiBtYW55IHR5cGVzLlxuICAgICAqXG4gICAgICogUG9zc2libGUgdmFsdWVzIGZvciBgZGF0YURldGVjdG9yVHlwZXNgIGFyZTpcbiAgICAgKlxuICAgICAqIC0gYCdwaG9uZU51bWJlcidgXG4gICAgICogLSBgJ2xpbmsnYFxuICAgICAqIC0gYCdhZGRyZXNzJ2BcbiAgICAgKiAtIGAnY2FsZW5kYXJFdmVudCdgXG4gICAgICogLSBgJ25vbmUnYFxuICAgICAqIC0gYCdhbGwnYFxuICAgICAqXG4gICAgICogQHBsYXRmb3JtIGlvc1xuICAgICAqL1xuICAgIGRhdGFEZXRlY3RvclR5cGVzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFByb3BUeXBlcy5vbmVPZihEYXRhRGV0ZWN0b3JUeXBlcyksXG4gICAgICBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2YoRGF0YURldGVjdG9yVHlwZXMpKSxcbiAgICBdKSxcbiAgICAvKipcbiAgICAgKiBJZiBgdHJ1ZWAsIGNhcmV0IGlzIGhpZGRlbi4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgYGZhbHNlYC5cbiAgICAgKiBUaGlzIHByb3BlcnR5IGlzIHN1cHBvcnRlZCBvbmx5IGZvciBzaW5nbGUtbGluZSBUZXh0SW5wdXQgY29tcG9uZW50IG9uIGlPUy5cbiAgICAgKi9cbiAgICBjYXJldEhpZGRlbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgLypcbiAgICAgKiBJZiBgdHJ1ZWAsIGNvbnRleHRNZW51SGlkZGVuIGlzIGhpZGRlbi4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBjb250ZXh0TWVudUhpZGRlbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgLyoqXG4gICAgICogQW4gb3B0aW9uYWwgaWRlbnRpZmllciB3aGljaCBsaW5rcyBhIGN1c3RvbSBJbnB1dEFjY2Vzc29yeVZpZXcgdG9cbiAgICAgKiB0aGlzIHRleHQgaW5wdXQuIFRoZSBJbnB1dEFjY2Vzc29yeVZpZXcgaXMgcmVuZGVyZWQgYWJvdmUgdGhlXG4gICAgICoga2V5Ym9hcmQgd2hlbiB0aGlzIHRleHQgaW5wdXQgaXMgZm9jdXNlZC5cbiAgICAgKiBAcGxhdGZvcm0gaW9zXG4gICAgICovXG4gICAgaW5wdXRBY2Nlc3NvcnlWaWV3SUQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIH0sXG4gIGdldERlZmF1bHRQcm9wcygpOiBPYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICBhbGxvd0ZvbnRTY2FsaW5nOiB0cnVlLFxuICAgIH07XG4gIH0sXG4gIC8qKlxuICAgKiBgTmF0aXZlTWV0aG9kc01peGluYCB3aWxsIGxvb2sgZm9yIHRoaXMgd2hlbiBpbnZva2luZyBgc2V0TmF0aXZlUHJvcHNgLiBXZVxuICAgKiBtYWtlIGB0aGlzYCBsb29rIGxpa2UgYW4gYWN0dWFsIG5hdGl2ZSBjb21wb25lbnQgY2xhc3MuXG4gICAqL1xuICBtaXhpbnM6IFtOYXRpdmVNZXRob2RzTWl4aW4sIFRpbWVyTWl4aW5dLFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgaW5wdXQgaXMgY3VycmVudGx5IGZvY3VzZWQ7IGBmYWxzZWAgb3RoZXJ3aXNlLlxuICAgKi9cbiAgaXNGb2N1c2VkOiBmdW5jdGlvbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgVGV4dElucHV0U3RhdGUuY3VycmVudGx5Rm9jdXNlZEZpZWxkKCkgPT09XG4gICAgICBSZWFjdE5hdGl2ZS5maW5kTm9kZUhhbmRsZSh0aGlzLl9pbnB1dFJlZilcbiAgICApO1xuICB9LFxuXG4gIF9pbnB1dFJlZjogKHVuZGVmaW5lZDogYW55KSxcbiAgX2ZvY3VzU3Vic2NyaXB0aW9uOiAodW5kZWZpbmVkOiA/RnVuY3Rpb24pLFxuICBfbGFzdE5hdGl2ZVRleHQ6ICh1bmRlZmluZWQ6ID9zdHJpbmcpLFxuICBfbGFzdE5hdGl2ZVNlbGVjdGlvbjogKHVuZGVmaW5lZDogP1NlbGVjdGlvbiksXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xhc3ROYXRpdmVUZXh0ID0gdGhpcy5wcm9wcy52YWx1ZTtcbiAgICBpZiAoIXRoaXMuY29udGV4dC5mb2N1c0VtaXR0ZXIpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmF1dG9Gb2N1cykge1xuICAgICAgICB0aGlzLnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmZvY3VzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fZm9jdXNTdWJzY3JpcHRpb24gPSB0aGlzLmNvbnRleHQuZm9jdXNFbWl0dGVyLmFkZExpc3RlbmVyKFxuICAgICAgJ2ZvY3VzJyxcbiAgICAgIGVsID0+IHtcbiAgICAgICAgaWYgKHRoaXMgPT09IGVsKSB7XG4gICAgICAgICAgdGhpcy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5mb2N1cyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0ZvY3VzZWQoKSkge1xuICAgICAgICAgIHRoaXMuYmx1cigpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICk7XG4gICAgaWYgKHRoaXMucHJvcHMuYXV0b0ZvY3VzKSB7XG4gICAgICB0aGlzLmNvbnRleHQub25Gb2N1c1JlcXVlc3RlZCh0aGlzKTtcbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2ZvY3VzU3Vic2NyaXB0aW9uICYmIHRoaXMuX2ZvY3VzU3Vic2NyaXB0aW9uLnJlbW92ZSgpO1xuICAgIGlmICh0aGlzLmlzRm9jdXNlZCgpKSB7XG4gICAgICB0aGlzLmJsdXIoKTtcbiAgICB9XG4gIH0sXG5cbiAgZ2V0Q2hpbGRDb250ZXh0KCk6IFZpZXdDaGlsZENvbnRleHQge1xuICAgIHJldHVybiB7XG4gICAgICBpc0luQVBhcmVudFRleHQ6IHRydWUsXG4gICAgfTtcbiAgfSxcblxuICBjaGlsZENvbnRleHRUeXBlczogVmlld0NvbnRleHRUeXBlcyxcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICAuLi5WaWV3Q29udGV4dFR5cGVzLFxuICAgIG9uRm9jdXNSZXF1ZXN0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIGZvY3VzRW1pdHRlcjogUHJvcFR5cGVzLmluc3RhbmNlT2YoRXZlbnRFbWl0dGVyKSxcbiAgfSxcblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgdGV4dCBmcm9tIHRoZSBgVGV4dElucHV0YC5cbiAgICovXG4gIGNsZWFyOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldE5hdGl2ZVByb3BzKHt0ZXh0OiAnJ30pO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgaWYgKFBsYXRmb3JtLk9TID09PSAnaW9zJykge1xuICAgICAgcmV0dXJuIFVJTWFuYWdlci5SQ1RWaXJ0dWFsVGV4dFxuICAgICAgICA/IHRoaXMuX3JlbmRlcklPUygpXG4gICAgICAgIDogdGhpcy5fcmVuZGVySU9TTGVnYWN5KCk7XG4gICAgfSBlbHNlIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVuZGVyQW5kcm9pZCgpO1xuICAgIH1cbiAgfSxcblxuICBfZ2V0VGV4dDogZnVuY3Rpb24oKTogP3N0cmluZyB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLnByb3BzLnZhbHVlID09PSAnc3RyaW5nJ1xuICAgICAgPyB0aGlzLnByb3BzLnZhbHVlXG4gICAgICA6IHR5cGVvZiB0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZSA9PT0gJ3N0cmluZydcbiAgICAgICAgPyB0aGlzLnByb3BzLmRlZmF1bHRWYWx1ZVxuICAgICAgICA6ICcnO1xuICB9LFxuXG4gIF9zZXROYXRpdmVSZWY6IGZ1bmN0aW9uKHJlZjogYW55KSB7XG4gICAgdGhpcy5faW5wdXRSZWYgPSByZWY7XG4gIH0sXG5cbiAgX3JlbmRlcklPU0xlZ2FjeTogZnVuY3Rpb24oKSB7XG4gICAgbGV0IHRleHRDb250YWluZXI7XG5cbiAgICBjb25zdCBwcm9wcyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMucHJvcHMpO1xuICAgIHByb3BzLnN0eWxlID0gW3RoaXMucHJvcHMuc3R5bGVdO1xuXG4gICAgaWYgKHByb3BzLnNlbGVjdGlvbiAmJiBwcm9wcy5zZWxlY3Rpb24uZW5kID09IG51bGwpIHtcbiAgICAgIHByb3BzLnNlbGVjdGlvbiA9IHtcbiAgICAgICAgc3RhcnQ6IHByb3BzLnNlbGVjdGlvbi5zdGFydCxcbiAgICAgICAgZW5kOiBwcm9wcy5zZWxlY3Rpb24uc3RhcnQsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICghcHJvcHMubXVsdGlsaW5lKSB7XG4gICAgICBpZiAoX19ERVZfXykge1xuICAgICAgICBmb3IgKGNvbnN0IHByb3BLZXkgaW4gb25seU11bHRpbGluZSkge1xuICAgICAgICAgIGlmIChwcm9wc1twcm9wS2V5XSkge1xuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICdUZXh0SW5wdXQgcHJvcCBgJyArXG4gICAgICAgICAgICAgICAgcHJvcEtleSArXG4gICAgICAgICAgICAgICAgJ2AgaXMgb25seSBzdXBwb3J0ZWQgd2l0aCBtdWx0aWxpbmUuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB3YXJuaW5nKGZhbHNlLCAnJXMnLCBlcnJvci5zdGFjayk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0ZXh0Q29udGFpbmVyID0gKFxuICAgICAgICA8UkNUU2luZ2xlbGluZVRleHRJbnB1dFZpZXdcbiAgICAgICAgICByZWY9e3RoaXMuX3NldE5hdGl2ZVJlZn1cbiAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgb25Gb2N1cz17dGhpcy5fb25Gb2N1c31cbiAgICAgICAgICBvbkJsdXI9e3RoaXMuX29uQmx1cn1cbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5fb25DaGFuZ2V9XG4gICAgICAgICAgb25TZWxlY3Rpb25DaGFuZ2U9e3RoaXMuX29uU2VsZWN0aW9uQ2hhbmdlfVxuICAgICAgICAgIG9uU2VsZWN0aW9uQ2hhbmdlU2hvdWxkU2V0UmVzcG9uZGVyPXtlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZX1cbiAgICAgICAgICB0ZXh0PXt0aGlzLl9nZXRUZXh0KCl9XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbjtcbiAgICAgIGxldCBjaGlsZENvdW50ID0gMDtcbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sICgpID0+ICsrY2hpbGRDb3VudCk7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgICEocHJvcHMudmFsdWUgJiYgY2hpbGRDb3VudCksXG4gICAgICAgICdDYW5ub3Qgc3BlY2lmeSBib3RoIHZhbHVlIGFuZCBjaGlsZHJlbi4nLFxuICAgICAgKTtcbiAgICAgIGlmIChjaGlsZENvdW50ID49IDEpIHtcbiAgICAgICAgY2hpbGRyZW4gPSAoXG4gICAgICAgICAgPFRleHQgc3R5bGU9e3Byb3BzLnN0eWxlfSBhbGxvd0ZvbnRTY2FsaW5nPXtwcm9wcy5hbGxvd0ZvbnRTY2FsaW5nfT5cbiAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMuaW5wdXRWaWV3KSB7XG4gICAgICAgIGNoaWxkcmVuID0gW2NoaWxkcmVuLCBwcm9wcy5pbnB1dFZpZXddO1xuICAgICAgfVxuICAgICAgcHJvcHMuc3R5bGUudW5zaGlmdChzdHlsZXMubXVsdGlsaW5lSW5wdXQpO1xuICAgICAgdGV4dENvbnRhaW5lciA9IChcbiAgICAgICAgPFJDVE11bHRpbGluZVRleHRJbnB1dFZpZXdcbiAgICAgICAgICByZWY9e3RoaXMuX3NldE5hdGl2ZVJlZn1cbiAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgY2hpbGRyZW49e2NoaWxkcmVufVxuICAgICAgICAgIG9uRm9jdXM9e3RoaXMuX29uRm9jdXN9XG4gICAgICAgICAgb25CbHVyPXt0aGlzLl9vbkJsdXJ9XG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMuX29uQ2hhbmdlfVxuICAgICAgICAgIG9uQ29udGVudFNpemVDaGFuZ2U9e3RoaXMucHJvcHMub25Db250ZW50U2l6ZUNoYW5nZX1cbiAgICAgICAgICBvblNlbGVjdGlvbkNoYW5nZT17dGhpcy5fb25TZWxlY3Rpb25DaGFuZ2V9XG4gICAgICAgICAgb25UZXh0SW5wdXQ9e3RoaXMuX29uVGV4dElucHV0fVxuICAgICAgICAgIG9uU2VsZWN0aW9uQ2hhbmdlU2hvdWxkU2V0UmVzcG9uZGVyPXtlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZX1cbiAgICAgICAgICB0ZXh0PXt0aGlzLl9nZXRUZXh0KCl9XG4gICAgICAgICAgZGF0YURldGVjdG9yVHlwZXM9e3RoaXMucHJvcHMuZGF0YURldGVjdG9yVHlwZXN9XG4gICAgICAgICAgb25TY3JvbGw9e3RoaXMuX29uU2Nyb2xsfVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFRvdWNoYWJsZVdpdGhvdXRGZWVkYmFja1xuICAgICAgICBvbkxheW91dD17cHJvcHMub25MYXlvdXR9XG4gICAgICAgIG9uUHJlc3M9e3RoaXMuX29uUHJlc3N9XG4gICAgICAgIHJlamVjdFJlc3BvbmRlclRlcm1pbmF0aW9uPXt0cnVlfVxuICAgICAgICBhY2Nlc3NpYmxlPXtwcm9wcy5hY2Nlc3NpYmxlfVxuICAgICAgICBhY2Nlc3NpYmlsaXR5TGFiZWw9e3Byb3BzLmFjY2Vzc2liaWxpdHlMYWJlbH1cbiAgICAgICAgYWNjZXNzaWJpbGl0eVRyYWl0cz17cHJvcHMuYWNjZXNzaWJpbGl0eVRyYWl0c31cbiAgICAgICAgbmF0aXZlSUQ9e3RoaXMucHJvcHMubmF0aXZlSUR9XG4gICAgICAgIHRlc3RJRD17cHJvcHMudGVzdElEfT5cbiAgICAgICAge3RleHRDb250YWluZXJ9XG4gICAgICA8L1RvdWNoYWJsZVdpdGhvdXRGZWVkYmFjaz5cbiAgICApO1xuICB9LFxuXG4gIF9yZW5kZXJJT1M6IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IHByb3BzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5wcm9wcyk7XG4gICAgcHJvcHMuc3R5bGUgPSBbdGhpcy5wcm9wcy5zdHlsZV07XG5cbiAgICBpZiAocHJvcHMuc2VsZWN0aW9uICYmIHByb3BzLnNlbGVjdGlvbi5lbmQgPT0gbnVsbCkge1xuICAgICAgcHJvcHMuc2VsZWN0aW9uID0ge1xuICAgICAgICBzdGFydDogcHJvcHMuc2VsZWN0aW9uLnN0YXJ0LFxuICAgICAgICBlbmQ6IHByb3BzLnNlbGVjdGlvbi5zdGFydCxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3QgUkNUVGV4dElucHV0VmlldyA9IHByb3BzLm11bHRpbGluZVxuICAgICAgPyBSQ1RNdWx0aWxpbmVUZXh0SW5wdXRWaWV3XG4gICAgICA6IFJDVFNpbmdsZWxpbmVUZXh0SW5wdXRWaWV3O1xuXG4gICAgaWYgKHByb3BzLm11bHRpbGluZSkge1xuICAgICAgcHJvcHMuc3R5bGUudW5zaGlmdChzdHlsZXMubXVsdGlsaW5lSW5wdXQpO1xuICAgIH1cblxuICAgIGNvbnN0IHRleHRDb250YWluZXIgPSAoXG4gICAgICA8UkNUVGV4dElucHV0Vmlld1xuICAgICAgICByZWY9e3RoaXMuX3NldE5hdGl2ZVJlZn1cbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgICBvbkZvY3VzPXt0aGlzLl9vbkZvY3VzfVxuICAgICAgICBvbkJsdXI9e3RoaXMuX29uQmx1cn1cbiAgICAgICAgb25DaGFuZ2U9e3RoaXMuX29uQ2hhbmdlfVxuICAgICAgICBvbkNvbnRlbnRTaXplQ2hhbmdlPXt0aGlzLnByb3BzLm9uQ29udGVudFNpemVDaGFuZ2V9XG4gICAgICAgIG9uU2VsZWN0aW9uQ2hhbmdlPXt0aGlzLl9vblNlbGVjdGlvbkNoYW5nZX1cbiAgICAgICAgb25UZXh0SW5wdXQ9e3RoaXMuX29uVGV4dElucHV0fVxuICAgICAgICBvblNlbGVjdGlvbkNoYW5nZVNob3VsZFNldFJlc3BvbmRlcj17ZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWV9XG4gICAgICAgIHRleHQ9e3RoaXMuX2dldFRleHQoKX1cbiAgICAgICAgZGF0YURldGVjdG9yVHlwZXM9e3RoaXMucHJvcHMuZGF0YURldGVjdG9yVHlwZXN9XG4gICAgICAgIG9uU2Nyb2xsPXt0aGlzLl9vblNjcm9sbH1cbiAgICAgIC8+XG4gICAgKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8VG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrXG4gICAgICAgIG9uTGF5b3V0PXtwcm9wcy5vbkxheW91dH1cbiAgICAgICAgb25QcmVzcz17dGhpcy5fb25QcmVzc31cbiAgICAgICAgcmVqZWN0UmVzcG9uZGVyVGVybWluYXRpb249e3RydWV9XG4gICAgICAgIGFjY2Vzc2libGU9e3Byb3BzLmFjY2Vzc2libGV9XG4gICAgICAgIGFjY2Vzc2liaWxpdHlMYWJlbD17cHJvcHMuYWNjZXNzaWJpbGl0eUxhYmVsfVxuICAgICAgICBhY2Nlc3NpYmlsaXR5VHJhaXRzPXtwcm9wcy5hY2Nlc3NpYmlsaXR5VHJhaXRzfVxuICAgICAgICBuYXRpdmVJRD17dGhpcy5wcm9wcy5uYXRpdmVJRH1cbiAgICAgICAgdGVzdElEPXtwcm9wcy50ZXN0SUR9PlxuICAgICAgICB7dGV4dENvbnRhaW5lcn1cbiAgICAgIDwvVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrPlxuICAgICk7XG4gIH0sXG5cbiAgX3JlbmRlckFuZHJvaWQ6IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IHByb3BzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5wcm9wcyk7XG4gICAgcHJvcHMuc3R5bGUgPSBbdGhpcy5wcm9wcy5zdHlsZV07XG4gICAgcHJvcHMuYXV0b0NhcGl0YWxpemUgPVxuICAgICAgVUlNYW5hZ2VyLkFuZHJvaWRUZXh0SW5wdXQuQ29uc3RhbnRzLkF1dG9DYXBpdGFsaXphdGlvblR5cGVbXG4gICAgICAgIHByb3BzLmF1dG9DYXBpdGFsaXplIHx8ICdzZW50ZW5jZXMnXG4gICAgICBdO1xuICAgIC8qICRGbG93Rml4TWUoPj0wLjUzLjAgc2l0ZT1yZWFjdF9uYXRpdmVfZmIscmVhY3RfbmF0aXZlX29zcykgVGhpcyBjb21tZW50XG4gICAgICogc3VwcHJlc3NlcyBhbiBlcnJvciB3aGVuIHVwZ3JhZGluZyBGbG93J3Mgc3VwcG9ydCBmb3IgUmVhY3QuIFRvIHNlZSB0aGVcbiAgICAgKiBlcnJvciBkZWxldGUgdGhpcyBjb21tZW50IGFuZCBydW4gRmxvdy4gKi9cbiAgICBsZXQgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIGxldCBjaGlsZENvdW50ID0gMDtcbiAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCAoKSA9PiArK2NoaWxkQ291bnQpO1xuICAgIGludmFyaWFudChcbiAgICAgICEodGhpcy5wcm9wcy52YWx1ZSAmJiBjaGlsZENvdW50KSxcbiAgICAgICdDYW5ub3Qgc3BlY2lmeSBib3RoIHZhbHVlIGFuZCBjaGlsZHJlbi4nLFxuICAgICk7XG4gICAgaWYgKGNoaWxkQ291bnQgPiAxKSB7XG4gICAgICBjaGlsZHJlbiA9IDxUZXh0PntjaGlsZHJlbn08L1RleHQ+O1xuICAgIH1cblxuICAgIGlmIChwcm9wcy5zZWxlY3Rpb24gJiYgcHJvcHMuc2VsZWN0aW9uLmVuZCA9PSBudWxsKSB7XG4gICAgICBwcm9wcy5zZWxlY3Rpb24gPSB7XG4gICAgICAgIHN0YXJ0OiBwcm9wcy5zZWxlY3Rpb24uc3RhcnQsXG4gICAgICAgIGVuZDogcHJvcHMuc2VsZWN0aW9uLnN0YXJ0LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCB0ZXh0Q29udGFpbmVyID0gKFxuICAgICAgPEFuZHJvaWRUZXh0SW5wdXRcbiAgICAgICAgcmVmPXt0aGlzLl9zZXROYXRpdmVSZWZ9XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgbW9zdFJlY2VudEV2ZW50Q291bnQ9ezB9XG4gICAgICAgIG9uRm9jdXM9e3RoaXMuX29uRm9jdXN9XG4gICAgICAgIG9uQmx1cj17dGhpcy5fb25CbHVyfVxuICAgICAgICBvbkNoYW5nZT17dGhpcy5fb25DaGFuZ2V9XG4gICAgICAgIG9uU2VsZWN0aW9uQ2hhbmdlPXt0aGlzLl9vblNlbGVjdGlvbkNoYW5nZX1cbiAgICAgICAgb25UZXh0SW5wdXQ9e3RoaXMuX29uVGV4dElucHV0fVxuICAgICAgICB0ZXh0PXt0aGlzLl9nZXRUZXh0KCl9XG4gICAgICAgIGNoaWxkcmVuPXtjaGlsZHJlbn1cbiAgICAgICAgZGlzYWJsZUZ1bGxzY3JlZW5VST17dGhpcy5wcm9wcy5kaXNhYmxlRnVsbHNjcmVlblVJfVxuICAgICAgICB0ZXh0QnJlYWtTdHJhdGVneT17dGhpcy5wcm9wcy50ZXh0QnJlYWtTdHJhdGVneX1cbiAgICAgICAgb25TY3JvbGw9e3RoaXMuX29uU2Nyb2xsfVxuICAgICAgLz5cbiAgICApO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxUb3VjaGFibGVXaXRob3V0RmVlZGJhY2tcbiAgICAgICAgb25MYXlvdXQ9e3Byb3BzLm9uTGF5b3V0fVxuICAgICAgICBvblByZXNzPXt0aGlzLl9vblByZXNzfVxuICAgICAgICBhY2Nlc3NpYmxlPXt0aGlzLnByb3BzLmFjY2Vzc2libGV9XG4gICAgICAgIGFjY2Vzc2liaWxpdHlMYWJlbD17dGhpcy5wcm9wcy5hY2Nlc3NpYmlsaXR5TGFiZWx9XG4gICAgICAgIGFjY2Vzc2liaWxpdHlDb21wb25lbnRUeXBlPXt0aGlzLnByb3BzLmFjY2Vzc2liaWxpdHlDb21wb25lbnRUeXBlfVxuICAgICAgICBuYXRpdmVJRD17dGhpcy5wcm9wcy5uYXRpdmVJRH1cbiAgICAgICAgdGVzdElEPXt0aGlzLnByb3BzLnRlc3RJRH0+XG4gICAgICAgIHt0ZXh0Q29udGFpbmVyfVxuICAgICAgPC9Ub3VjaGFibGVXaXRob3V0RmVlZGJhY2s+XG4gICAgKTtcbiAgfSxcblxuICBfb25Gb2N1czogZnVuY3Rpb24oZXZlbnQ6IEV2ZW50KSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Gb2N1cykge1xuICAgICAgdGhpcy5wcm9wcy5vbkZvY3VzKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5zZWxlY3Rpb25TdGF0ZSkge1xuICAgICAgdGhpcy5wcm9wcy5zZWxlY3Rpb25TdGF0ZS5mb2N1cygpO1xuICAgIH1cbiAgfSxcblxuICBfb25QcmVzczogZnVuY3Rpb24oZXZlbnQ6IEV2ZW50KSB7XG4gICAgaWYgKHRoaXMucHJvcHMuZWRpdGFibGUgfHwgdGhpcy5wcm9wcy5lZGl0YWJsZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmZvY3VzKCk7XG4gICAgfVxuICB9LFxuXG4gIF9vbkNoYW5nZTogZnVuY3Rpb24oZXZlbnQ6IEV2ZW50KSB7XG4gICAgLy8gTWFrZSBzdXJlIHRvIGZpcmUgdGhlIG1vc3RSZWNlbnRFdmVudENvdW50IGZpcnN0IHNvIGl0IGlzIGFscmVhZHkgc2V0IG9uXG4gICAgLy8gbmF0aXZlIHdoZW4gdGhlIHRleHQgdmFsdWUgaXMgc2V0LlxuICAgIGlmICh0aGlzLl9pbnB1dFJlZikge1xuICAgICAgdGhpcy5faW5wdXRSZWYuc2V0TmF0aXZlUHJvcHMoe1xuICAgICAgICBtb3N0UmVjZW50RXZlbnRDb3VudDogZXZlbnQubmF0aXZlRXZlbnQuZXZlbnRDb3VudCxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHRleHQgPSBldmVudC5uYXRpdmVFdmVudC50ZXh0O1xuICAgIHRoaXMucHJvcHMub25DaGFuZ2UgJiYgdGhpcy5wcm9wcy5vbkNoYW5nZShldmVudCk7XG4gICAgdGhpcy5wcm9wcy5vbkNoYW5nZVRleHQgJiYgdGhpcy5wcm9wcy5vbkNoYW5nZVRleHQodGV4dCk7XG5cbiAgICBpZiAoIXRoaXMuX2lucHV0UmVmKSB7XG4gICAgICAvLyBjYWxsaW5nIGB0aGlzLnByb3BzLm9uQ2hhbmdlYCBvciBgdGhpcy5wcm9wcy5vbkNoYW5nZVRleHRgXG4gICAgICAvLyBtYXkgY2xlYW4gdXAgdGhlIGlucHV0IGl0c2VsZi4gRXhpdHMgaGVyZS5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9sYXN0TmF0aXZlVGV4dCA9IHRleHQ7XG4gICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICB9LFxuXG4gIF9vblNlbGVjdGlvbkNoYW5nZTogZnVuY3Rpb24oZXZlbnQ6IEV2ZW50KSB7XG4gICAgdGhpcy5wcm9wcy5vblNlbGVjdGlvbkNoYW5nZSAmJiB0aGlzLnByb3BzLm9uU2VsZWN0aW9uQ2hhbmdlKGV2ZW50KTtcblxuICAgIGlmICghdGhpcy5faW5wdXRSZWYpIHtcbiAgICAgIC8vIGNhbGxpbmcgYHRoaXMucHJvcHMub25TZWxlY3Rpb25DaGFuZ2VgXG4gICAgICAvLyBtYXkgY2xlYW4gdXAgdGhlIGlucHV0IGl0c2VsZi4gRXhpdHMgaGVyZS5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9sYXN0TmF0aXZlU2VsZWN0aW9uID0gZXZlbnQubmF0aXZlRXZlbnQuc2VsZWN0aW9uO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuc2VsZWN0aW9uIHx8IHRoaXMucHJvcHMuc2VsZWN0aW9uU3RhdGUpIHtcbiAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICB9XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbigpIHtcbiAgICAvLyBUaGlzIGlzIG5lY2Vzc2FyeSBpbiBjYXNlIG5hdGl2ZSB1cGRhdGVzIHRoZSB0ZXh0IGFuZCBKUyBkZWNpZGVzXG4gICAgLy8gdGhhdCB0aGUgdXBkYXRlIHNob3VsZCBiZSBpZ25vcmVkIGFuZCB3ZSBzaG91bGQgc3RpY2sgd2l0aCB0aGUgdmFsdWVcbiAgICAvLyB0aGF0IHdlIGhhdmUgaW4gSlMuXG4gICAgY29uc3QgbmF0aXZlUHJvcHMgPSB7fTtcblxuICAgIGlmIChcbiAgICAgIHRoaXMuX2xhc3ROYXRpdmVUZXh0ICE9PSB0aGlzLnByb3BzLnZhbHVlICYmXG4gICAgICB0eXBlb2YgdGhpcy5wcm9wcy52YWx1ZSA9PT0gJ3N0cmluZydcbiAgICApIHtcbiAgICAgIG5hdGl2ZVByb3BzLnRleHQgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgIH1cblxuICAgIC8vIFNlbGVjdGlvbiBpcyBhbHNvIGEgY29udHJvbGxlZCBwcm9wLCBpZiB0aGUgbmF0aXZlIHZhbHVlIGRvZXNuJ3QgbWF0Y2hcbiAgICAvLyBKUywgdXBkYXRlIHRvIHRoZSBKUyB2YWx1ZS5cbiAgICBjb25zdCB7c2VsZWN0aW9ufSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKFxuICAgICAgdGhpcy5fbGFzdE5hdGl2ZVNlbGVjdGlvbiAmJlxuICAgICAgc2VsZWN0aW9uICYmXG4gICAgICAodGhpcy5fbGFzdE5hdGl2ZVNlbGVjdGlvbi5zdGFydCAhPT0gc2VsZWN0aW9uLnN0YXJ0IHx8XG4gICAgICAgIHRoaXMuX2xhc3ROYXRpdmVTZWxlY3Rpb24uZW5kICE9PSBzZWxlY3Rpb24uZW5kKVxuICAgICkge1xuICAgICAgbmF0aXZlUHJvcHMuc2VsZWN0aW9uID0gdGhpcy5wcm9wcy5zZWxlY3Rpb247XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5rZXlzKG5hdGl2ZVByb3BzKS5sZW5ndGggPiAwICYmIHRoaXMuX2lucHV0UmVmKSB7XG4gICAgICB0aGlzLl9pbnB1dFJlZi5zZXROYXRpdmVQcm9wcyhuYXRpdmVQcm9wcyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuc2VsZWN0aW9uU3RhdGUgJiYgc2VsZWN0aW9uKSB7XG4gICAgICB0aGlzLnByb3BzLnNlbGVjdGlvblN0YXRlLnVwZGF0ZShzZWxlY3Rpb24uc3RhcnQsIHNlbGVjdGlvbi5lbmQpO1xuICAgIH1cbiAgfSxcblxuICBfb25CbHVyOiBmdW5jdGlvbihldmVudDogRXZlbnQpIHtcbiAgICB0aGlzLmJsdXIoKTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkJsdXIpIHtcbiAgICAgIHRoaXMucHJvcHMub25CbHVyKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5zZWxlY3Rpb25TdGF0ZSkge1xuICAgICAgdGhpcy5wcm9wcy5zZWxlY3Rpb25TdGF0ZS5ibHVyKCk7XG4gICAgfVxuICB9LFxuXG4gIF9vblRleHRJbnB1dDogZnVuY3Rpb24oZXZlbnQ6IEV2ZW50KSB7XG4gICAgdGhpcy5wcm9wcy5vblRleHRJbnB1dCAmJiB0aGlzLnByb3BzLm9uVGV4dElucHV0KGV2ZW50KTtcbiAgfSxcblxuICBfb25TY3JvbGw6IGZ1bmN0aW9uKGV2ZW50OiBFdmVudCkge1xuICAgIHRoaXMucHJvcHMub25TY3JvbGwgJiYgdGhpcy5wcm9wcy5vblNjcm9sbChldmVudCk7XG4gIH0sXG59KTtcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBtdWx0aWxpbmVJbnB1dDoge1xuICAgIC8vIFRoaXMgZGVmYXVsdCB0b3AgaW5zZXQgbWFrZXMgUkNUTXVsdGlsaW5lVGV4dElucHV0VmlldyBzZWVtIGFzIGNsb3NlIGFzIHBvc3NpYmxlXG4gICAgLy8gdG8gc2luZ2xlLWxpbmUgUkNUU2luZ2xlbGluZVRleHRJbnB1dFZpZXcgZGVmYXVsdHMsIHVzaW5nIHRoZSBzeXN0ZW0gZGVmYXVsdHNcbiAgICAvLyBvZiBmb250IHNpemUgMTcgYW5kIGEgaGVpZ2h0IG9mIDMxIHBvaW50cy5cbiAgICBwYWRkaW5nVG9wOiA1LFxuICB9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVGV4dElucHV0O1xuIl19