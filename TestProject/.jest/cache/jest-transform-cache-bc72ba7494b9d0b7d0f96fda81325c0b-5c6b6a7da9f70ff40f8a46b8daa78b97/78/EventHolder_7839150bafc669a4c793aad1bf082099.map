{"version":3,"sources":["EventHolder.js"],"names":["invariant","require","EventHolder","_heldEvents","_currentEventKey","eventType","eventsOfType","key","index","length","args","push","listener","context","origEventKey","forEach","eventHeld","apply","releaseEvent","token","type","module","exports"],"mappings":"AASA,a,+oBAEA,GAAMA,WAAYC,OAAZ,sBAAN,C,GAEMC,Y,YAKJ,sBAAc,mCACZ,KAAKC,WAAL,CAAmB,EAAnB,CACA,KAAKC,gBAAL,CAAwB,IAAxB,CACD,C,oEAuBSC,S,CAAiC,CACzC,KAAKF,WAAL,CAAiBE,SAAjB,EAA8B,KAAKF,WAAL,CAAiBE,SAAjB,GAA+B,EAA7D,CACA,GAAMC,cAAe,KAAKH,WAAL,CAAiBE,SAAjB,CAArB,CACA,GAAME,KAAM,CACVF,UAAWA,SADD,CAEVG,MAAOF,aAAaG,MAFV,CAAZ,CAHyC,8BAAXC,IAAW,iDAAXA,IAAW,0BAOzCJ,aAAaK,IAAb,CAAkBD,IAAlB,EACA,MAAOH,IAAP,CACD,C,sDAUcF,S,CAAqBO,Q,CAAoBC,O,CAAkB,gBACxE,GAAMP,cAAe,KAAKH,WAAL,CAAiBE,SAAjB,CAArB,CACA,GAAI,CAACC,YAAL,CAAmB,CACjB,OACD,CACD,GAAMQ,cAAe,KAAKV,gBAA1B,CACAE,aAAaS,OAAb,CAAqB,SAAYC,SAAZ,CAAkCR,KAAlC,CAA4C,CAC/D,GAAI,CAACQ,SAAL,CAAgB,CACd,OACD,CACD,MAAKZ,gBAAL,CAAwB,CACtBC,UAAWA,SADW,CAEtBG,MAAOA,KAFe,CAAxB,CAIAI,SAASK,KAAT,CAAeJ,OAAf,CAAwBG,SAAxB,EACD,CATD,EAUA,KAAKZ,gBAAL,CAAwBU,YAAxB,CACD,C,iEAUqB,CACpBd,UACE,KAAKI,gBAAL,GAA0B,IAD5B,CAEE,qDAFF,EAIA,KAAKA,gBAAL,EAAyB,KAAKc,YAAL,CAAkB,KAAKd,gBAAvB,CAAzB,CACD,C,kDAQYe,K,CAAe,CAC1B,MAAO,MAAKhB,WAAL,CAAiBgB,MAAMd,SAAvB,EAAkCc,MAAMX,KAAxC,CAAP,CACD,C,0DAOgBY,I,CAAc,CAC7B,KAAKjB,WAAL,CAAiBiB,IAAjB,EAAyB,EAAzB,CACD,C,2BAGHC,OAAOC,OAAP,CAAiBpB,WAAjB","file":"EventHolder.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule EventHolder\n * @flow\n */\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\nclass EventHolder {\n\n  _heldEvents: Object;\n  _currentEventKey: ?Object;\n\n  constructor() {\n    this._heldEvents = {};\n    this._currentEventKey = null;\n  }\n\n  /**\n   * Holds a given event for processing later.\n   *\n   * TODO: Annotate return type better. The structural type of the return here\n   *       is pretty obvious.\n   *\n   * @param {string} eventType - Name of the event to hold and later emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   * @return {object} Token that can be used to release the held event\n   *\n   * @example\n   *\n   *   holder.holdEvent({someEvent: 'abc'});\n   *\n   *   holder.emitToHandler({\n   *     someEvent: function(data, event) {\n   *       console.log(data);\n   *     }\n   *   }); //logs 'abc'\n   *\n   */\n  holdEvent(eventType: string, ...args: any) {\n    this._heldEvents[eventType] = this._heldEvents[eventType] || [];\n    const eventsOfType = this._heldEvents[eventType];\n    const key = {\n      eventType: eventType,\n      index: eventsOfType.length\n    };\n    eventsOfType.push(args);\n    return key;\n  }\n\n  /**\n   * Emits the held events of the specified type to the given listener.\n   *\n   * @param {?string} eventType - Optional name of the events to replay\n   * @param {function} listener - The listener to which to dispatch the event\n   * @param {?object} context - Optional context object to use when invoking\n   *   the listener\n   */\n  emitToListener(eventType: ?string , listener: Function, context: ?Object) {\n    const eventsOfType = this._heldEvents[eventType];\n    if (!eventsOfType) {\n      return;\n    }\n    const origEventKey = this._currentEventKey;\n    eventsOfType.forEach((/*?array*/ eventHeld, /*number*/ index) => {\n      if (!eventHeld) {\n        return;\n      }\n      this._currentEventKey = {\n        eventType: eventType,\n        index: index\n      };\n      listener.apply(context, eventHeld);\n    });\n    this._currentEventKey = origEventKey;\n  }\n\n  /**\n   * Provides an API that can be called during an eventing cycle to release\n   * the last event that was invoked, so that it is no longer \"held\".\n   *\n   * If it is called when not inside of an emitting cycle it will throw.\n   *\n   * @throws {Error} When called not during an eventing cycle\n   */\n  releaseCurrentEvent() {\n    invariant(\n      this._currentEventKey !== null,\n      'Not in an emitting cycle; there is no current event'\n    );\n    this._currentEventKey && this.releaseEvent(this._currentEventKey);\n  }\n\n  /**\n   * Releases the event corresponding to the handle that was returned when the\n   * event was first held.\n   *\n   * @param {object} token - The token returned from holdEvent\n   */\n  releaseEvent(token: Object) {\n    delete this._heldEvents[token.eventType][token.index];\n  }\n\n  /**\n   * Releases all events of a certain type.\n   *\n   * @param {string} type\n   */\n  releaseEventType(type: string) {\n    this._heldEvents[type] = [];\n  }\n}\n\nmodule.exports = EventHolder;\n"]}