{"version":3,"sources":["Systrace.js"],"names":["invariant","require","TRACE_TAG_REACT_APPS","TRACE_TAG_JS_VM_CALLS","_enabled","_asyncCookie","_markStack","_markStackIndex","_canInstallReactHook","REACT_MARKER","userTimingPolyfill","__DEV__","mark","markName","systraceLabel","indexOfId","lastIndexOf","cutoffIndex","length","slice","Systrace","beginEvent","measure","measureName","startMark","endMark","topMark","endEvent","clearMarks","clearMeasures","installReactHook","global","performance","setEnabled","enabled","nativeTraceBeginLegacy","nativeTraceEndLegacy","undefined","isEnabled","profileName","args","nativeTraceBeginSection","nativeTraceEndSection","beginAsyncEvent","cookie","nativeTraceBeginAsyncSection","endAsyncEvent","nativeTraceEndAsyncSection","counterEvent","value","nativeTraceCounter","module","exports"],"mappings":"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","file":"Systrace.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule Systrace\n * @flow\n * @format\n */\n\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\nconst TRACE_TAG_REACT_APPS = 1 << 17; // eslint-disable-line no-bitwise\nconst TRACE_TAG_JS_VM_CALLS = 1 << 27; // eslint-disable-line no-bitwise\n\nlet _enabled = false;\nlet _asyncCookie = 0;\nconst _markStack = [];\nlet _markStackIndex = -1;\nlet _canInstallReactHook = false;\n\n// Implements a subset of User Timing API necessary for React measurements.\n// https://developer.mozilla.org/en-US/docs/Web/API/User_Timing_API\nconst REACT_MARKER = '\\u269B';\nconst userTimingPolyfill = __DEV__\n  ? {\n      mark(markName: string) {\n        if (_enabled) {\n          _markStackIndex++;\n          _markStack[_markStackIndex] = markName;\n          let systraceLabel = markName;\n          // Since perf measurements are a shared namespace in User Timing API,\n          // we prefix all React results with a React emoji.\n          if (markName[0] === REACT_MARKER) {\n            // This is coming from React.\n            // Removing component IDs keeps trace colors stable.\n            const indexOfId = markName.lastIndexOf(' (#');\n            const cutoffIndex = indexOfId !== -1 ? indexOfId : markName.length;\n            // Also cut off the emoji because it breaks Systrace\n            systraceLabel = markName.slice(2, cutoffIndex);\n          }\n          Systrace.beginEvent(systraceLabel);\n        }\n      },\n      measure(measureName: string, startMark: ?string, endMark: ?string) {\n        if (_enabled) {\n          invariant(\n            typeof measureName === 'string' &&\n              typeof startMark === 'string' &&\n              typeof endMark === 'undefined',\n            'Only performance.measure(string, string) overload is supported.',\n          );\n          const topMark = _markStack[_markStackIndex];\n          invariant(\n            startMark === topMark,\n            'There was a mismatching performance.measure() call. ' +\n              'Expected \"%s\" but got \"%s.\"',\n            topMark,\n            startMark,\n          );\n          _markStackIndex--;\n          // We can't use more descriptive measureName because Systrace doesn't\n          // let us edit labels post factum.\n          Systrace.endEvent();\n        }\n      },\n      clearMarks(markName: string) {\n        if (_enabled) {\n          if (_markStackIndex === -1) {\n            return;\n          }\n          if (markName === _markStack[_markStackIndex]) {\n            // React uses this for \"cancelling\" started measurements.\n            // Systrace doesn't support deleting measurements, so we just stop them.\n            if (userTimingPolyfill != null) {\n              userTimingPolyfill.measure(markName, markName);\n            }\n          }\n        }\n      },\n      clearMeasures() {\n        // React calls this to avoid memory leaks in browsers, but we don't keep\n        // measurements anyway.\n      },\n    }\n  : null;\n\nconst Systrace = {\n  installReactHook() {\n    if (_enabled) {\n      if (__DEV__) {\n        global.performance = userTimingPolyfill;\n      }\n    }\n    _canInstallReactHook = true;\n  },\n\n  setEnabled(enabled: boolean) {\n    if (_enabled !== enabled) {\n      if (__DEV__) {\n        if (enabled) {\n          global.nativeTraceBeginLegacy &&\n            global.nativeTraceBeginLegacy(TRACE_TAG_JS_VM_CALLS);\n        } else {\n          global.nativeTraceEndLegacy &&\n            global.nativeTraceEndLegacy(TRACE_TAG_JS_VM_CALLS);\n        }\n        if (_canInstallReactHook) {\n          if (enabled && global.performance === undefined) {\n            global.performance = userTimingPolyfill;\n          }\n        }\n      }\n      _enabled = enabled;\n    }\n  },\n\n  isEnabled(): boolean {\n    return _enabled;\n  },\n\n  /**\n   * beginEvent/endEvent for starting and then ending a profile within the same call stack frame\n   **/\n  beginEvent(profileName?: any, args?: any) {\n    if (_enabled) {\n      profileName =\n        typeof profileName === 'function' ? profileName() : profileName;\n      global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, profileName, args);\n    }\n  },\n\n  endEvent() {\n    if (_enabled) {\n      global.nativeTraceEndSection(TRACE_TAG_REACT_APPS);\n    }\n  },\n\n  /**\n   * beginAsyncEvent/endAsyncEvent for starting and then ending a profile where the end can either\n   * occur on another thread or out of the current stack frame, eg await\n   * the returned cookie variable should be used as input into the endAsyncEvent call to end the profile\n   **/\n  beginAsyncEvent(profileName?: any): any {\n    const cookie = _asyncCookie;\n    if (_enabled) {\n      _asyncCookie++;\n      profileName =\n        typeof profileName === 'function' ? profileName() : profileName;\n      global.nativeTraceBeginAsyncSection(\n        TRACE_TAG_REACT_APPS,\n        profileName,\n        cookie,\n      );\n    }\n    return cookie;\n  },\n\n  endAsyncEvent(profileName?: any, cookie?: any) {\n    if (_enabled) {\n      profileName =\n        typeof profileName === 'function' ? profileName() : profileName;\n      global.nativeTraceEndAsyncSection(\n        TRACE_TAG_REACT_APPS,\n        profileName,\n        cookie,\n      );\n    }\n  },\n\n  /**\n   * counterEvent registers the value to the profileName on the systrace timeline\n   **/\n  counterEvent(profileName?: any, value?: any) {\n    if (_enabled) {\n      profileName =\n        typeof profileName === 'function' ? profileName() : profileName;\n      global.nativeTraceCounter &&\n        global.nativeTraceCounter(TRACE_TAG_REACT_APPS, profileName, value);\n    }\n  },\n};\n\nif (__DEV__) {\n  // This is needed, because require callis in polyfills are not processed as\n  // other files. Therefore, calls to `require('moduleId')` are not replaced\n  // with numeric IDs\n  // TODO(davidaurelio) Scan polyfills for dependencies, too (t9759686)\n  (require: any).Systrace = Systrace;\n}\n\nmodule.exports = Systrace;\n"]}