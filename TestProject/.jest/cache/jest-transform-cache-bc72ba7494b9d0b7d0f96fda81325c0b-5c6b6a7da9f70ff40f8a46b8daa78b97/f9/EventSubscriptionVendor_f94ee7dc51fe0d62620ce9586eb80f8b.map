{"version":3,"sources":["EventSubscriptionVendor.js"],"names":["invariant","require","EventSubscriptionVendor","_subscriptionsForType","_currentSubscription","eventType","subscription","subscriber","key","length","push","undefined","subscriptionsForType","module","exports"],"mappings":"AASA,a,+oBAEA,GAAMA,WAAYC,OAAZ,sBAAN,C,GAQMC,wB,YAKJ,kCAAc,+CACZ,KAAKC,qBAAL,CAA6B,EAA7B,CACA,KAAKC,oBAAL,CAA4B,IAA5B,CACD,C,4FASCC,S,CAAmBC,Y,CAAoD,CACvEN,UACEM,aAAaC,UAAb,GAA4B,IAD9B,CAEE,wDAFF,EAGA,GAAI,CAAC,KAAKJ,qBAAL,CAA2BE,SAA3B,CAAL,CAA4C,CAC1C,KAAKF,qBAAL,CAA2BE,SAA3B,EAAwC,EAAxC,CACD,CACD,GAAMG,KAAM,KAAKL,qBAAL,CAA2BE,SAA3B,EAAsCI,MAAlD,CACA,KAAKN,qBAAL,CAA2BE,SAA3B,EAAsCK,IAAtC,CAA2CJ,YAA3C,EACAA,aAAaD,SAAb,CAAyBA,SAAzB,CACAC,aAAaE,GAAb,CAAmBA,GAAnB,CACA,MAAOF,aAAP,CACD,C,sEAQsBD,S,CAAoB,CACzC,GAAIA,YAAcM,SAAlB,CAA6B,CAC3B,KAAKR,qBAAL,CAA6B,EAA7B,CACD,CAFD,IAEO,CACL,MAAO,MAAKA,qBAAL,CAA2BE,SAA3B,CAAP,CACD,CACF,C,8DAQkBC,Y,CAAsB,CACvC,GAAMD,WAAYC,aAAaD,SAA/B,CACA,GAAMG,KAAMF,aAAaE,GAAzB,CAEA,GAAMI,sBAAuB,KAAKT,qBAAL,CAA2BE,SAA3B,CAA7B,CACA,GAAIO,oBAAJ,CAA0B,CACxB,MAAOA,sBAAqBJ,GAArB,CAAP,CACD,CACF,C,wEAcuBH,S,CAAyC,CAChE,MAAO,MAAKF,qBAAL,CAA2BE,SAA3B,CAAP,CACA,C,uCAGHQ,OAAOC,OAAP,CAAiBZ,uBAAjB","file":"EventSubscriptionVendor.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule EventSubscriptionVendor\n * @flow\n */\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\nimport type EventSubscription from 'EventSubscription';\n\n/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\n * subscribed to a particular event type.\n */\nclass EventSubscriptionVendor {\n\n  _subscriptionsForType: Object;\n  _currentSubscription: ?EventSubscription;\n\n  constructor() {\n    this._subscriptionsForType = {};\n    this._currentSubscription = null;\n  }\n\n  /**\n   * Adds a subscription keyed by an event type.\n   *\n   * @param {string} eventType\n   * @param {EventSubscription} subscription\n   */\n  addSubscription(\n    eventType: string, subscription: EventSubscription): EventSubscription {\n    invariant(\n      subscription.subscriber === this,\n      'The subscriber of the subscription is incorrectly set.');\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n    const key = this._subscriptionsForType[eventType].length;\n    this._subscriptionsForType[eventType].push(subscription);\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  }\n\n  /**\n   * Removes a bulk set of the subscriptions.\n   *\n   * @param {?string} eventType - Optional name of the event type whose\n   *   registered supscriptions to remove, if null remove all subscriptions.\n   */\n  removeAllSubscriptions(eventType: ?string) {\n    if (eventType === undefined) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  }\n\n  /**\n   * Removes a specific subscription. Instead of calling this function, call\n   * `subscription.remove()` directly.\n   *\n   * @param {object} subscription\n   */\n  removeSubscription(subscription: Object) {\n    const eventType = subscription.eventType;\n    const key = subscription.key;\n\n    const subscriptionsForType = this._subscriptionsForType[eventType];\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  }\n\n  /**\n   * Returns the array of subscriptions that are currently registered for the\n   * given event type.\n   *\n   * Note: This array can be potentially sparse as subscriptions are deleted\n   * from it when they are removed.\n   *\n   * TODO: This returns a nullable array. wat?\n   *\n   * @param {string} eventType\n   * @returns {?array}\n   */\n  getSubscriptionsForType(eventType: string): ?[EventSubscription] {\n   return this._subscriptionsForType[eventType];\n  }\n}\n\nmodule.exports = EventSubscriptionVendor;\n"]}