{"version":3,"sources":["View.js"],"names":["Platform","require","React","ReactNative","ReactNativeStyleAttributes","ReactNativeViewAttributes","ViewPropTypes","ViewContextTypes","invariant","requireNativeComponent","View","viewConfig","uiViewClassName","validAttributes","RCTView","isInAParentText","context","OS","props","NativeComponent","propTypes","childContextTypes","nativeOnly","nativeBackgroundAndroid","nativeForegroundAndroid","__DEV__","UIManager","viewConfigs","prop","nativeProps","viewAny","Error","ViewToExport","module","exports"],"mappings":"AAUA,a,8zCAEA,GAAMA,UAAWC,OAAX,YAAN,CACA,GAAMC,OAAQD,OAAR,SAAN,CACA,GAAME,aAAcF,OAAd,eAAN,CACA,GAAMG,4BAA6BH,OAA7B,8BAAN,CACA,GAAMI,2BAA4BJ,OAA5B,6BAAN,CACA,GAAMK,eAAgBL,OAAhB,iBAAN,C,aAC2BA,O,gBAApBM,gB,UAAAA,gB,CACP,GAAMC,WAAYP,OAAZ,sBAAN,CACA,GAAMQ,wBAAyBR,OAAzB,0BAAN,C,GAcMS,K,maAIJC,U,CAAa,CACXC,gBAAiB,SADN,CAEXC,gBAAiBR,0BAA0BS,OAFhC,C,0HAKuB,CAClC,MAAO,CACLC,gBAAiB,KADZ,CAAP,CAGD,C,uCAEQ,CACPP,UACE,EAAE,KAAKQ,OAAL,CAAaD,eAAb,EAAgCf,SAASiB,EAAT,GAAgB,SAAlD,CADF,CAEE,8DAFF,EASA,MAAO,qBAAC,OAAD,CAAa,KAAKC,KAAlB,CAAP,CACD,C,kBA1BgBf,YAAYgB,e,SACtBC,S,CAAYd,a,QACZe,iB,CAAoBd,gB,SA2B7B,GAAMO,SAAUL,uBAAuB,SAAvB,CAAkCC,IAAlC,CAAwC,CACtDY,WAAY,CACVC,wBAAyB,IADf,CAEVC,wBAAyB,IAFf,CAD0C,CAAxC,CAAhB,CAOA,GAAIC,OAAJ,CAAa,CACX,GAAMC,WAAYzB,OAAZ,aAAN,CACA,GAAMU,YACHe,UAAUC,WAAV,EAAyBD,UAAUC,WAAV,CAAsBb,OAAhD,EAA4D,EAD9D,CAEA,IAAK,GAAMc,KAAX,GAAmBjB,YAAWkB,WAA9B,CAA2C,CACzC,GAAMC,SAAepB,IAArB,CACA,GAAI,CAACoB,QAAQV,SAAR,CAAkBQ,IAAlB,CAAD,EAA4B,CAACxB,2BAA2BwB,IAA3B,CAAjC,CAAmE,CACjE,KAAM,IAAIG,MAAJ,CACJ,6CAA+CH,IAA/C,CAAsD,GADlD,CAAN,CAGD,CACF,CACF,CAED,GAAII,cAAelB,OAAnB,CACA,GAAIW,OAAJ,CAAa,CACXO,aAAetB,IAAf,CACD,CAGDuB,OAAOC,OAAP,CAAmBF,YAAnB","file":"View.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule View\n * @flow\n * @format\n */\n'use strict';\n\nconst Platform = require('Platform');\nconst React = require('React');\nconst ReactNative = require('ReactNative');\nconst ReactNativeStyleAttributes = require('ReactNativeStyleAttributes');\nconst ReactNativeViewAttributes = require('ReactNativeViewAttributes');\nconst ViewPropTypes = require('ViewPropTypes');\nconst {ViewContextTypes} = require('ViewContext');\nconst invariant = require('fbjs/lib/invariant');\nconst requireNativeComponent = require('requireNativeComponent');\n\nimport type {ViewProps} from 'ViewPropTypes';\nimport type {ViewChildContext} from 'ViewContext';\n\nexport type Props = ViewProps;\n\n/**\n * The most fundamental component for building a UI, View is a container that\n * supports layout with flexbox, style, some touch handling, and accessibility\n * controls.\n *\n * @see http://facebook.github.io/react-native/docs/view.html\n */\nclass View extends ReactNative.NativeComponent<Props> {\n  static propTypes = ViewPropTypes;\n  static childContextTypes = ViewContextTypes;\n\n  viewConfig = {\n    uiViewClassName: 'RCTView',\n    validAttributes: ReactNativeViewAttributes.RCTView,\n  };\n\n  getChildContext(): ViewChildContext {\n    return {\n      isInAParentText: false,\n    };\n  }\n\n  render() {\n    invariant(\n      !(this.context.isInAParentText && Platform.OS === 'android'),\n      'Nesting of <View> within <Text> is not supported on Android.',\n    );\n\n    // WARNING: This method will not be used in production mode as in that mode we\n    // replace wrapper component View with generated native wrapper RCTView. Avoid\n    // adding functionality this component that you'd want to be available in both\n    // dev and prod modes.\n    return <RCTView {...this.props} />;\n  }\n}\n\nconst RCTView = requireNativeComponent('RCTView', View, {\n  nativeOnly: {\n    nativeBackgroundAndroid: true,\n    nativeForegroundAndroid: true,\n  },\n});\n\nif (__DEV__) {\n  const UIManager = require('UIManager');\n  const viewConfig =\n    (UIManager.viewConfigs && UIManager.viewConfigs.RCTView) || {};\n  for (const prop in viewConfig.nativeProps) {\n    const viewAny: any = View; // Appease flow\n    if (!viewAny.propTypes[prop] && !ReactNativeStyleAttributes[prop]) {\n      throw new Error(\n        'View is missing propType for native prop `' + prop + '`',\n      );\n    }\n  }\n}\n\nlet ViewToExport = RCTView;\nif (__DEV__) {\n  ViewToExport = View;\n}\n\n// No one should depend on the DEV-mode createClass View wrapper.\nmodule.exports = ((ViewToExport: any): typeof View);\n"]}