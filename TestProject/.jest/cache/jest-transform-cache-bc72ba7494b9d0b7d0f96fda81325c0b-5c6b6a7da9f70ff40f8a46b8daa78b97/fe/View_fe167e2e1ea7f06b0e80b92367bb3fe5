8d4c5317f4d8784ac9c176824320ebb7
'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _class,_temp2;function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Platform=require('Platform');var React=require('React');var ReactNative=require('ReactNative');var ReactNativeStyleAttributes=require('ReactNativeStyleAttributes');var ReactNativeViewAttributes=require('ReactNativeViewAttributes');var ViewPropTypes=require('ViewPropTypes');var _require=require('ViewContext'),ViewContextTypes=_require.ViewContextTypes;var invariant=require('fbjs/lib/invariant');var requireNativeComponent=require('requireNativeComponent');var View=(_temp2=_class=function(_ReactNative$NativeCo){_inherits(View,_ReactNative$NativeCo);function View(){var _ref;var _temp,_this,_ret;_classCallCheck(this,View);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=_possibleConstructorReturn(this,(_ref=View.__proto__||Object.getPrototypeOf(View)).call.apply(_ref,[this].concat(args))),_this),_this.viewConfig={uiViewClassName:'RCTView',validAttributes:ReactNativeViewAttributes.RCTView},_temp),_possibleConstructorReturn(_this,_ret);}_createClass(View,[{key:'getChildContext',value:function getChildContext(){return{isInAParentText:false};}},{key:'render',value:function render(){invariant(!(this.context.isInAParentText&&Platform.OS==='android'),'Nesting of <View> within <Text> is not supported on Android.');return React.createElement(RCTView,this.props);}}]);return View;}(ReactNative.NativeComponent),_class.propTypes=ViewPropTypes,_class.childContextTypes=ViewContextTypes,_temp2);var RCTView=requireNativeComponent('RCTView',View,{nativeOnly:{nativeBackgroundAndroid:true,nativeForegroundAndroid:true}});if(__DEV__){var UIManager=require('UIManager');var viewConfig=UIManager.viewConfigs&&UIManager.viewConfigs.RCTView||{};for(var prop in viewConfig.nativeProps){var viewAny=View;if(!viewAny.propTypes[prop]&&!ReactNativeStyleAttributes[prop]){throw new Error('View is missing propType for native prop `'+prop+'`');}}}var ViewToExport=RCTView;if(__DEV__){ViewToExport=View;}module.exports=ViewToExport;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlZpZXcuanMiXSwibmFtZXMiOlsiUGxhdGZvcm0iLCJyZXF1aXJlIiwiUmVhY3QiLCJSZWFjdE5hdGl2ZSIsIlJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzIiwiUmVhY3ROYXRpdmVWaWV3QXR0cmlidXRlcyIsIlZpZXdQcm9wVHlwZXMiLCJWaWV3Q29udGV4dFR5cGVzIiwiaW52YXJpYW50IiwicmVxdWlyZU5hdGl2ZUNvbXBvbmVudCIsIlZpZXciLCJ2aWV3Q29uZmlnIiwidWlWaWV3Q2xhc3NOYW1lIiwidmFsaWRBdHRyaWJ1dGVzIiwiUkNUVmlldyIsImlzSW5BUGFyZW50VGV4dCIsImNvbnRleHQiLCJPUyIsInByb3BzIiwiTmF0aXZlQ29tcG9uZW50IiwicHJvcFR5cGVzIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJuYXRpdmVPbmx5IiwibmF0aXZlQmFja2dyb3VuZEFuZHJvaWQiLCJuYXRpdmVGb3JlZ3JvdW5kQW5kcm9pZCIsIl9fREVWX18iLCJVSU1hbmFnZXIiLCJ2aWV3Q29uZmlncyIsInByb3AiLCJuYXRpdmVQcm9wcyIsInZpZXdBbnkiLCJFcnJvciIsIlZpZXdUb0V4cG9ydCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBLGEsOHpDQUVBLEdBQU1BLFVBQVdDLE9BQVgsWUFBTixDQUNBLEdBQU1DLE9BQVFELE9BQVIsU0FBTixDQUNBLEdBQU1FLGFBQWNGLE9BQWQsZUFBTixDQUNBLEdBQU1HLDRCQUE2QkgsT0FBN0IsOEJBQU4sQ0FDQSxHQUFNSSwyQkFBNEJKLE9BQTVCLDZCQUFOLENBQ0EsR0FBTUssZUFBZ0JMLE9BQWhCLGlCQUFOLEMsYUFDMkJBLE8sZ0JBQXBCTSxnQixVQUFBQSxnQixDQUNQLEdBQU1DLFdBQVlQLE9BQVosc0JBQU4sQ0FDQSxHQUFNUSx3QkFBeUJSLE9BQXpCLDBCQUFOLEMsR0FjTVMsSyxtYUFJSkMsVSxDQUFhLENBQ1hDLGdCQUFpQixTQUROLENBRVhDLGdCQUFpQlIsMEJBQTBCUyxPQUZoQyxDLDBIQUt1QixDQUNsQyxNQUFPLENBQ0xDLGdCQUFpQixLQURaLENBQVAsQ0FHRCxDLHVDQUVRLENBQ1BQLFVBQ0UsRUFBRSxLQUFLUSxPQUFMLENBQWFELGVBQWIsRUFBZ0NmLFNBQVNpQixFQUFULEdBQWdCLFNBQWxELENBREYsQ0FFRSw4REFGRixFQVNBLE1BQU8scUJBQUMsT0FBRCxDQUFhLEtBQUtDLEtBQWxCLENBQVAsQ0FDRCxDLGtCQTFCZ0JmLFlBQVlnQixlLFNBQ3RCQyxTLENBQVlkLGEsUUFDWmUsaUIsQ0FBb0JkLGdCLFNBMkI3QixHQUFNTyxTQUFVTCx1QkFBdUIsU0FBdkIsQ0FBa0NDLElBQWxDLENBQXdDLENBQ3REWSxXQUFZLENBQ1ZDLHdCQUF5QixJQURmLENBRVZDLHdCQUF5QixJQUZmLENBRDBDLENBQXhDLENBQWhCLENBT0EsR0FBSUMsT0FBSixDQUFhLENBQ1gsR0FBTUMsV0FBWXpCLE9BQVosYUFBTixDQUNBLEdBQU1VLFlBQ0hlLFVBQVVDLFdBQVYsRUFBeUJELFVBQVVDLFdBQVYsQ0FBc0JiLE9BQWhELEVBQTRELEVBRDlELENBRUEsSUFBSyxHQUFNYyxLQUFYLEdBQW1CakIsWUFBV2tCLFdBQTlCLENBQTJDLENBQ3pDLEdBQU1DLFNBQWVwQixJQUFyQixDQUNBLEdBQUksQ0FBQ29CLFFBQVFWLFNBQVIsQ0FBa0JRLElBQWxCLENBQUQsRUFBNEIsQ0FBQ3hCLDJCQUEyQndCLElBQTNCLENBQWpDLENBQW1FLENBQ2pFLEtBQU0sSUFBSUcsTUFBSixDQUNKLDZDQUErQ0gsSUFBL0MsQ0FBc0QsR0FEbEQsQ0FBTixDQUdELENBQ0YsQ0FDRixDQUVELEdBQUlJLGNBQWVsQixPQUFuQixDQUNBLEdBQUlXLE9BQUosQ0FBYSxDQUNYTyxhQUFldEIsSUFBZixDQUNELENBR0R1QixPQUFPQyxPQUFQLENBQW1CRixZQUFuQiIsImZpbGUiOiJWaWV3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgVmlld1xuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBQbGF0Zm9ybSA9IHJlcXVpcmUoJ1BsYXRmb3JtJyk7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ1JlYWN0Jyk7XG5jb25zdCBSZWFjdE5hdGl2ZSA9IHJlcXVpcmUoJ1JlYWN0TmF0aXZlJyk7XG5jb25zdCBSZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcyA9IHJlcXVpcmUoJ1JlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzJyk7XG5jb25zdCBSZWFjdE5hdGl2ZVZpZXdBdHRyaWJ1dGVzID0gcmVxdWlyZSgnUmVhY3ROYXRpdmVWaWV3QXR0cmlidXRlcycpO1xuY29uc3QgVmlld1Byb3BUeXBlcyA9IHJlcXVpcmUoJ1ZpZXdQcm9wVHlwZXMnKTtcbmNvbnN0IHtWaWV3Q29udGV4dFR5cGVzfSA9IHJlcXVpcmUoJ1ZpZXdDb250ZXh0Jyk7XG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbmNvbnN0IHJlcXVpcmVOYXRpdmVDb21wb25lbnQgPSByZXF1aXJlKCdyZXF1aXJlTmF0aXZlQ29tcG9uZW50Jyk7XG5cbmltcG9ydCB0eXBlIHtWaWV3UHJvcHN9IGZyb20gJ1ZpZXdQcm9wVHlwZXMnO1xuaW1wb3J0IHR5cGUge1ZpZXdDaGlsZENvbnRleHR9IGZyb20gJ1ZpZXdDb250ZXh0JztcblxuZXhwb3J0IHR5cGUgUHJvcHMgPSBWaWV3UHJvcHM7XG5cbi8qKlxuICogVGhlIG1vc3QgZnVuZGFtZW50YWwgY29tcG9uZW50IGZvciBidWlsZGluZyBhIFVJLCBWaWV3IGlzIGEgY29udGFpbmVyIHRoYXRcbiAqIHN1cHBvcnRzIGxheW91dCB3aXRoIGZsZXhib3gsIHN0eWxlLCBzb21lIHRvdWNoIGhhbmRsaW5nLCBhbmQgYWNjZXNzaWJpbGl0eVxuICogY29udHJvbHMuXG4gKlxuICogQHNlZSBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0LW5hdGl2ZS9kb2NzL3ZpZXcuaHRtbFxuICovXG5jbGFzcyBWaWV3IGV4dGVuZHMgUmVhY3ROYXRpdmUuTmF0aXZlQ29tcG9uZW50PFByb3BzPiB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSBWaWV3UHJvcFR5cGVzO1xuICBzdGF0aWMgY2hpbGRDb250ZXh0VHlwZXMgPSBWaWV3Q29udGV4dFR5cGVzO1xuXG4gIHZpZXdDb25maWcgPSB7XG4gICAgdWlWaWV3Q2xhc3NOYW1lOiAnUkNUVmlldycsXG4gICAgdmFsaWRBdHRyaWJ1dGVzOiBSZWFjdE5hdGl2ZVZpZXdBdHRyaWJ1dGVzLlJDVFZpZXcsXG4gIH07XG5cbiAgZ2V0Q2hpbGRDb250ZXh0KCk6IFZpZXdDaGlsZENvbnRleHQge1xuICAgIHJldHVybiB7XG4gICAgICBpc0luQVBhcmVudFRleHQ6IGZhbHNlLFxuICAgIH07XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgISh0aGlzLmNvbnRleHQuaXNJbkFQYXJlbnRUZXh0ICYmIFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcpLFxuICAgICAgJ05lc3Rpbmcgb2YgPFZpZXc+IHdpdGhpbiA8VGV4dD4gaXMgbm90IHN1cHBvcnRlZCBvbiBBbmRyb2lkLicsXG4gICAgKTtcblxuICAgIC8vIFdBUk5JTkc6IFRoaXMgbWV0aG9kIHdpbGwgbm90IGJlIHVzZWQgaW4gcHJvZHVjdGlvbiBtb2RlIGFzIGluIHRoYXQgbW9kZSB3ZVxuICAgIC8vIHJlcGxhY2Ugd3JhcHBlciBjb21wb25lbnQgVmlldyB3aXRoIGdlbmVyYXRlZCBuYXRpdmUgd3JhcHBlciBSQ1RWaWV3LiBBdm9pZFxuICAgIC8vIGFkZGluZyBmdW5jdGlvbmFsaXR5IHRoaXMgY29tcG9uZW50IHRoYXQgeW91J2Qgd2FudCB0byBiZSBhdmFpbGFibGUgaW4gYm90aFxuICAgIC8vIGRldiBhbmQgcHJvZCBtb2Rlcy5cbiAgICByZXR1cm4gPFJDVFZpZXcgey4uLnRoaXMucHJvcHN9IC8+O1xuICB9XG59XG5cbmNvbnN0IFJDVFZpZXcgPSByZXF1aXJlTmF0aXZlQ29tcG9uZW50KCdSQ1RWaWV3JywgVmlldywge1xuICBuYXRpdmVPbmx5OiB7XG4gICAgbmF0aXZlQmFja2dyb3VuZEFuZHJvaWQ6IHRydWUsXG4gICAgbmF0aXZlRm9yZWdyb3VuZEFuZHJvaWQ6IHRydWUsXG4gIH0sXG59KTtcblxuaWYgKF9fREVWX18pIHtcbiAgY29uc3QgVUlNYW5hZ2VyID0gcmVxdWlyZSgnVUlNYW5hZ2VyJyk7XG4gIGNvbnN0IHZpZXdDb25maWcgPVxuICAgIChVSU1hbmFnZXIudmlld0NvbmZpZ3MgJiYgVUlNYW5hZ2VyLnZpZXdDb25maWdzLlJDVFZpZXcpIHx8IHt9O1xuICBmb3IgKGNvbnN0IHByb3AgaW4gdmlld0NvbmZpZy5uYXRpdmVQcm9wcykge1xuICAgIGNvbnN0IHZpZXdBbnk6IGFueSA9IFZpZXc7IC8vIEFwcGVhc2UgZmxvd1xuICAgIGlmICghdmlld0FueS5wcm9wVHlwZXNbcHJvcF0gJiYgIVJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzW3Byb3BdKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdWaWV3IGlzIG1pc3NpbmcgcHJvcFR5cGUgZm9yIG5hdGl2ZSBwcm9wIGAnICsgcHJvcCArICdgJyxcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmxldCBWaWV3VG9FeHBvcnQgPSBSQ1RWaWV3O1xuaWYgKF9fREVWX18pIHtcbiAgVmlld1RvRXhwb3J0ID0gVmlldztcbn1cblxuLy8gTm8gb25lIHNob3VsZCBkZXBlbmQgb24gdGhlIERFVi1tb2RlIGNyZWF0ZUNsYXNzIFZpZXcgd3JhcHBlci5cbm1vZHVsZS5leHBvcnRzID0gKChWaWV3VG9FeHBvcnQ6IGFueSk6IHR5cGVvZiBWaWV3KTtcbiJdfQ==