337a61d1912d46782f371b1c0230829e
'use strict';var invariant=require('fbjs/lib/invariant');var merge=require('merge');function createStrictShapeTypeChecker(shapeTypes){function checkType(isRequired,props,propName,componentName,location){if(!props[propName]){if(isRequired){invariant(false,'Required object `'+propName+'` was not specified in '+('`'+componentName+'`.'));}return;}var propValue=props[propName];var propType=typeof propValue;var locationName=location||'(unknown)';if(propType!=='object'){invariant(false,'Invalid '+locationName+' `'+propName+'` of type `'+propType+'` '+('supplied to `'+componentName+'`, expected `object`.'));}var allKeys=merge(props[propName],shapeTypes);for(var _len=arguments.length,rest=Array(_len>5?_len-5:0),_key=5;_key<_len;_key++){rest[_key-5]=arguments[_key];}for(var key in allKeys){var checker=shapeTypes[key];if(!checker){invariant(false,'Invalid props.'+propName+' key `'+key+'` supplied to `'+componentName+'`.'+'\nBad object: '+JSON.stringify(props[propName],null,'  ')+'\nValid keys: '+JSON.stringify(Object.keys(shapeTypes),null,'  '));}var error=checker.apply(undefined,[propValue,key,componentName,location].concat(rest));if(error){invariant(false,error.message+'\nBad object: '+JSON.stringify(props[propName],null,'  '));}}}function chainedCheckType(props,propName,componentName,location){for(var _len2=arguments.length,rest=Array(_len2>4?_len2-4:0),_key2=4;_key2<_len2;_key2++){rest[_key2-4]=arguments[_key2];}return checkType.apply(undefined,[false,props,propName,componentName,location].concat(rest));}chainedCheckType.isRequired=checkType.bind(null,true);return chainedCheckType;}module.exports=createStrictShapeTypeChecker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXIuanMiXSwibmFtZXMiOlsiaW52YXJpYW50IiwicmVxdWlyZSIsIm1lcmdlIiwiY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlciIsInNoYXBlVHlwZXMiLCJjaGVja1R5cGUiLCJpc1JlcXVpcmVkIiwicHJvcHMiLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJsb2NhdGlvbiIsInByb3BWYWx1ZSIsInByb3BUeXBlIiwibG9jYXRpb25OYW1lIiwiYWxsS2V5cyIsInJlc3QiLCJrZXkiLCJjaGVja2VyIiwiSlNPTiIsInN0cmluZ2lmeSIsIk9iamVjdCIsImtleXMiLCJlcnJvciIsIm1lc3NhZ2UiLCJjaGFpbmVkQ2hlY2tUeXBlIiwiYmluZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVNBLGFBRUEsR0FBSUEsV0FBWUMsT0FBWixzQkFBSixDQUNBLEdBQUlDLE9BQVFELE9BQVIsU0FBSixDQUVBLFFBQVNFLDZCQUFULENBQ0VDLFVBREYsQ0FFa0MsQ0FDaEMsUUFBU0MsVUFBVCxDQUFtQkMsVUFBbkIsQ0FBK0JDLEtBQS9CLENBQXNDQyxRQUF0QyxDQUFnREMsYUFBaEQsQ0FBK0RDLFFBQS9ELENBQW1GLENBQ2pGLEdBQUksQ0FBQ0gsTUFBTUMsUUFBTixDQUFMLENBQXNCLENBQ3BCLEdBQUlGLFVBQUosQ0FBZ0IsQ0FDZE4sVUFDRSxLQURGLENBRUUsb0JBQXFCUSxRQUFyQixnQ0FDS0MsYUFETCxNQUZGLEVBS0QsQ0FDRCxPQUNELENBQ0QsR0FBSUUsV0FBWUosTUFBTUMsUUFBTixDQUFoQixDQUNBLEdBQUlJLFVBQVcsTUFBT0QsVUFBdEIsQ0FDQSxHQUFJRSxjQUFlSCxVQUFZLFdBQS9CLENBQ0EsR0FBSUUsV0FBYSxRQUFqQixDQUEyQixDQUN6QlosVUFDRSxLQURGLENBRUUsV0FBV2EsWUFBWCxNQUE2QkwsUUFBN0IsZUFBcURJLFFBQXJELHVCQUNtQkgsYUFEbkIseUJBRkYsRUFLRCxDQUdELEdBQUlLLFNBQVVaLE1BQU1LLE1BQU1DLFFBQU4sQ0FBTixDQUF1QkosVUFBdkIsQ0FBZCxDQXZCaUYsOEJBQU5XLElBQU0saURBQU5BLElBQU0sMEJBd0JqRixJQUFLLEdBQUlDLElBQVQsR0FBZ0JGLFFBQWhCLENBQXlCLENBQ3ZCLEdBQUlHLFNBQVViLFdBQVdZLEdBQVgsQ0FBZCxDQUNBLEdBQUksQ0FBQ0MsT0FBTCxDQUFjLENBQ1pqQixVQUNFLEtBREYsQ0FFRSxpQkFBaUJRLFFBQWpCLFVBQW1DUSxHQUFuQyxtQkFBMERQLGFBQTFELE1BQ0UsZ0JBREYsQ0FDcUJTLEtBQUtDLFNBQUwsQ0FBZVosTUFBTUMsUUFBTixDQUFmLENBQWdDLElBQWhDLENBQXNDLElBQXRDLENBRHJCLENBRUUsZ0JBRkYsQ0FFcUJVLEtBQUtDLFNBQUwsQ0FBZUMsT0FBT0MsSUFBUCxDQUFZakIsVUFBWixDQUFmLENBQXdDLElBQXhDLENBQThDLElBQTlDLENBSnZCLEVBTUQsQ0FDRCxHQUFJa0IsT0FBUUwseUJBQVFOLFNBQVIsQ0FBbUJLLEdBQW5CLENBQXdCUCxhQUF4QixDQUF1Q0MsUUFBdkMsU0FBb0RLLElBQXBELEVBQVosQ0FDQSxHQUFJTyxLQUFKLENBQVcsQ0FDVHRCLFVBQ0UsS0FERixDQUVFc0IsTUFBTUMsT0FBTixDQUNFLGdCQURGLENBQ3FCTCxLQUFLQyxTQUFMLENBQWVaLE1BQU1DLFFBQU4sQ0FBZixDQUFnQyxJQUFoQyxDQUFzQyxJQUF0QyxDQUh2QixFQUtELENBQ0YsQ0FDRixDQUNELFFBQVNnQixpQkFBVCxDQUNFakIsS0FERixDQUVFQyxRQUZGLENBR0VDLGFBSEYsQ0FJRUMsUUFKRixDQU1VLGdDQURMSyxJQUNLLHVEQURMQSxJQUNLLDRCQUNSLE1BQU9WLDRCQUFVLEtBQVYsQ0FBaUJFLEtBQWpCLENBQXdCQyxRQUF4QixDQUFrQ0MsYUFBbEMsQ0FBaURDLFFBQWpELFNBQThESyxJQUE5RCxFQUFQLENBQ0QsQ0FDRFMsaUJBQWlCbEIsVUFBakIsQ0FBOEJELFVBQVVvQixJQUFWLENBQWUsSUFBZixDQUFxQixJQUFyQixDQUE5QixDQUNBLE1BQU9ELGlCQUFQLENBQ0QsQ0FFREUsT0FBT0MsT0FBUCxDQUFpQnhCLDRCQUFqQiIsImZpbGUiOiJjcmVhdGVTdHJpY3RTaGFwZVR5cGVDaGVja2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlclxuICogQGZsb3dcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgbWVyZ2UgPSByZXF1aXJlKCdtZXJnZScpO1xuXG5mdW5jdGlvbiBjcmVhdGVTdHJpY3RTaGFwZVR5cGVDaGVja2VyKFxuICBzaGFwZVR5cGVzOiB7W2tleTogc3RyaW5nXTogUmVhY3RQcm9wc0NoZWNrVHlwZX1cbik6IFJlYWN0UHJvcHNDaGFpbmFibGVUeXBlQ2hlY2tlciB7XG4gIGZ1bmN0aW9uIGNoZWNrVHlwZShpc1JlcXVpcmVkLCBwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uPywgLi4ucmVzdCkge1xuICAgIGlmICghcHJvcHNbcHJvcE5hbWVdKSB7XG4gICAgICBpZiAoaXNSZXF1aXJlZCkge1xuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgYFJlcXVpcmVkIG9iamVjdCBcXGAke3Byb3BOYW1lfVxcYCB3YXMgbm90IHNwZWNpZmllZCBpbiBgICtcbiAgICAgICAgICBgXFxgJHtjb21wb25lbnROYW1lfVxcYC5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgdmFyIHByb3BUeXBlID0gdHlwZW9mIHByb3BWYWx1ZTtcbiAgICB2YXIgbG9jYXRpb25OYW1lID0gbG9jYXRpb24gfHwgJyh1bmtub3duKSc7XG4gICAgaWYgKHByb3BUeXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgYEludmFsaWQgJHtsb2NhdGlvbk5hbWV9IFxcYCR7cHJvcE5hbWV9XFxgIG9mIHR5cGUgXFxgJHtwcm9wVHlwZX1cXGAgYCArXG4gICAgICAgICAgYHN1cHBsaWVkIHRvIFxcYCR7Y29tcG9uZW50TmFtZX1cXGAsIGV4cGVjdGVkIFxcYG9iamVjdFxcYC5gXG4gICAgICApO1xuICAgIH1cbiAgICAvLyBXZSBuZWVkIHRvIGNoZWNrIGFsbCBrZXlzIGluIGNhc2Ugc29tZSBhcmUgcmVxdWlyZWQgYnV0IG1pc3NpbmcgZnJvbVxuICAgIC8vIHByb3BzLlxuICAgIHZhciBhbGxLZXlzID0gbWVyZ2UocHJvcHNbcHJvcE5hbWVdLCBzaGFwZVR5cGVzKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gYWxsS2V5cykge1xuICAgICAgdmFyIGNoZWNrZXIgPSBzaGFwZVR5cGVzW2tleV07XG4gICAgICBpZiAoIWNoZWNrZXIpIHtcbiAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIGBJbnZhbGlkIHByb3BzLiR7cHJvcE5hbWV9IGtleSBcXGAke2tleX1cXGAgc3VwcGxpZWQgdG8gXFxgJHtjb21wb25lbnROYW1lfVxcYC5gICtcbiAgICAgICAgICAgICdcXG5CYWQgb2JqZWN0OiAnICsgSlNPTi5zdHJpbmdpZnkocHJvcHNbcHJvcE5hbWVdLCBudWxsLCAnICAnKSArXG4gICAgICAgICAgICAnXFxuVmFsaWQga2V5czogJyArIEpTT04uc3RyaW5naWZ5KE9iamVjdC5rZXlzKHNoYXBlVHlwZXMpLCBudWxsLCAnICAnKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdmFyIGVycm9yID0gY2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIC4uLnJlc3QpO1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGludmFyaWFudChcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBlcnJvci5tZXNzYWdlICtcbiAgICAgICAgICAgICdcXG5CYWQgb2JqZWN0OiAnICsgSlNPTi5zdHJpbmdpZnkocHJvcHNbcHJvcE5hbWVdLCBudWxsLCAnICAnKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBjaGFpbmVkQ2hlY2tUeXBlKFxuICAgIHByb3BzOiB7W2tleTogc3RyaW5nXTogYW55fSxcbiAgICBwcm9wTmFtZTogc3RyaW5nLFxuICAgIGNvbXBvbmVudE5hbWU6IHN0cmluZyxcbiAgICBsb2NhdGlvbj86IHN0cmluZyxcbiAgICAuLi5yZXN0XG4gICk6ID9FcnJvciB7XG4gICAgcmV0dXJuIGNoZWNrVHlwZShmYWxzZSwgcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgLi4ucmVzdCk7XG4gIH1cbiAgY2hhaW5lZENoZWNrVHlwZS5pc1JlcXVpcmVkID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgdHJ1ZSk7XG4gIHJldHVybiBjaGFpbmVkQ2hlY2tUeXBlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXI7XG4iXX0=