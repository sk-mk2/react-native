{"version":3,"sources":["deepFreezeAndThrowOnMutationInDev.js"],"names":["deepFreezeAndThrowOnMutationInDev","object","__DEV__","Object","isFrozen","isSealed","keys","i","length","key","hasOwnProperty","__defineGetter__","identity","bind","__defineSetter__","throwOnImmutableMutation","freeze","seal","value","Error","JSON","stringify","module","exports"],"mappings":"AAUA,aAmBA,QAASA,kCAAT,CAAsDC,MAAtD,CAAoE,CAClE,GAAIC,OAAJ,CAAa,CACX,GAAI,MAAOD,OAAP,GAAkB,QAAlB,EACAA,SAAW,IADX,EAEAE,OAAOC,QAAP,CAAgBH,MAAhB,CAFA,EAGAE,OAAOE,QAAP,CAAgBJ,MAAhB,CAHJ,CAG6B,CAC3B,MAAOA,OAAP,CACD,CAED,GAAIK,MAAOH,OAAOG,IAAP,CAAYL,MAAZ,CAAX,CAEA,IAAK,GAAIM,GAAI,CAAb,CAAgBA,EAAID,KAAKE,MAAzB,CAAiCD,GAAjC,CAAsC,CACpC,GAAIE,KAAMH,KAAKC,CAAL,CAAV,CACA,GAAIN,OAAOS,cAAP,CAAsBD,GAAtB,CAAJ,CAAgC,CAC9BR,OAAOU,gBAAP,CAAwBF,GAAxB,CAA6BG,SAASC,IAAT,CAAc,IAAd,CAAoBZ,OAAOQ,GAAP,CAApB,CAA7B,EACAR,OAAOa,gBAAP,CAAwBL,GAAxB,CAA6BM,yBAAyBF,IAAzB,CAA8B,IAA9B,CAAoCJ,GAApC,CAA7B,EACD,CACF,CAEDN,OAAOa,MAAP,CAAcf,MAAd,EACAE,OAAOc,IAAP,CAAYhB,MAAZ,EAEA,IAAK,GAAIM,GAAI,CAAb,CAAgBA,EAAID,KAAKE,MAAzB,CAAiCD,GAAjC,CAAsC,CACpC,GAAIE,KAAMH,KAAKC,CAAL,CAAV,CACA,GAAIN,OAAOS,cAAP,CAAsBD,GAAtB,CAAJ,CAAgC,CAC9BT,kCAAkCC,OAAOQ,GAAP,CAAlC,EACD,CACF,CACF,CACD,MAAOR,OAAP,CACD,CAED,QAASc,yBAAT,CAAkCN,GAAlC,CAAuCS,KAAvC,CAA8C,CAC5C,KAAMC,OACJ,iCAAmCV,GAAnC,CAAyC,oBAAzC,CACAW,KAAKC,SAAL,CAAeH,KAAf,CADA,CACwB,+CADxB,CAEA,sBAHI,CAAN,CAKD,CAED,QAASN,SAAT,CAAkBM,KAAlB,CAAyB,CACvB,MAAOA,MAAP,CACD,CAEDI,OAAOC,OAAP,CAAiBvB,iCAAjB","file":"deepFreezeAndThrowOnMutationInDev.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule deepFreezeAndThrowOnMutationInDev\n * @flow\n */\n\n'use strict';\n\n/**\n * If your application is accepting different values for the same field over\n * time and is doing a diff on them, you can either (1) create a copy or\n * (2) ensure that those values are not mutated behind two passes.\n * This function helps you with (2) by freezing the object and throwing if\n * the user subsequently modifies the value.\n *\n * There are two caveats with this function:\n *   - If the call site is not in strict mode, it will only throw when\n *     mutating existing fields, adding a new one\n *     will unfortunately fail silently :(\n *   - If the object is already frozen or sealed, it will not continue the\n *     deep traversal and will leave leaf nodes unfrozen.\n *\n * Freezing the object and adding the throw mechanism is expensive and will\n * only be used in DEV.\n */\nfunction deepFreezeAndThrowOnMutationInDev<T: Object>(object: T): T {\n  if (__DEV__) {\n    if (typeof object !== 'object' ||\n        object === null ||\n        Object.isFrozen(object) ||\n        Object.isSealed(object)) {\n      return object;\n    }\n\n    var keys = Object.keys(object);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      if (object.hasOwnProperty(key)) {\n        object.__defineGetter__(key, identity.bind(null, object[key]));\n        object.__defineSetter__(key, throwOnImmutableMutation.bind(null, key));\n      }\n    }\n\n    Object.freeze(object);\n    Object.seal(object);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      if (object.hasOwnProperty(key)) {\n        deepFreezeAndThrowOnMutationInDev(object[key]);\n      }\n    }\n  }\n  return object;\n}\n\nfunction throwOnImmutableMutation(key, value) {\n  throw Error(\n    'You attempted to set the key `' + key + '` with the value `' +\n    JSON.stringify(value) + '` on an object that is meant to be immutable ' +\n    'and has been frozen.'\n  );\n}\n\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = deepFreezeAndThrowOnMutationInDev;\n"]}