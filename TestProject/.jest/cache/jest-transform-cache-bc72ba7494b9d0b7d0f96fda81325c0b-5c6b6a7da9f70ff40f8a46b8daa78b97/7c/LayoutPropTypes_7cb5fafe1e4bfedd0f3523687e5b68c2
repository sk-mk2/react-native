07e9e5104b3cd632b579b064db0dd3b6
'use strict';var ReactPropTypes=require('prop-types');var LayoutPropTypes={display:ReactPropTypes.oneOf(['none','flex']),width:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),height:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),start:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),end:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),top:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),left:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),right:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),bottom:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),minWidth:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),maxWidth:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),minHeight:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),maxHeight:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),margin:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),marginVertical:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),marginHorizontal:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),marginTop:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),marginBottom:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),marginLeft:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),marginRight:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),marginStart:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),marginEnd:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),padding:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),paddingVertical:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),paddingHorizontal:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),paddingTop:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),paddingBottom:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),paddingLeft:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),paddingRight:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),paddingStart:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),paddingEnd:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),borderWidth:ReactPropTypes.number,borderTopWidth:ReactPropTypes.number,borderStartWidth:ReactPropTypes.number,borderEndWidth:ReactPropTypes.number,borderRightWidth:ReactPropTypes.number,borderBottomWidth:ReactPropTypes.number,borderLeftWidth:ReactPropTypes.number,position:ReactPropTypes.oneOf(['absolute','relative']),flexDirection:ReactPropTypes.oneOf(['row','row-reverse','column','column-reverse']),flexWrap:ReactPropTypes.oneOf(['wrap','nowrap']),justifyContent:ReactPropTypes.oneOf(['flex-start','flex-end','center','space-between','space-around','space-evenly']),alignItems:ReactPropTypes.oneOf(['flex-start','flex-end','center','stretch','baseline']),alignSelf:ReactPropTypes.oneOf(['auto','flex-start','flex-end','center','stretch','baseline']),alignContent:ReactPropTypes.oneOf(['flex-start','flex-end','center','stretch','space-between','space-around']),overflow:ReactPropTypes.oneOf(['visible','hidden','scroll']),flex:ReactPropTypes.number,flexGrow:ReactPropTypes.number,flexShrink:ReactPropTypes.number,flexBasis:ReactPropTypes.oneOfType([ReactPropTypes.number,ReactPropTypes.string]),aspectRatio:ReactPropTypes.number,zIndex:ReactPropTypes.number,direction:ReactPropTypes.oneOf(['inherit','ltr','rtl'])};module.exports=LayoutPropTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkxheW91dFByb3BUeXBlcy5qcyJdLCJuYW1lcyI6WyJSZWFjdFByb3BUeXBlcyIsInJlcXVpcmUiLCJMYXlvdXRQcm9wVHlwZXMiLCJkaXNwbGF5Iiwib25lT2YiLCJ3aWR0aCIsIm9uZU9mVHlwZSIsIm51bWJlciIsInN0cmluZyIsImhlaWdodCIsInN0YXJ0IiwiZW5kIiwidG9wIiwibGVmdCIsInJpZ2h0IiwiYm90dG9tIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsIm1pbkhlaWdodCIsIm1heEhlaWdodCIsIm1hcmdpbiIsIm1hcmdpblZlcnRpY2FsIiwibWFyZ2luSG9yaXpvbnRhbCIsIm1hcmdpblRvcCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsIm1hcmdpblN0YXJ0IiwibWFyZ2luRW5kIiwicGFkZGluZyIsInBhZGRpbmdWZXJ0aWNhbCIsInBhZGRpbmdIb3Jpem9udGFsIiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsInBhZGRpbmdTdGFydCIsInBhZGRpbmdFbmQiLCJib3JkZXJXaWR0aCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyU3RhcnRXaWR0aCIsImJvcmRlckVuZFdpZHRoIiwiYm9yZGVyUmlnaHRXaWR0aCIsImJvcmRlckJvdHRvbVdpZHRoIiwiYm9yZGVyTGVmdFdpZHRoIiwicG9zaXRpb24iLCJmbGV4RGlyZWN0aW9uIiwiZmxleFdyYXAiLCJqdXN0aWZ5Q29udGVudCIsImFsaWduSXRlbXMiLCJhbGlnblNlbGYiLCJhbGlnbkNvbnRlbnQiLCJvdmVyZmxvdyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJmbGV4QmFzaXMiLCJhc3BlY3RSYXRpbyIsInpJbmRleCIsImRpcmVjdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVNBLGFBRUEsR0FBSUEsZ0JBQWlCQyxPQUFqQixjQUFKLENBZUEsR0FBSUMs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RCxVQUFXeEQsZUFBZU0sU0FBZixDQUF5QixDQUNsQ04sZUFBZU8sTUFEbUIsQ0FFbENQLGVBQWVRLE1BRm1CLENBQXpCLENBNWZTLENBOGdCcEJpRCxZQUFhekQsZUFBZU8sTUE5Z0JSLENBNGhCcEJtRCxPQUFRMUQsZUFBZU8sTUE1aEJILENBcWlCcEJvRCxVQUFXM0QsZUFBZUksS0FBZixDQUFxQixDQUM5QixTQUQ4QixDQUU5QixLQUY4QixDQUc5QixLQUg4QixDQUFyQixDQXJpQlMsQ0FBdEIsQ0E0aUJBd0QsT0FBT0MsT0FBUCxDQUFpQjNELGVBQWpCIiwiZmlsZSI6IkxheW91dFByb3BUeXBlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIExheW91dFByb3BUeXBlc1xuICogQGZsb3dcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbi8qKlxuICogUmVhY3QgTmF0aXZlJ3MgbGF5b3V0IHN5c3RlbSBpcyBiYXNlZCBvbiBGbGV4Ym94IGFuZCBpcyBwb3dlcmVkIGJvdGhcbiAqIG9uIGlPUyBhbmQgQW5kcm9pZCBieSBhbiBvcGVuIHNvdXJjZSBwcm9qZWN0IGNhbGxlZCBgWW9nYWA6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2sveW9nYVxuICpcbiAqIFRoZSBpbXBsZW1lbnRhdGlvbiBpbiBZb2dhIGlzIHNsaWdodGx5IGRpZmZlcmVudCBmcm9tIHdoYXQgdGhlXG4gKiBGbGV4Ym94IHNwZWMgZGVmaW5lcyAtIGZvciBleGFtcGxlLCB3ZSBjaG9zZSBtb3JlIHNlbnNpYmxlIGRlZmF1bHRcbiAqIHZhbHVlcy4gU2luY2Ugb3VyIGxheW91dCBkb2NzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgY29tbWVudHMgaW4gdGhpc1xuICogZmlsZSwgcGxlYXNlIGtlZXAgYSBicmllZiBjb21tZW50IGRlc2NyaWJpbmcgZWFjaCBwcm9wIHR5cGUuXG4gKlxuICogVGhlc2UgcHJvcGVydGllcyBhcmUgYSBzdWJzZXQgb2Ygb3VyIHN0eWxlcyB0aGF0IGFyZSBjb25zdW1lZCBieSB0aGUgbGF5b3V0XG4gKiBhbGdvcml0aG0gYW5kIGFmZmVjdCB0aGUgcG9zaXRpb25pbmcgYW5kIHNpemluZyBvZiB2aWV3cy5cbiAqL1xudmFyIExheW91dFByb3BUeXBlcyA9IHtcbiAgLyoqIGBkaXNwbGF5YCBzZXRzIHRoZSBkaXNwbGF5IHR5cGUgb2YgdGhpcyBjb21wb25lbnQuXG4gICAqXG4gICAqICBJdCB3b3JrcyBzaW1pbGFybHkgdG8gYGRpc3BsYXlgIGluIENTUywgYnV0IG9ubHkgc3VwcG9ydCAnZmxleCcgYW5kICdub25lJy5cbiAgICogICdmbGV4JyBpcyB0aGUgZGVmYXVsdC5cbiAgICovXG4gIGRpc3BsYXk6IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFtcbiAgICAnbm9uZScsXG4gICAgJ2ZsZXgnLFxuICBdKSxcblxuICAvKiogYHdpZHRoYCBzZXRzIHRoZSB3aWR0aCBvZiB0aGlzIGNvbXBvbmVudC5cbiAgICpcbiAgICogIEl0IHdvcmtzIHNpbWlsYXJseSB0byBgd2lkdGhgIGluIENTUywgYnV0IGluIFJlYWN0IE5hdGl2ZSB5b3VcbiAgICogIG11c3QgdXNlIHBvaW50cyBvciBwZXJjZW50YWdlcy4gRW1zIGFuZCBvdGhlciB1bml0cyBhcmUgbm90IHN1cHBvcnRlZC5cbiAgICogIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvd2lkdGggZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIHdpZHRoOiBSZWFjdFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICBSZWFjdFByb3BUeXBlcy5zdHJpbmcsXG4gIF0pLFxuXG4gIC8qKiBgaGVpZ2h0YCBzZXRzIHRoZSBoZWlnaHQgb2YgdGhpcyBjb21wb25lbnQuXG4gICAqXG4gICAqICBJdCB3b3JrcyBzaW1pbGFybHkgdG8gYGhlaWdodGAgaW4gQ1NTLCBidXQgaW4gUmVhY3QgTmF0aXZlIHlvdVxuICAgKiAgbXVzdCB1c2UgcG9pbnRzIG9yIHBlcmNlbnRhZ2VzLiBFbXMgYW5kIG90aGVyIHVuaXRzIGFyZSBub3Qgc3VwcG9ydGVkLlxuICAgKiAgU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9oZWlnaHQgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGhlaWdodDogUmVhY3RQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgUmVhY3RQcm9wVHlwZXMuc3RyaW5nLFxuICBdKSxcblxuICAvKipcbiAgICogV2hlbiB0aGUgZGlyZWN0aW9uIGlzIGBsdHJgLCBgc3RhcnRgIGlzIGVxdWl2YWxlbnQgdG8gYGxlZnRgLlxuICAgKiBXaGVuIHRoZSBkaXJlY3Rpb24gaXMgYHJ0bGAsIGBzdGFydGAgaXMgZXF1aXZhbGVudCB0byBgcmlnaHRgLlxuICAgKlxuICAgKiBUaGlzIHN0eWxlIHRha2VzIHByZWNlZGVuY2Ugb3ZlciB0aGUgYGxlZnRgLCBgcmlnaHRgLCBhbmQgYGVuZGAgc3R5bGVzLlxuICAgKi9cbiAgc3RhcnQ6IFJlYWN0UHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAgIFJlYWN0UHJvcFR5cGVzLnN0cmluZyxcbiAgXSksXG5cbiAgLyoqXG4gICAqIFdoZW4gdGhlIGRpcmVjdGlvbiBpcyBgbHRyYCwgYGVuZGAgaXMgZXF1aXZhbGVudCB0byBgcmlnaHRgLlxuICAgKiBXaGVuIHRoZSBkaXJlY3Rpb24gaXMgYHJ0bGAsIGBlbmRgIGlzIGVxdWl2YWxlbnQgdG8gYGxlZnRgLlxuICAgKlxuICAgKiBUaGlzIHN0eWxlIHRha2VzIHByZWNlZGVuY2Ugb3ZlciB0aGUgYGxlZnRgIGFuZCBgcmlnaHRgIHN0eWxlcy5cbiAgICovXG4gIGVuZDogUmVhY3RQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgUmVhY3RQcm9wVHlwZXMuc3RyaW5nLFxuICBdKSxcblxuICAvKiogYHRvcGAgaXMgdGhlIG51bWJlciBvZiBsb2dpY2FsIHBpeGVscyB0byBvZmZzZXQgdGhlIHRvcCBlZGdlIG9mXG4gICAqICB0aGlzIGNvbXBvbmVudC5cbiAgICpcbiAgICogIEl0IHdvcmtzIHNpbWlsYXJseSB0byBgdG9wYCBpbiBDU1MsIGJ1dCBpbiBSZWFjdCBOYXRpdmUgeW91XG4gICAqICBtdXN0IHVzZSBwb2ludHMgb3IgcGVyY2VudGFnZXMuIEVtcyBhbmQgb3RoZXIgdW5pdHMgYXJlIG5vdCBzdXBwb3J0ZWQuXG4gICAqXG4gICAqICBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RvcFxuICAgKiAgZm9yIG1vcmUgZGV0YWlscyBvZiBob3cgYHRvcGAgYWZmZWN0cyBsYXlvdXQuXG4gICAqL1xuICB0b3A6IFJlYWN0UHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAgIFJlYWN0UHJvcFR5cGVzLnN0cmluZyxcbiAgXSksXG5cbiAgLyoqIGBsZWZ0YCBpcyB0aGUgbnVtYmVyIG9mIGxvZ2ljYWwgcGl4ZWxzIHRvIG9mZnNldCB0aGUgbGVmdCBlZGdlIG9mXG4gICAqICB0aGlzIGNvbXBvbmVudC5cbiAgICpcbiAgICogIEl0IHdvcmtzIHNpbWlsYXJseSB0byBgbGVmdGAgaW4gQ1NTLCBidXQgaW4gUmVhY3QgTmF0aXZlIHlvdVxuICAgKiAgbXVzdCB1c2UgcG9pbnRzIG9yIHBlcmNlbnRhZ2VzLiBFbXMgYW5kIG90aGVyIHVuaXRzIGFyZSBub3Qgc3VwcG9ydGVkLlxuICAgKlxuICAgKiAgU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9sZWZ0XG4gICAqICBmb3IgbW9yZSBkZXRhaWxzIG9mIGhvdyBgbGVmdGAgYWZmZWN0cyBsYXlvdXQuXG4gICAqL1xuICBsZWZ0OiBSZWFjdFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICBSZWFjdFByb3BUeXBlcy5zdHJpbmcsXG4gIF0pLFxuXG4gIC8qKiBgcmlnaHRgIGlzIHRoZSBudW1iZXIgb2YgbG9naWNhbCBwaXhlbHMgdG8gb2Zmc2V0IHRoZSByaWdodCBlZGdlIG9mXG4gICAqICB0aGlzIGNvbXBvbmVudC5cbiAgICpcbiAgICogIEl0IHdvcmtzIHNpbWlsYXJseSB0byBgcmlnaHRgIGluIENTUywgYnV0IGluIFJlYWN0IE5hdGl2ZSB5b3VcbiAgICogIG11c3QgdXNlIHBvaW50cyBvciBwZXJjZW50YWdlcy4gRW1zIGFuZCBvdGhlciB1bml0cyBhcmUgbm90IHN1cHBvcnRlZC5cbiAgICpcbiAgICogIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvcmlnaHRcbiAgICogIGZvciBtb3JlIGRldGFpbHMgb2YgaG93IGByaWdodGAgYWZmZWN0cyBsYXlvdXQuXG4gICAqL1xuICByaWdodDogUmVhY3RQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgUmVhY3RQcm9wVHlwZXMuc3RyaW5nLFxuICBdKSxcblxuICAvKiogYGJvdHRvbWAgaXMgdGhlIG51bWJlciBvZiBsb2dpY2FsIHBpeGVscyB0byBvZmZzZXQgdGhlIGJvdHRvbSBlZGdlIG9mXG4gICAqICB0aGlzIGNvbXBvbmVudC5cbiAgICpcbiAgICogIEl0IHdvcmtzIHNpbWlsYXJseSB0byBgYm90dG9tYCBpbiBDU1MsIGJ1dCBpbiBSZWFjdCBOYXRpdmUgeW91XG4gICAqICBtdXN0IHVzZSBwb2ludHMgb3IgcGVyY2VudGFnZXMuIEVtcyBhbmQgb3RoZXIgdW5pdHMgYXJlIG5vdCBzdXBwb3J0ZWQuXG4gICAqXG4gICAqICBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvdHRvbVxuICAgKiAgZm9yIG1vcmUgZGV0YWlscyBvZiBob3cgYGJvdHRvbWAgYWZmZWN0cyBsYXlvdXQuXG4gICAqL1xuICBib3R0b206IFJlYWN0UHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAgIFJlYWN0UHJvcFR5cGVzLnN0cmluZyxcbiAgXSksXG5cbiAgLyoqIGBtaW5XaWR0aGAgaXMgdGhlIG1pbmltdW0gd2lkdGggZm9yIHRoaXMgY29tcG9uZW50LCBpbiBsb2dpY2FsIHBpeGVscy5cbiAgICpcbiAgICogIEl0IHdvcmtzIHNpbWlsYXJseSB0byBgbWluLXdpZHRoYCBpbiBDU1MsIGJ1dCBpbiBSZWFjdCBOYXRpdmUgeW91XG4gICAqICBtdXN0IHVzZSBwb2ludHMgb3IgcGVyY2VudGFnZXMuIEVtcyBhbmQgb3RoZXIgdW5pdHMgYXJlIG5vdCBzdXBwb3J0ZWQuXG4gICAqXG4gICAqICBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL21pbi13aWR0aFxuICAgKiAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIG1pbldpZHRoOiBSZWFjdFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICBSZWFjdFByb3BUeXBlcy5zdHJpbmcsXG4gIF0pLFxuXG4gIC8qKiBgbWF4V2lkdGhgIGlzIHRoZSBtYXhpbXVtIHdpZHRoIGZvciB0aGlzIGNvbXBvbmVudCwgaW4gbG9naWNhbCBwaXhlbHMuXG4gICAqXG4gICAqICBJdCB3b3JrcyBzaW1pbGFybHkgdG8gYG1heC13aWR0aGAgaW4gQ1NTLCBidXQgaW4gUmVhY3QgTmF0aXZlIHlvdVxuICAgKiAgbXVzdCB1c2UgcG9pbnRzIG9yIHBlcmNlbnRhZ2VzLiBFbXMgYW5kIG90aGVyIHVuaXRzIGFyZSBub3Qgc3VwcG9ydGVkLlxuICAgKlxuICAgKiAgU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9tYXgtd2lkdGhcbiAgICogIGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBtYXhXaWR0aDogUmVhY3RQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgUmVhY3RQcm9wVHlwZXMuc3RyaW5nLFxuICBdKSxcblxuICAvKiogYG1pbkhlaWdodGAgaXMgdGhlIG1pbmltdW0gaGVpZ2h0IGZvciB0aGlzIGNvbXBvbmVudCwgaW4gbG9naWNhbCBwaXhlbHMuXG4gICAqXG4gICAqICBJdCB3b3JrcyBzaW1pbGFybHkgdG8gYG1pbi1oZWlnaHRgIGluIENTUywgYnV0IGluIFJlYWN0IE5hdGl2ZSB5b3VcbiAgICogIG11c3QgdXNlIHBvaW50cyBvciBwZXJjZW50YWdlcy4gRW1zIGFuZCBvdGhlciB1bml0cyBhcmUgbm90IHN1cHBvcnRlZC5cbiAgICpcbiAgICogIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWluLWhlaWdodFxuICAgKiAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIG1pbkhlaWdodDogUmVhY3RQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgUmVhY3RQcm9wVHlwZXMuc3RyaW5nLFxuICBdKSxcblxuICAvKiogYG1heEhlaWdodGAgaXMgdGhlIG1heGltdW0gaGVpZ2h0IGZvciB0aGlzIGNvbXBvbmVudCwgaW4gbG9naWNhbCBwaXhlbHMuXG4gICAqXG4gICAqICBJdCB3b3JrcyBzaW1pbGFybHkgdG8gYG1heC1oZWlnaHRgIGluIENTUywgYnV0IGluIFJlYWN0IE5hdGl2ZSB5b3VcbiAgICogIG11c3QgdXNlIHBvaW50cyBvciBwZXJjZW50YWdlcy4gRW1zIGFuZCBvdGhlciB1bml0cyBhcmUgbm90IHN1cHBvcnRlZC5cbiAgICpcbiAgICogIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWF4LWhlaWdodFxuICAgKiAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIG1heEhlaWdodDogUmVhY3RQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgUmVhY3RQcm9wVHlwZXMuc3RyaW5nLFxuICBdKSxcblxuICAvKiogU2V0dGluZyBgbWFyZ2luYCBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzIHNldHRpbmcgZWFjaCBvZlxuICAgKiAgYG1hcmdpblRvcGAsIGBtYXJnaW5MZWZ0YCwgYG1hcmdpbkJvdHRvbWAsIGFuZCBgbWFyZ2luUmlnaHRgLlxuICAgKiAgU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9tYXJnaW5cbiAgICogIGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBtYXJnaW46IFJlYWN0UHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAgIFJlYWN0UHJvcFR5cGVzLnN0cmluZyxcbiAgXSksXG5cbiAgLyoqIFNldHRpbmcgYG1hcmdpblZlcnRpY2FsYCBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzIHNldHRpbmcgYm90aFxuICAgKiAgYG1hcmdpblRvcGAgYW5kIGBtYXJnaW5Cb3R0b21gLlxuICAgKi9cbiAgbWFyZ2luVmVydGljYWw6IFJlYWN0UHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAgIFJlYWN0UHJvcFR5cGVzLnN0cmluZyxcbiAgXSksXG5cbiAgLyoqIFNldHRpbmcgYG1hcmdpbkhvcml6b250YWxgIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXMgc2V0dGluZ1xuICAgKiAgYm90aCBgbWFyZ2luTGVmdGAgYW5kIGBtYXJnaW5SaWdodGAuXG4gICAqL1xuICBtYXJnaW5Ib3Jpem9udGFsOiBSZWFjdFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICBSZWFjdFByb3BUeXBlcy5zdHJpbmcsXG4gIF0pLFxuXG4gIC8qKiBgbWFyZ2luVG9wYCB3b3JrcyBsaWtlIGBtYXJnaW4tdG9wYCBpbiBDU1MuXG4gICAqICBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL21hcmdpbi10b3BcbiAgICogIGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBtYXJnaW5Ub3A6IFJlYWN0UHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAgIFJlYWN0UHJvcFR5cGVzLnN0cmluZyxcbiAgXSksXG5cbiAgLyoqIGBtYXJnaW5Cb3R0b21gIHdvcmtzIGxpa2UgYG1hcmdpbi1ib3R0b21gIGluIENTUy5cbiAgICogIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWFyZ2luLWJvdHRvbVxuICAgKiAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIG1hcmdpbkJvdHRvbTogUmVhY3RQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgUmVhY3RQcm9wVHlwZXMuc3RyaW5nLFxuICBdKSxcblxuICAvKiogYG1hcmdpbkxlZnRgIHdvcmtzIGxpa2UgYG1hcmdpbi1sZWZ0YCBpbiBDU1MuXG4gICAqICBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL21hcmdpbi1sZWZ0XG4gICAqICBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgbWFyZ2luTGVmdDogUmVhY3RQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgUmVhY3RQcm9wVHlwZXMuc3RyaW5nLFxuICBdKSxcblxuICAvKiogYG1hcmdpblJpZ2h0YCB3b3JrcyBsaWtlIGBtYXJnaW4tcmlnaHRgIGluIENTUy5cbiAgICogIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvbWFyZ2luLXJpZ2h0XG4gICAqICBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgbWFyZ2luUmlnaHQ6IFJlYWN0UHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAgIFJlYWN0UHJvcFR5cGVzLnN0cmluZyxcbiAgXSksXG5cbiAgLyoqXG4gICAqIFdoZW4gZGlyZWN0aW9uIGlzIGBsdHJgLCBgbWFyZ2luU3RhcnRgIGlzIGVxdWl2YWxlbnQgdG8gYG1hcmdpbkxlZnRgLlxuICAgKiBXaGVuIGRpcmVjdGlvbiBpcyBgcnRsYCwgYG1hcmdpblN0YXJ0YCBpcyBlcXVpdmFsZW50IHRvIGBtYXJnaW5SaWdodGAuXG4gICAqL1xuICBtYXJnaW5TdGFydDogUmVhY3RQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgUmVhY3RQcm9wVHlwZXMuc3RyaW5nLFxuICBdKSxcblxuICAvKipcbiAgICogV2hlbiBkaXJlY3Rpb24gaXMgYGx0cmAsIGBtYXJnaW5FbmRgIGlzIGVxdWl2YWxlbnQgdG8gYG1hcmdpblJpZ2h0YC5cbiAgICogV2hlbiBkaXJlY3Rpb24gaXMgYHJ0bGAsIGBtYXJnaW5FbmRgIGlzIGVxdWl2YWxlbnQgdG8gYG1hcmdpbkxlZnRgLlxuICAgKi9cbiAgbWFyZ2luRW5kOiBSZWFjdFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICBSZWFjdFByb3BUeXBlcy5zdHJpbmcsXG4gIF0pLFxuXG4gIC8qKiBTZXR0aW5nIGBwYWRkaW5nYCBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzIHNldHRpbmcgZWFjaCBvZlxuICAgKiAgYHBhZGRpbmdUb3BgLCBgcGFkZGluZ0JvdHRvbWAsIGBwYWRkaW5nTGVmdGAsIGFuZCBgcGFkZGluZ1JpZ2h0YC5cbiAgICogIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvcGFkZGluZ1xuICAgKiAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIHBhZGRpbmc6IFJlYWN0UHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAgIFJlYWN0UHJvcFR5cGVzLnN0cmluZyxcbiAgXSksXG5cbiAgLyoqIFNldHRpbmcgYHBhZGRpbmdWZXJ0aWNhbGAgaXMgbGlrZSBzZXR0aW5nIGJvdGggb2ZcbiAgICogIGBwYWRkaW5nVG9wYCBhbmQgYHBhZGRpbmdCb3R0b21gLlxuICAgKi9cbiAgcGFkZGluZ1ZlcnRpY2FsOiBSZWFjdFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICBSZWFjdFByb3BUeXBlcy5zdHJpbmcsXG4gIF0pLFxuXG4gIC8qKiBTZXR0aW5nIGBwYWRkaW5nSG9yaXpvbnRhbGAgaXMgbGlrZSBzZXR0aW5nIGJvdGggb2ZcbiAgICogIGBwYWRkaW5nTGVmdGAgYW5kIGBwYWRkaW5nUmlnaHRgLlxuICAgKi9cbiAgcGFkZGluZ0hvcml6b250YWw6IFJlYWN0UHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAgIFJlYWN0UHJvcFR5cGVzLnN0cmluZyxcbiAgXSksXG5cbiAgLyoqIGBwYWRkaW5nVG9wYCB3b3JrcyBsaWtlIGBwYWRkaW5nLXRvcGAgaW4gQ1NTLlxuICAgKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3BhZGRpbmctdG9wXG4gICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBwYWRkaW5nVG9wOiBSZWFjdFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICBSZWFjdFByb3BUeXBlcy5zdHJpbmcsXG4gIF0pLFxuXG4gIC8qKiBgcGFkZGluZ0JvdHRvbWAgd29ya3MgbGlrZSBgcGFkZGluZy1ib3R0b21gIGluIENTUy5cbiAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9wYWRkaW5nLWJvdHRvbVxuICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgcGFkZGluZ0JvdHRvbTogUmVhY3RQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgUmVhY3RQcm9wVHlwZXMuc3RyaW5nLFxuICBdKSxcblxuICAvKiogYHBhZGRpbmdMZWZ0YCB3b3JrcyBsaWtlIGBwYWRkaW5nLWxlZnRgIGluIENTUy5cbiAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9wYWRkaW5nLWxlZnRcbiAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIHBhZGRpbmdMZWZ0OiBSZWFjdFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICBSZWFjdFByb3BUeXBlcy5zdHJpbmcsXG4gIF0pLFxuXG4gIC8qKiBgcGFkZGluZ1JpZ2h0YCB3b3JrcyBsaWtlIGBwYWRkaW5nLXJpZ2h0YCBpbiBDU1MuXG4gICAqIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvcGFkZGluZy1yaWdodFxuICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgcGFkZGluZ1JpZ2h0OiBSZWFjdFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICBSZWFjdFByb3BUeXBlcy5zdHJpbmcsXG4gIF0pLFxuXG4gIC8qKlxuICAgKiBXaGVuIGRpcmVjdGlvbiBpcyBgbHRyYCwgYHBhZGRpbmdTdGFydGAgaXMgZXF1aXZhbGVudCB0byBgcGFkZGluZ0xlZnRgLlxuICAgKiBXaGVuIGRpcmVjdGlvbiBpcyBgcnRsYCwgYHBhZGRpbmdTdGFydGAgaXMgZXF1aXZhbGVudCB0byBgcGFkZGluZ1JpZ2h0YC5cbiAgICovXG4gIHBhZGRpbmdTdGFydDogUmVhY3RQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gICAgUmVhY3RQcm9wVHlwZXMuc3RyaW5nLFxuICBdKSxcblxuICAvKipcbiAgICogV2hlbiBkaXJlY3Rpb24gaXMgYGx0cmAsIGBwYWRkaW5nRW5kYCBpcyBlcXVpdmFsZW50IHRvIGBwYWRkaW5nUmlnaHRgLlxuICAgKiBXaGVuIGRpcmVjdGlvbiBpcyBgcnRsYCwgYHBhZGRpbmdFbmRgIGlzIGVxdWl2YWxlbnQgdG8gYHBhZGRpbmdMZWZ0YC5cbiAgICovXG4gIHBhZGRpbmdFbmQ6IFJlYWN0UHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAgIFJlYWN0UHJvcFR5cGVzLnN0cmluZyxcbiAgXSksXG5cbiAgLyoqIGBib3JkZXJXaWR0aGAgd29ya3MgbGlrZSBgYm9yZGVyLXdpZHRoYCBpbiBDU1MuXG4gICAqIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYm9yZGVyLXdpZHRoXG4gICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBib3JkZXJXaWR0aDogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKiBgYm9yZGVyVG9wV2lkdGhgIHdvcmtzIGxpa2UgYGJvcmRlci10b3Atd2lkdGhgIGluIENTUy5cbiAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ib3JkZXItdG9wLXdpZHRoXG4gICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBib3JkZXJUb3BXaWR0aDogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBXaGVuIGRpcmVjdGlvbiBpcyBgbHRyYCwgYGJvcmRlclN0YXJ0V2lkdGhgIGlzIGVxdWl2YWxlbnQgdG8gYGJvcmRlckxlZnRXaWR0aGAuXG4gICAqIFdoZW4gZGlyZWN0aW9uIGlzIGBydGxgLCBgYm9yZGVyU3RhcnRXaWR0aGAgaXMgZXF1aXZhbGVudCB0byBgYm9yZGVyUmlnaHRXaWR0aGAuXG4gICAqL1xuICBib3JkZXJTdGFydFdpZHRoOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFdoZW4gZGlyZWN0aW9uIGlzIGBsdHJgLCBgYm9yZGVyRW5kV2lkdGhgIGlzIGVxdWl2YWxlbnQgdG8gYGJvcmRlclJpZ2h0V2lkdGhgLlxuICAgKiBXaGVuIGRpcmVjdGlvbiBpcyBgcnRsYCwgYGJvcmRlckVuZFdpZHRoYCBpcyBlcXVpdmFsZW50IHRvIGBib3JkZXJMZWZ0V2lkdGhgLlxuICAgKi9cbiAgYm9yZGVyRW5kV2lkdGg6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcblxuICAvKiogYGJvcmRlclJpZ2h0V2lkdGhgIHdvcmtzIGxpa2UgYGJvcmRlci1yaWdodC13aWR0aGAgaW4gQ1NTLlxuICAgKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1yaWdodC13aWR0aFxuICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgYm9yZGVyUmlnaHRXaWR0aDogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKiBgYm9yZGVyQm90dG9tV2lkdGhgIHdvcmtzIGxpa2UgYGJvcmRlci1ib3R0b20td2lkdGhgIGluIENTUy5cbiAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9ib3JkZXItYm90dG9tLXdpZHRoXG4gICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBib3JkZXJCb3R0b21XaWR0aDogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKiBgYm9yZGVyTGVmdFdpZHRoYCB3b3JrcyBsaWtlIGBib3JkZXItbGVmdC13aWR0aGAgaW4gQ1NTLlxuICAgKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2JvcmRlci1sZWZ0LXdpZHRoXG4gICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBib3JkZXJMZWZ0V2lkdGg6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcblxuICAvKiogYHBvc2l0aW9uYCBpbiBSZWFjdCBOYXRpdmUgaXMgc2ltaWxhciB0byByZWd1bGFyIENTUywgYnV0XG4gICAqICBldmVyeXRoaW5nIGlzIHNldCB0byBgcmVsYXRpdmVgIGJ5IGRlZmF1bHQsIHNvIGBhYnNvbHV0ZWBcbiAgICogIHBvc2l0aW9uaW5nIGlzIGFsd2F5cyBqdXN0IHJlbGF0aXZlIHRvIHRoZSBwYXJlbnQuXG4gICAqXG4gICAqICBJZiB5b3Ugd2FudCB0byBwb3NpdGlvbiBhIGNoaWxkIHVzaW5nIHNwZWNpZmljIG51bWJlcnMgb2YgbG9naWNhbFxuICAgKiAgcGl4ZWxzIHJlbGF0aXZlIHRvIGl0cyBwYXJlbnQsIHNldCB0aGUgY2hpbGQgdG8gaGF2ZSBgYWJzb2x1dGVgXG4gICAqICBwb3NpdGlvbi5cbiAgICpcbiAgICogIElmIHlvdSB3YW50IHRvIHBvc2l0aW9uIGEgY2hpbGQgcmVsYXRpdmUgdG8gc29tZXRoaW5nXG4gICAqICB0aGF0IGlzIG5vdCBpdHMgcGFyZW50LCBqdXN0IGRvbid0IHVzZSBzdHlsZXMgZm9yIHRoYXQuIFVzZSB0aGVcbiAgICogIGNvbXBvbmVudCB0cmVlLlxuICAgKlxuICAgKiAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay95b2dhXG4gICAqICBmb3IgbW9yZSBkZXRhaWxzIG9uIGhvdyBgcG9zaXRpb25gIGRpZmZlcnMgYmV0d2VlbiBSZWFjdCBOYXRpdmVcbiAgICogIGFuZCBDU1MuXG4gICAqL1xuICBwb3NpdGlvbjogUmVhY3RQcm9wVHlwZXMub25lT2YoW1xuICAgICdhYnNvbHV0ZScsXG4gICAgJ3JlbGF0aXZlJ1xuICBdKSxcblxuICAvKiogYGZsZXhEaXJlY3Rpb25gIGNvbnRyb2xzIHdoaWNoIGRpcmVjdGlvbnMgY2hpbGRyZW4gb2YgYSBjb250YWluZXIgZ28uXG4gICAqICBgcm93YCBnb2VzIGxlZnQgdG8gcmlnaHQsIGBjb2x1bW5gIGdvZXMgdG9wIHRvIGJvdHRvbSwgYW5kIHlvdSBtYXlcbiAgICogIGJlIGFibGUgdG8gZ3Vlc3Mgd2hhdCB0aGUgb3RoZXIgdHdvIGRvLiBJdCB3b3JrcyBsaWtlIGBmbGV4LWRpcmVjdGlvbmBcbiAgICogIGluIENTUywgZXhjZXB0IHRoZSBkZWZhdWx0IGlzIGBjb2x1bW5gLlxuICAgKiAgU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9mbGV4LWRpcmVjdGlvblxuICAgKiAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGZsZXhEaXJlY3Rpb246IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFtcbiAgICAncm93JyxcbiAgICAncm93LXJldmVyc2UnLFxuICAgICdjb2x1bW4nLFxuICAgICdjb2x1bW4tcmV2ZXJzZSdcbiAgXSksXG5cbiAgLyoqIGBmbGV4V3JhcGAgY29udHJvbHMgd2hldGhlciBjaGlsZHJlbiBjYW4gd3JhcCBhcm91bmQgYWZ0ZXIgdGhleVxuICAgKiAgaGl0IHRoZSBlbmQgb2YgYSBmbGV4IGNvbnRhaW5lci5cbiAgICogIEl0IHdvcmtzIGxpa2UgYGZsZXgtd3JhcGAgaW4gQ1NTIChkZWZhdWx0OiBub3dyYXApLlxuICAgKiAgU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9mbGV4LXdyYXBcbiAgICogIGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBmbGV4V3JhcDogUmVhY3RQcm9wVHlwZXMub25lT2YoW1xuICAgICd3cmFwJyxcbiAgICAnbm93cmFwJ1xuICBdKSxcblxuICAvKiogYGp1c3RpZnlDb250ZW50YCBhbGlnbnMgY2hpbGRyZW4gaW4gdGhlIG1haW4gZGlyZWN0aW9uLlxuICAgKiAgRm9yIGV4YW1wbGUsIGlmIGNoaWxkcmVuIGFyZSBmbG93aW5nIHZlcnRpY2FsbHksIGBqdXN0aWZ5Q29udGVudGBcbiAgICogIGNvbnRyb2xzIGhvdyB0aGV5IGFsaWduIHZlcnRpY2FsbHkuXG4gICAqICBJdCB3b3JrcyBsaWtlIGBqdXN0aWZ5LWNvbnRlbnRgIGluIENTUyAoZGVmYXVsdDogZmxleC1zdGFydCkuXG4gICAqICBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2p1c3RpZnktY29udGVudFxuICAgKiAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGp1c3RpZnlDb250ZW50OiBSZWFjdFByb3BUeXBlcy5vbmVPZihbXG4gICAgJ2ZsZXgtc3RhcnQnLFxuICAgICdmbGV4LWVuZCcsXG4gICAgJ2NlbnRlcicsXG4gICAgJ3NwYWNlLWJldHdlZW4nLFxuICAgICdzcGFjZS1hcm91bmQnLFxuICAgICdzcGFjZS1ldmVubHknXG4gIF0pLFxuXG4gIC8qKiBgYWxpZ25JdGVtc2AgYWxpZ25zIGNoaWxkcmVuIGluIHRoZSBjcm9zcyBkaXJlY3Rpb24uXG4gICAqICBGb3IgZXhhbXBsZSwgaWYgY2hpbGRyZW4gYXJlIGZsb3dpbmcgdmVydGljYWxseSwgYGFsaWduSXRlbXNgXG4gICAqICBjb250cm9scyBob3cgdGhleSBhbGlnbiBob3Jpem9udGFsbHkuXG4gICAqICBJdCB3b3JrcyBsaWtlIGBhbGlnbi1pdGVtc2AgaW4gQ1NTIChkZWZhdWx0OiBzdHJldGNoKS5cbiAgICogIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYWxpZ24taXRlbXNcbiAgICogIGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBhbGlnbkl0ZW1zOiBSZWFjdFByb3BUeXBlcy5vbmVPZihbXG4gICAgJ2ZsZXgtc3RhcnQnLFxuICAgICdmbGV4LWVuZCcsXG4gICAgJ2NlbnRlcicsXG4gICAgJ3N0cmV0Y2gnLFxuICAgICdiYXNlbGluZSdcbiAgXSksXG5cbiAgLyoqIGBhbGlnblNlbGZgIGNvbnRyb2xzIGhvdyBhIGNoaWxkIGFsaWducyBpbiB0aGUgY3Jvc3MgZGlyZWN0aW9uLFxuICAgKiAgb3ZlcnJpZGluZyB0aGUgYGFsaWduSXRlbXNgIG9mIHRoZSBwYXJlbnQuIEl0IHdvcmtzIGxpa2UgYGFsaWduLXNlbGZgXG4gICAqICBpbiBDU1MgKGRlZmF1bHQ6IGF1dG8pLlxuICAgKiAgU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9hbGlnbi1zZWxmXG4gICAqICBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgYWxpZ25TZWxmOiBSZWFjdFByb3BUeXBlcy5vbmVPZihbXG4gICAgJ2F1dG8nLFxuICAgICdmbGV4LXN0YXJ0JyxcbiAgICAnZmxleC1lbmQnLFxuICAgICdjZW50ZXInLFxuICAgICdzdHJldGNoJyxcbiAgICAnYmFzZWxpbmUnXG4gIF0pLFxuXG4gIC8qKiBgYWxpZ25Db250ZW50YCBjb250cm9scyBob3cgcm93cyBhbGlnbiBpbiB0aGUgY3Jvc3MgZGlyZWN0aW9uLFxuICAgKiAgb3ZlcnJpZGluZyB0aGUgYGFsaWduQ29udGVudGAgb2YgdGhlIHBhcmVudC5cbiAgICogIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYWxpZ24tY29udGVudFxuICAgKiAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGFsaWduQ29udGVudDogUmVhY3RQcm9wVHlwZXMub25lT2YoW1xuICAgICdmbGV4LXN0YXJ0JyxcbiAgICAnZmxleC1lbmQnLFxuICAgICdjZW50ZXInLFxuICAgICdzdHJldGNoJyxcbiAgICAnc3BhY2UtYmV0d2VlbicsXG4gICAgJ3NwYWNlLWFyb3VuZCdcbiAgXSksXG5cbiAgLyoqIGBvdmVyZmxvd2AgY29udHJvbHMgaG93IGNoaWxkcmVuIGFyZSBtZWFzdXJlZCBhbmQgZGlzcGxheWVkLlxuICAgKiAgYG92ZXJmbG93OiBoaWRkZW5gIGNhdXNlcyB2aWV3cyB0byBiZSBjbGlwcGVkIHdoaWxlIGBvdmVyZmxvdzogc2Nyb2xsYFxuICAgKiAgY2F1c2VzIHZpZXdzIHRvIGJlIG1lYXN1cmVkIGluZGVwZW5kZW50bHkgb2YgdGhlaXIgcGFyZW50cyBtYWluIGF4aXMuXG4gICAqICBJdCB3b3JrcyBsaWtlIGBvdmVyZmxvd2AgaW4gQ1NTIChkZWZhdWx0OiB2aXNpYmxlKS5cbiAgICogIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9DU1Mvb3ZlcmZsb3dcbiAgICogIGZvciBtb3JlIGRldGFpbHMuXG4gICAqICBgb3ZlcmZsb3c6IHZpc2libGVgIG9ubHkgd29ya3Mgb24gaU9TLiBPbiBBbmRyb2lkLCBhbGwgdmlld3Mgd2lsbCBjbGlwXG4gICAqICB0aGVpciBjaGlsZHJlbi5cbiAgICovXG4gIG92ZXJmbG93OiBSZWFjdFByb3BUeXBlcy5vbmVPZihbXG4gICAgJ3Zpc2libGUnLFxuICAgICdoaWRkZW4nLFxuICAgICdzY3JvbGwnLFxuICBdKSxcblxuICAvKiogSW4gUmVhY3QgTmF0aXZlIGBmbGV4YCBkb2VzIG5vdCB3b3JrIHRoZSBzYW1lIHdheSB0aGF0IGl0IGRvZXMgaW4gQ1NTLlxuICAgKiAgYGZsZXhgIGlzIGEgbnVtYmVyIHJhdGhlciB0aGFuIGEgc3RyaW5nLCBhbmQgaXQgd29ya3NcbiAgICogIGFjY29yZGluZyB0byB0aGUgYFlvZ2FgIGxpYnJhcnlcbiAgICogIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay95b2dhXG4gICAqXG4gICAqICBXaGVuIGBmbGV4YCBpcyBhIHBvc2l0aXZlIG51bWJlciwgaXQgbWFrZXMgdGhlIGNvbXBvbmVudCBmbGV4aWJsZVxuICAgKiAgYW5kIGl0IHdpbGwgYmUgc2l6ZWQgcHJvcG9ydGlvbmFsIHRvIGl0cyBmbGV4IHZhbHVlLiBTbyBhXG4gICAqICBjb21wb25lbnQgd2l0aCBgZmxleGAgc2V0IHRvIDIgd2lsbCB0YWtlIHR3aWNlIHRoZSBzcGFjZSBhcyBhXG4gICAqICBjb21wb25lbnQgd2l0aCBgZmxleGAgc2V0IHRvIDEuXG4gICAqXG4gICAqICBXaGVuIGBmbGV4YCBpcyAwLCB0aGUgY29tcG9uZW50IGlzIHNpemVkIGFjY29yZGluZyB0byBgd2lkdGhgXG4gICAqICBhbmQgYGhlaWdodGAgYW5kIGl0IGlzIGluZmxleGlibGUuXG4gICAqXG4gICAqICBXaGVuIGBmbGV4YCBpcyAtMSwgdGhlIGNvbXBvbmVudCBpcyBub3JtYWxseSBzaXplZCBhY2NvcmRpbmdcbiAgICogIGB3aWR0aGAgYW5kIGBoZWlnaHRgLiBIb3dldmVyLCBpZiB0aGVyZSdzIG5vdCBlbm91Z2ggc3BhY2UsXG4gICAqICB0aGUgY29tcG9uZW50IHdpbGwgc2hyaW5rIHRvIGl0cyBgbWluV2lkdGhgIGFuZCBgbWluSGVpZ2h0YC5cbiAgICpcbiAgICogZmxleEdyb3csIGZsZXhTaHJpbmssIGFuZCBmbGV4QmFzaXMgd29yayB0aGUgc2FtZSBhcyBpbiBDU1MuXG4gICAqL1xuICBmbGV4OiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIGZsZXhHcm93OiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIGZsZXhTaHJpbms6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgZmxleEJhc2lzOiBSZWFjdFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICBSZWFjdFByb3BUeXBlcy5zdHJpbmcsXG4gIF0pLFxuXG4gIC8qKlxuICAgKiBBc3BlY3QgcmF0aW8gY29udHJvbCB0aGUgc2l6ZSBvZiB0aGUgdW5kZWZpbmVkIGRpbWVuc2lvbiBvZiBhIG5vZGUuIEFzcGVjdCByYXRpbyBpcyBhXG4gICAqIG5vbi1zdGFuZGFyZCBwcm9wZXJ0eSBvbmx5IGF2YWlsYWJsZSBpbiByZWFjdCBuYXRpdmUgYW5kIG5vdCBDU1MuXG4gICAqXG4gICAqIC0gT24gYSBub2RlIHdpdGggYSBzZXQgd2lkdGgvaGVpZ2h0IGFzcGVjdCByYXRpbyBjb250cm9sIHRoZSBzaXplIG9mIHRoZSB1bnNldCBkaW1lbnNpb25cbiAgICogLSBPbiBhIG5vZGUgd2l0aCBhIHNldCBmbGV4IGJhc2lzIGFzcGVjdCByYXRpbyBjb250cm9scyB0aGUgc2l6ZSBvZiB0aGUgbm9kZSBpbiB0aGUgY3Jvc3MgYXhpc1xuICAgKiAgIGlmIHVuc2V0XG4gICAqIC0gT24gYSBub2RlIHdpdGggYSBtZWFzdXJlIGZ1bmN0aW9uIGFzcGVjdCByYXRpbyB3b3JrcyBhcyB0aG91Z2ggdGhlIG1lYXN1cmUgZnVuY3Rpb24gbWVhc3VyZXNcbiAgICogICB0aGUgZmxleCBiYXNpc1xuICAgKiAtIE9uIGEgbm9kZSB3aXRoIGZsZXggZ3Jvdy9zaHJpbmsgYXNwZWN0IHJhdGlvIGNvbnRyb2xzIHRoZSBzaXplIG9mIHRoZSBub2RlIGluIHRoZSBjcm9zcyBheGlzXG4gICAqICAgaWYgdW5zZXRcbiAgICogLSBBc3BlY3QgcmF0aW8gdGFrZXMgbWluL21heCBkaW1lbnNpb25zIGludG8gYWNjb3VudFxuICAgKi9cbiAgYXNwZWN0UmF0aW86IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcblxuICAvKiogYHpJbmRleGAgY29udHJvbHMgd2hpY2ggY29tcG9uZW50cyBkaXNwbGF5IG9uIHRvcCBvZiBvdGhlcnMuXG4gICAqICBOb3JtYWxseSwgeW91IGRvbid0IHVzZSBgekluZGV4YC4gQ29tcG9uZW50cyByZW5kZXIgYWNjb3JkaW5nIHRvXG4gICAqICB0aGVpciBvcmRlciBpbiB0aGUgZG9jdW1lbnQgdHJlZSwgc28gbGF0ZXIgY29tcG9uZW50cyBkcmF3IG92ZXJcbiAgICogIGVhcmxpZXIgb25lcy4gYHpJbmRleGAgbWF5IGJlIHVzZWZ1bCBpZiB5b3UgaGF2ZSBhbmltYXRpb25zIG9yIGN1c3RvbVxuICAgKiAgbW9kYWwgaW50ZXJmYWNlcyB3aGVyZSB5b3UgZG9uJ3Qgd2FudCB0aGlzIGJlaGF2aW9yLlxuICAgKlxuICAgKiAgSXQgd29ya3MgbGlrZSB0aGUgQ1NTIGB6LWluZGV4YCBwcm9wZXJ0eSAtIGNvbXBvbmVudHMgd2l0aCBhIGxhcmdlclxuICAgKiAgYHpJbmRleGAgd2lsbCByZW5kZXIgb24gdG9wLiBUaGluayBvZiB0aGUgei1kaXJlY3Rpb24gbGlrZSBpdCdzXG4gICAqICBwb2ludGluZyBmcm9tIHRoZSBwaG9uZSBpbnRvIHlvdXIgZXllYmFsbC5cbiAgICogIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1Mvei1pbmRleCBmb3JcbiAgICogIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIHpJbmRleDogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKiBgZGlyZWN0aW9uYCBzcGVjaWZpZXMgdGhlIGRpcmVjdGlvbmFsIGZsb3cgb2YgdGhlIHVzZXIgaW50ZXJmYWNlLlxuICAgKiAgVGhlIGRlZmF1bHQgaXMgYGluaGVyaXRgLCBleGNlcHQgZm9yIHJvb3Qgbm9kZSB3aGljaCB3aWxsIGhhdmVcbiAgICogIHZhbHVlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGxvY2FsZS5cbiAgICogIFNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby95b2dhL2RvY3MvcnRsL1xuICAgKiAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICogIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGRpcmVjdGlvbjogUmVhY3RQcm9wVHlwZXMub25lT2YoW1xuICAgICdpbmhlcml0JyxcbiAgICAnbHRyJyxcbiAgICAncnRsJyxcbiAgXSksXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExheW91dFByb3BUeXBlcztcbiJdfQ==