{"version":3,"sources":["Dimensions.js"],"names":["EventEmitter","require","Platform","RCTDeviceEventEmitter","invariant","eventEmitter","dimensionsInitialized","dimensions","Dimensions","dims","windowPhysicalPixels","JSON","parse","stringify","window","width","scale","height","fontScale","OS","screenPhysicalPixels","screen","emit","dim","type","handler","addListener","removeListener","global","nativeExtensions","DeviceInfo","nativeExtensionsEnabled","set","update","module","exports"],"mappings":"AASA,a,+2BAEA,GAAIA,cAAeC,OAAf,gBAAJ,CACA,GAAIC,UAAWD,OAAX,YAAJ,CACA,GAAIE,uBAAwBF,OAAxB,yBAAJ,CAEA,GAAIG,WAAYH,OAAZ,sBAAJ,CAEA,GAAII,cAAe,GAAIL,aAAJ,EAAnB,CACA,GAAIM,uBAAwB,KAA5B,CACA,GAAIC,YAAa,EAAjB,C,GACMC,W,gIAOOC,I,CAAiC,CAI1C,GAAIA,MAAQA,KAAKC,oBAAjB,CAAuC,CAErCD,KAAOE,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeJ,IAAf,CAAX,CAAP,CAEA,GAAMC,sBAAuBD,KAAKC,oBAAlC,CACAD,KAAKK,MAAL,CAAc,CACZC,MAAOL,qBAAqBK,KAArB,CAA6BL,qBAAqBM,KAD7C,CAEZC,OAAQP,qBAAqBO,MAArB,CAA8BP,qBAAqBM,KAF/C,CAGZA,MAAON,qBAAqBM,KAHhB,CAIZE,UAAWR,qBAAqBQ,SAJpB,CAAd,CAMA,GAAIhB,SAASiB,EAAT,GAAgB,SAApB,CAA+B,CAE7B,GAAMC,sBAAuBX,KAAKW,oBAAlC,CACAX,KAAKY,MAAL,CAAc,CACZN,MAAOK,qBAAqBL,KAArB,CAA6BK,qBAAqBJ,KAD7C,CAEZC,OAAQG,qBAAqBH,MAArB,CAA8BG,qBAAqBJ,KAF/C,CAGZA,MAAOI,qBAAqBJ,KAHhB,CAIZE,UAAWE,qBAAqBF,SAJpB,CAAd,CAQA,MAAOT,MAAKW,oBAAZ,CACD,CAZD,IAYO,CACLX,KAAKY,MAAL,CAAcZ,KAAKK,MAAnB,CACD,CAED,MAAOL,MAAKC,oBAAZ,CACD,CAED,SAAcH,UAAd,CAA0BE,IAA1B,EACA,GAAIH,qBAAJ,CAA2B,CAEzBD,aAAaiB,IAAb,CAAkB,QAAlB,CAA4B,CAC1BR,OAAQP,WAAWO,MADO,CAE1BO,OAAQd,WAAWc,MAFO,CAA5B,EAID,CAND,IAMO,CACLf,sBAAwB,IAAxB,CACD,CACF,C,gCAiBUiB,G,CAAqB,CAC9BnB,UAAUG,WAAWgB,GAAX,CAAV,CAA2B,4BAA8BA,GAAzD,EACA,MAAOhB,YAAWgB,GAAX,CAAP,CACD,C,0DAWCC,I,CACAC,O,CACA,CACArB,UACEoB,OAAS,QADX,CAEE,4CAFF,CAEgDA,IAFhD,EAIAnB,aAAaqB,WAAb,CAAyBF,IAAzB,CAA+BC,OAA/B,EACD,C,gEAMCD,I,CACAC,O,CACA,CACArB,UACEoB,OAAS,QADX,CAEE,mDAFF,CAEuDA,IAFvD,EAIAnB,aAAasB,cAAb,CAA4BH,IAA5B,CAAkCC,OAAlC,EACD,C,0BAGH,GAAIhB,MAA8BmB,OAAOC,gBAAP,EAA2BD,OAAOC,gBAAP,CAAwBC,UAAnD,EAAiEF,OAAOC,gBAAP,CAAwBC,UAAxB,CAAmCtB,UAAtI,CACA,GAAIuB,yBAA0B,IAA9B,CACA,GAAI,CAACtB,IAAL,CAAW,CACT,GAAMqB,YAAa7B,OAAb,cAAN,CACAQ,KAAOqB,WAAWtB,UAAlB,CACAuB,wBAA0B,KAA1B,CACD,CAED3B,UAAUK,IAAV,CAAgB,mFAAhB,EACAD,WAAWwB,GAAX,CAAevB,IAAf,EACA,GAAI,CAACsB,uBAAL,CAA8B,CAC5B5B,sBAAsBuB,WAAtB,CAAkC,qBAAlC,CAAyD,SAASO,MAAT,CAAiB,CACxEzB,WAAWwB,GAAX,CAAeC,MAAf,EACD,CAFD,EAGD,CAEDC,OAAOC,OAAP,CAAiB3B,UAAjB","file":"Dimensions.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule Dimensions\n * @flow\n */\n'use strict';\n\nvar EventEmitter = require('EventEmitter');\nvar Platform = require('Platform');\nvar RCTDeviceEventEmitter = require('RCTDeviceEventEmitter');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar eventEmitter = new EventEmitter();\nvar dimensionsInitialized = false;\nvar dimensions = {};\nclass Dimensions {\n  /**\n   * This should only be called from native code by sending the\n   * didUpdateDimensions event.\n   *\n   * @param {object} dims Simple string-keyed object of dimensions to set\n   */\n  static set(dims: {[key:string]: any}): void {\n    // We calculate the window dimensions in JS so that we don't encounter loss of\n    // precision in transferring the dimensions (which could be non-integers) over\n    // the bridge.\n    if (dims && dims.windowPhysicalPixels) {\n      // parse/stringify => Clone hack\n      dims = JSON.parse(JSON.stringify(dims));\n\n      const windowPhysicalPixels = dims.windowPhysicalPixels;\n      dims.window = {\n        width: windowPhysicalPixels.width / windowPhysicalPixels.scale,\n        height: windowPhysicalPixels.height / windowPhysicalPixels.scale,\n        scale: windowPhysicalPixels.scale,\n        fontScale: windowPhysicalPixels.fontScale,\n      };\n      if (Platform.OS === 'android') {\n        // Screen and window dimensions are different on android\n        const screenPhysicalPixels = dims.screenPhysicalPixels;\n        dims.screen = {\n          width: screenPhysicalPixels.width / screenPhysicalPixels.scale,\n          height: screenPhysicalPixels.height / screenPhysicalPixels.scale,\n          scale: screenPhysicalPixels.scale,\n          fontScale: screenPhysicalPixels.fontScale,\n        };\n\n        // delete so no callers rely on this existing\n        delete dims.screenPhysicalPixels;\n      } else {\n        dims.screen = dims.window;\n      }\n      // delete so no callers rely on this existing\n      delete dims.windowPhysicalPixels;\n    }\n\n    Object.assign(dimensions, dims);\n    if (dimensionsInitialized) {\n      // Don't fire 'change' the first time the dimensions are set.\n      eventEmitter.emit('change', {\n        window: dimensions.window,\n        screen: dimensions.screen\n      });\n    } else {\n      dimensionsInitialized = true;\n    }\n  }\n\n  /**\n   * Initial dimensions are set before `runApplication` is called so they should\n   * be available before any other require's are run, but may be updated later.\n   *\n   * Note: Although dimensions are available immediately, they may change (e.g\n   * due to device rotation) so any rendering logic or styles that depend on\n   * these constants should try to call this function on every render, rather\n   * than caching the value (for example, using inline styles rather than\n   * setting a value in a `StyleSheet`).\n   *\n   * Example: `var {height, width} = Dimensions.get('window');`\n   *\n   * @param {string} dim Name of dimension as defined when calling `set`.\n   * @returns {Object?} Value for the dimension.\n   */\n  static get(dim: string): Object {\n    invariant(dimensions[dim], 'No dimension set for key ' + dim);\n    return dimensions[dim];\n  }\n\n  /**\n   * Add an event handler. Supported events:\n   *\n   * - `change`: Fires when a property within the `Dimensions` object changes. The argument\n   *   to the event handler is an object with `window` and `screen` properties whose values\n   *   are the same as the return values of `Dimensions.get('window')` and\n   *   `Dimensions.get('screen')`, respectively.\n   */\n  static addEventListener(\n    type: string,\n    handler: Function\n  ) {\n    invariant(\n      type === 'change',\n      'Trying to subscribe to unknown event: \"%s\"', type\n    );\n    eventEmitter.addListener(type, handler);\n  }\n\n  /**\n   * Remove an event handler.\n   */\n  static removeEventListener(\n    type: string,\n    handler: Function\n  ) {\n    invariant(\n      type === 'change',\n      'Trying to remove listener for unknown event: \"%s\"', type\n    );\n    eventEmitter.removeListener(type, handler);\n  }\n}\n\nlet dims: ?{[key: string]: any} = global.nativeExtensions && global.nativeExtensions.DeviceInfo && global.nativeExtensions.DeviceInfo.Dimensions;\nlet nativeExtensionsEnabled = true;\nif (!dims) {\n  const DeviceInfo = require('DeviceInfo');\n  dims = DeviceInfo.Dimensions;\n  nativeExtensionsEnabled = false;\n}\n\ninvariant(dims, 'Either DeviceInfo native extension or DeviceInfo Native Module must be registered');\nDimensions.set(dims);\nif (!nativeExtensionsEnabled) {\n  RCTDeviceEventEmitter.addListener('didUpdateDimensions', function(update) {\n    Dimensions.set(update);\n  });\n}\n\nmodule.exports = Dimensions;\n"]}